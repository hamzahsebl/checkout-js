{"version":3,"file":"order-summary-drawer-569ab2b9.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/order/getLineItemsCount.ts","webpack://checkout/./packages/core/src/app/order/OrderSummaryModal.tsx","webpack://checkout/./packages/core/src/app/order/OrderSummaryDrawer.tsx","webpack://checkout/./packages/core/src/app/ui/modal/ModalTrigger.tsx"],"sourcesContent":["import { LineItemMap } from '@bigcommerce/checkout-sdk';\r\n\r\nexport default function getLineItemsCount({\r\n    physicalItems,\r\n    digitalItems,\r\n    giftCertificates,\r\n    customItems,\r\n}: LineItemMap): number {\r\n    return physicalItems.length +\r\n        digitalItems.length +\r\n        giftCertificates.length +\r\n        (customItems || []).length;\r\n}\r\n","import { LineItemMap, ShopperCurrency as ShopperCurrencyType, StoreCurrency } from '@bigcommerce/checkout-sdk';\r\nimport React, { Fragment, FunctionComponent, ReactNode } from 'react';\r\n\r\nimport { preventDefault } from '../common/dom';\r\nimport { TranslatedString } from '../locale';\r\nimport { IconClose } from '../ui/icon';\r\nimport { Modal, ModalHeader } from '../ui/modal';\r\n\r\nimport OrderSummaryItems from './OrderSummaryItems';\r\nimport OrderSummarySection from './OrderSummarySection';\r\nimport OrderSummarySubtotals, { OrderSummarySubtotalsProps } from './OrderSummarySubtotals';\r\nimport OrderSummaryTotal from './OrderSummaryTotal';\r\n\r\nexport interface OrderSummaryDrawerProps {\r\n    additionalLineItems?: ReactNode;\r\n    lineItems: LineItemMap;\r\n    total: number;\r\n    storeCurrency: StoreCurrency;\r\n    shopperCurrency: ShopperCurrencyType;\r\n    isOpen: boolean;\r\n    headerLink?: ReactNode;\r\n    onRequestClose?(): void;\r\n    onAfterOpen?(): void;\r\n}\r\n\r\nconst OrderSummaryModal: FunctionComponent<OrderSummaryDrawerProps & OrderSummarySubtotalsProps> = ({\r\n    additionalLineItems,\r\n    children,\r\n    onRequestClose,\r\n    onAfterOpen,\r\n    storeCurrency,\r\n    shopperCurrency,\r\n    isOpen,\r\n    headerLink,\r\n    lineItems,\r\n    total,\r\n    ...orderSummarySubtotalsProps\r\n}) => (\r\n<Modal\r\n    additionalBodyClassName=\"cart-modal-body optimizedCheckout-orderSummary\"\r\n    additionalHeaderClassName=\"cart-modal-header optimizedCheckout-orderSummary\"\r\n    header={ renderHeader({ headerLink, onRequestClose }) }\r\n    isOpen={ isOpen }\r\n    onAfterOpen={ onAfterOpen }\r\n    onRequestClose={ onRequestClose }\r\n>\r\n    <OrderSummarySection>\r\n        <OrderSummaryItems items={ lineItems } />\r\n    </OrderSummarySection>\r\n    <OrderSummarySection>\r\n        <OrderSummarySubtotals\r\n            { ...orderSummarySubtotalsProps }\r\n        />\r\n        { additionalLineItems }\r\n    </OrderSummarySection>\r\n    <OrderSummarySection>\r\n        <OrderSummaryTotal\r\n            orderAmount={ total }\r\n            shopperCurrencyCode={ shopperCurrency.code }\r\n            storeCurrencyCode={ storeCurrency.code }\r\n        />\r\n    </OrderSummarySection>\r\n</Modal>\r\n);\r\n\r\nconst renderHeader: FunctionComponent<{\r\n    headerLink: ReactNode;\r\n    onRequestClose?(): void;\r\n}> = ({\r\n    onRequestClose,\r\n    headerLink,\r\n}) => (<Fragment>\r\n    <a\r\n        className=\"cart-modal-close\"\r\n        href=\"#\"\r\n        onClick={ preventDefault(onRequestClose) }\r\n    >\r\n        <span className=\"is-srOnly\">\r\n            <TranslatedString id=\"common.close_action\" />\r\n        </span>\r\n        <IconClose />\r\n    </a>\r\n    <ModalHeader additionalClassName=\"cart-modal-title\">\r\n        <TranslatedString id=\"cart.cart_heading\" />\r\n    </ModalHeader>\r\n\r\n    { headerLink }\r\n</Fragment>);\r\n\r\nexport default OrderSummaryModal;\r\n","import { LineItemMap, ShopperCurrency as ShopperCurrencyType, StoreCurrency } from '@bigcommerce/checkout-sdk';\r\nimport classNames from 'classnames';\r\nimport React, { memo, useCallback, FunctionComponent, ReactNode } from 'react';\r\n\r\nimport { ShopperCurrency } from '../currency';\r\nimport { TranslatedString } from '../locale';\r\nimport { IconGiftCertificate } from '../ui/icon';\r\nimport { ModalTrigger } from '../ui/modal';\r\n\r\nimport getItemsCount from './getItemsCount';\r\nimport getLineItemsCount from './getLineItemsCount';\r\nimport OrderSummaryModal from './OrderSummaryModal';\r\nimport { OrderSummarySubtotalsProps } from './OrderSummarySubtotals';\r\n\r\nexport interface OrderSummaryDrawerProps {\r\n    lineItems: LineItemMap;\r\n    total: number;\r\n    headerLink: ReactNode;\r\n    storeCurrency: StoreCurrency;\r\n    shopperCurrency: ShopperCurrencyType;\r\n    additionalLineItems?: ReactNode;\r\n}\r\n\r\nconst OrderSummaryDrawer: FunctionComponent<OrderSummaryDrawerProps & OrderSummarySubtotalsProps> = ({\r\n    additionalLineItems,\r\n    coupons,\r\n    discountAmount,\r\n    giftCertificates,\r\n    handlingAmount,\r\n    headerLink,\r\n    lineItems,\r\n    onRemovedCoupon,\r\n    onRemovedGiftCertificate,\r\n    shippingAmount,\r\n    shopperCurrency,\r\n    storeCreditAmount,\r\n    giftWrappingAmount,\r\n    storeCurrency,\r\n    subtotalAmount,\r\n    taxes,\r\n    total,\r\n}) => {\r\n    const renderModal = useCallback(props => (\r\n        <OrderSummaryModal\r\n            { ...props }\r\n            additionalLineItems={ additionalLineItems }\r\n            coupons={ coupons }\r\n            discountAmount={ discountAmount }\r\n            giftCertificates={ giftCertificates }\r\n            giftWrappingAmount={  giftWrappingAmount }\r\n            handlingAmount={ handlingAmount }\r\n            headerLink={ headerLink }\r\n            lineItems={ lineItems }\r\n            onRemovedCoupon={ onRemovedCoupon }\r\n            onRemovedGiftCertificate={ onRemovedGiftCertificate }\r\n            shippingAmount={ shippingAmount }\r\n            shopperCurrency={ shopperCurrency }\r\n            storeCreditAmount={ storeCreditAmount }\r\n            storeCurrency={ storeCurrency }\r\n            subtotalAmount={ subtotalAmount }\r\n            taxes={ taxes }\r\n            total={ total }\r\n        />\r\n    ), [\r\n        additionalLineItems,\r\n        coupons,\r\n        discountAmount,\r\n        giftCertificates,\r\n        handlingAmount,\r\n        headerLink,\r\n        lineItems,\r\n        onRemovedCoupon,\r\n        onRemovedGiftCertificate,\r\n        giftWrappingAmount,\r\n        shippingAmount,\r\n        shopperCurrency,\r\n        storeCreditAmount,\r\n        storeCurrency,\r\n        subtotalAmount,\r\n        taxes,\r\n        total,\r\n    ]);\r\n\r\n    return <ModalTrigger modal={ renderModal }>\r\n        { ({ onClick, onKeyPress }) => <div\r\n            className=\"cartDrawer optimizedCheckout-orderSummary\"\r\n            onClick={ onClick }\r\n            onKeyPress= { onKeyPress }\r\n            tabIndex= { 0 }\r\n        >\r\n            <figure\r\n                className={ classNames(\r\n                    'cartDrawer-figure',\r\n                    { 'cartDrawer-figure--stack': getLineItemsCount(lineItems) > 1 }\r\n                ) }\r\n            >\r\n                <div className=\"cartDrawer-imageWrapper\">\r\n                    { getImage(lineItems) }\r\n                </div>\r\n            </figure>\r\n            <div className=\"cartDrawer-body\">\r\n                <h3 className=\"cartDrawer-items optimizedCheckout-headingPrimary\">\r\n                    <TranslatedString\r\n                        data={ { count: getItemsCount(lineItems) } }\r\n                        id=\"cart.item_count_text\"\r\n                    />\r\n                </h3>\r\n                <a>\r\n                    <TranslatedString id=\"cart.show_details_action\" />\r\n                </a>\r\n            </div>\r\n            <div className=\"cartDrawer-actions\">\r\n                <h3 className=\"cartDrawer-total optimizedCheckout-headingPrimary\">\r\n                    <ShopperCurrency amount={ total } />\r\n                </h3>\r\n            </div>\r\n        </div> }\r\n    </ModalTrigger>;\r\n};\r\n\r\nfunction getImage(lineItems: LineItemMap): ReactNode {\r\n    const productWithImage = lineItems.physicalItems[0] || lineItems.digitalItems[0];\r\n\r\n    if (productWithImage && productWithImage.imageUrl) {\r\n        return <img\r\n            alt={ productWithImage.name }\r\n            data-test=\"cart-item-image\"\r\n            src={ productWithImage.imageUrl }\r\n        />;\r\n    }\r\n\r\n    if (lineItems.giftCertificates.length) {\r\n        return <IconGiftCertificate />;\r\n    }\r\n}\r\n\r\nexport default memo(OrderSummaryDrawer);\r\n","import React, { Component, Fragment, KeyboardEvent, KeyboardEventHandler, MouseEventHandler, ReactNode } from 'react';\r\n\r\nexport interface ModalTriggerProps {\r\n    children(props: { onClick: MouseEventHandler; onKeyPress: KeyboardEventHandler}): ReactNode;\r\n    modal(props: ModalTriggerModalProps): ReactNode;\r\n}\r\n\r\nexport interface ModalTriggerModalProps {\r\n    isOpen: boolean;\r\n    onRequestClose(): void;\r\n}\r\n\r\nexport interface ModalTriggerState {\r\n    isOpen: boolean;\r\n}\r\n\r\nexport default class ModalTrigger extends Component<ModalTriggerProps, ModalTriggerState> {\r\n    state = {\r\n        isOpen: false,\r\n    };\r\n\r\n    private canHandleEvent: boolean = false;\r\n\r\n    componentDidMount(): void {\r\n        this.canHandleEvent = true;\r\n    }\r\n\r\n    componentWillUnmount(): void {\r\n        this.canHandleEvent = false;\r\n    }\r\n\r\n    render() {\r\n        const { children, modal } = this.props;\r\n        const { isOpen } = this.state;\r\n\r\n        return (\r\n            <Fragment>\r\n                { children({\r\n                    onClick: this.handleOpen,\r\n                    onKeyPress: this.handleKeyOpen,\r\n                }) }\r\n\r\n                { modal({\r\n                    isOpen,\r\n                    onRequestClose: this.handleClose,\r\n                }) }\r\n            </Fragment>\r\n        );\r\n    }\r\n\r\n    private handleOpen: () => void = () => {\r\n        if (!this.canHandleEvent) {\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            isOpen: true,\r\n        });\r\n    };\r\n\r\n    private handleClose: () => void = () => {\r\n        if (!this.canHandleEvent) {\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            isOpen: false,\r\n        });\r\n    };\r\n\r\n    private handleKeyOpen: (keyboardEvent: KeyboardEvent<HTMLElement>) => void = keyboardEvent => {\r\n        if (keyboardEvent.key === 'Enter') {\r\n            this.handleOpen();\r\n        }\r\n    };\r\n}\r\n"],"names":["getLineItemsCount","physicalItems","digitalItems","giftCertificates","customItems","length","renderHeader","onRequestClose","headerLink","Fragment","className","href","onClick","preventDefault","TranslatedString","id","IconClose","ModalHeader","additionalClassName","additionalLineItems","onAfterOpen","storeCurrency","shopperCurrency","isOpen","lineItems","total","orderSummarySubtotalsProps","Modal","additionalBodyClassName","additionalHeaderClassName","header","OrderSummarySection","OrderSummaryItems","items","OrderSummarySubtotals","OrderSummaryTotal","orderAmount","shopperCurrencyCode","code","storeCurrencyCode","memo","coupons","discountAmount","handlingAmount","onRemovedCoupon","onRemovedGiftCertificate","shippingAmount","storeCreditAmount","giftWrappingAmount","subtotalAmount","taxes","renderModal","useCallback","props","ModalTrigger","modal","onKeyPress","tabIndex","productWithImage","imageUrl","alt","name","src","IconGiftCertificate","getImage","data","count","getItemsCount","ShopperCurrency","amount","state","canHandleEvent","handleOpen","setState","handleClose","handleKeyOpen","keyboardEvent","key","componentDidMount","this","componentWillUnmount","render","children","Component"],"sourceRoot":""}
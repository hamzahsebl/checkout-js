{"version":3,"file":"customer-1a02434e.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/common/utility/parseAnchor.ts","webpack://checkout/./packages/core/src/app/customer/mapCreateAccountFromFormValues.ts","webpack://checkout/./packages/core/src/app/customer/validationPatterns.ts","webpack://checkout/./packages/core/src/app/customer/getEmailValidationSchema.ts","webpack://checkout/./packages/core/src/app/customer/getCreateCustomerValidationSchema.ts","webpack://checkout/./packages/core/src/app/customer/CreateAccountForm.tsx","webpack://checkout/./packages/core/src/app/customer/EmailField.tsx","webpack://checkout/./packages/core/src/app/customer/EmailLoginForm.tsx","webpack://checkout/./packages/core/src/app/privacyPolicy/PrivacyPolicyField.tsx","webpack://checkout/./packages/core/src/app/customer/SubscribeField.tsx","webpack://checkout/./packages/core/src/app/customer/GuestForm.tsx","webpack://checkout/./packages/core/src/app/privacyPolicy/getPrivacyPolicyValidationSchema.ts","webpack://checkout/./packages/core/src/app/ui/icon/IconEye.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconEyeSlash.tsx","webpack://checkout/./packages/core/src/app/customer/PasswordField.tsx","webpack://checkout/./packages/core/src/app/customer/LoginForm.tsx","webpack://checkout/./packages/core/src/app/customer/mapErrorMessage.ts","webpack://checkout/./packages/core/src/app/customer/Customer.tsx","webpack://checkout/./packages/core/src/app/formFields/mapCustomFormFieldsFromFormValues.ts","webpack://checkout/./packages/core/src/app/locale/TranslatedLink.tsx","webpack://checkout/./packages/core/src/app/ui/form/CheckboxFormField.tsx","webpack://checkout/./packages/core/src/app/ui/form/CheckboxInput.tsx","webpack://checkout/./packages/core/src/app/locale/withDate.tsx","webpack://checkout/./packages/core/src/app/ui/form/RadioInput.tsx","webpack://checkout/./packages/core/src/app/ui/form/DynamicInput.tsx","webpack://checkout/./packages/core/src/app/ui/form/MultiCheckboxControl.tsx","webpack://checkout/./packages/core/src/app/ui/form/CheckboxGroupFormField.tsx","webpack://checkout/./packages/core/src/app/ui/form/DynamicFormField.tsx","webpack://checkout/./packages/core/src/app/ui/form/TextArea.tsx"],"sourcesContent":["export default function parseAnchor(text: string): string[] {\r\n    const div = document.createElement('div');\r\n    div.innerHTML = text;\r\n\r\n    const anchor = div.querySelector('a');\r\n\r\n    if (!anchor) {\r\n        return [];\r\n    }\r\n\r\n    const anchorSiblings = div.innerHTML.split(anchor.outerHTML);\r\n\r\n    return [ anchorSiblings[0], anchor.text, anchorSiblings[1] ];\r\n}\r\n","import { CustomerAccountRequestBody } from '@bigcommerce/checkout-sdk';\r\n\r\nimport { mapCustomFormFieldsFromFormValues } from '../formFields';\r\n\r\nimport { CreateAccountFormValues } from './getCreateCustomerValidationSchema';\r\n\r\nexport default function mapCreateAccountFromFormValues(\r\n    { acceptsMarketingEmails, customFields, ...values }: CreateAccountFormValues\r\n): CustomerAccountRequestBody {\r\n    return {\r\n        ...values,\r\n        acceptsMarketingEmails: acceptsMarketingEmails && acceptsMarketingEmails.length > 0,\r\n        customFields: mapCustomFormFieldsFromFormValues(customFields),\r\n    };\r\n}\r\n","// NOTE: This is a legacy regex used to create accounts, more flexible than the current used one\r\n// we need to keep this regex for login validation as accounts might have been created using this regex\r\nexport const EMAIL_REGEXP = /^[a-z0-9!#$%&'*+/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;\r\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\r\nimport { object, string, ObjectSchema } from 'yup';\r\n\r\nimport { EMAIL_REGEXP } from './validationPatterns';\r\n\r\nexport interface EmailValidationSchemaOptions {\r\n    language: LanguageService;\r\n}\r\n\r\nexport default function getEmailValidationSchema({\r\n    language,\r\n}: EmailValidationSchemaOptions): ObjectSchema<{ email: string }> {\r\n    return object({\r\n        email: string()\r\n            .max(256)\r\n            .matches(EMAIL_REGEXP, language.translate('customer.email_invalid_error'))\r\n            .required(language.translate('customer.email_required_error')),\r\n    });\r\n}\r\n","import { FormField, LanguageService } from '@bigcommerce/checkout-sdk';\r\nimport { memoize } from '@bigcommerce/memoize';\r\nimport { object, string, ObjectSchema } from 'yup';\r\n\r\nimport { getCustomFormFieldsValidationSchema, CustomFormFieldValues, TranslateValidationErrorFunction } from '../formFields';\r\n\r\nimport getEmailValidationSchema from './getEmailValidationSchema';\r\nimport { PasswordRequirements } from './getPasswordRequirements';\r\n\r\nexport type CreateAccountFormValues = {\r\n    firstName: string;\r\n    lastName: string;\r\n    email: string;\r\n    password: string;\r\n    acceptsMarketingEmails?: string[];\r\n    token?: string;\r\n} & CustomFormFieldValues;\r\n\r\nexport interface CreateCustomerValidationSchema {\r\n    formFields: FormField[];\r\n    language: LanguageService;\r\n    passwordRequirements: PasswordRequirements;\r\n}\r\n\r\nfunction getTranslateCreateCustomerError(language?: LanguageService): TranslateValidationErrorFunction {\r\n    return (type, { label, min, max }) => {\r\n        if (!language) {\r\n            return;\r\n        }\r\n\r\n        if (type === 'required') {\r\n            return language.translate('customer.required_error', { label });\r\n        }\r\n\r\n        if (type === 'max' && max) {\r\n            return language.translate('customer.max_error', { label, max });\r\n        }\r\n\r\n        if (type === 'min' && min) {\r\n            return language.translate('customer.min_error', { label, min });\r\n        }\r\n\r\n        if (type === 'invalid') {\r\n            return language.translate('customer.invalid_characters_error', { label });\r\n        }\r\n\r\n        return;\r\n    };\r\n}\r\n\r\nexport default memoize(function getCreateCustomerValidationSchema({\r\n    formFields,\r\n    language,\r\n    passwordRequirements: { description, numeric, alpha, minLength },\r\n}: CreateCustomerValidationSchema): ObjectSchema<CreateAccountFormValues> {\r\n    return object({\r\n            firstName: string().required(language.translate('address.first_name_required_error')),\r\n            lastName: string().required(language.translate('address.last_name_required_error')),\r\n            password: string()\r\n                .required(description || language.translate('customer.password_required_error'))\r\n                .matches(numeric, description || language.translate('customer.password_number_required_error'))\r\n                .matches(alpha, description || language.translate('customer.password_letter_required_error'))\r\n                .min(minLength, description || language.translate('customer.password_under_minimum_length_error'))\r\n                .max(100, language.translate('customer.password_over_maximum_length_error')),\r\n        })\r\n        .concat(getEmailValidationSchema({ language }))\r\n        .concat(getCustomFormFieldsValidationSchema({\r\n            formFields,\r\n            translate: getTranslateCreateCustomerError(language),\r\n        }));\r\n});\r\n","import { FormField } from '@bigcommerce/checkout-sdk';\r\nimport { withFormik, FormikProps } from 'formik';\r\nimport { noop } from 'lodash';\r\nimport React, { useMemo, FunctionComponent } from 'react';\r\n\r\nimport { preventDefault } from '../common/dom';\r\nimport { isRequestError } from '../common/error';\r\nimport { withLanguage, TranslatedString, WithLanguageProps } from '../locale';\r\nimport { Alert, AlertType } from '../ui/alert';\r\nimport { Button, ButtonVariant } from '../ui/button';\r\nimport { DynamicFormField, Fieldset, Form } from '../ui/form';\r\n\r\nimport getCreateCustomerValidationSchema, { CreateAccountFormValues } from './getCreateCustomerValidationSchema';\r\nimport getPasswordRequirements from './getPasswordRequirements';\r\nimport './CreateAccountForm.scss';\r\n\r\nexport interface CreateAccountFormProps {\r\n    formFields: FormField[];\r\n    createAccountError?: Error;\r\n    isCreatingAccount?: boolean;\r\n    requiresMarketingConsent: boolean;\r\n    onCancel?(): void;\r\n    onSubmit?(values: CreateAccountFormValues): void;\r\n}\r\n\r\nconst CreateAccountForm: FunctionComponent<CreateAccountFormProps & WithLanguageProps & FormikProps<CreateAccountFormValues>> = ({\r\n    formFields,\r\n    createAccountError,\r\n    isCreatingAccount,\r\n    onCancel,\r\n}) => {\r\n    const createAccountErrorMessage = useMemo(() => {\r\n        if (!createAccountError) {\r\n            return;\r\n        }\r\n\r\n        if (isRequestError(createAccountError) && createAccountError.status === 409) {\r\n            const splitMessage = createAccountError.message.split(':');\r\n\r\n            if (splitMessage.length > 1) {\r\n                return <TranslatedString\r\n                    data={ { email:  splitMessage[1].trim() } }\r\n                    id=\"customer.email_in_use_text\"\r\n                />;\r\n            }\r\n\r\n            return <TranslatedString id=\"customer.unknown_email_in_use_text\" />;\r\n        }\r\n\r\n        return createAccountError.message;\r\n    }, [createAccountError]);\r\n\r\n    return (<>\r\n        <Form\r\n            className=\"checkout-form\"\r\n            id=\"checkout-customer-returning\"\r\n            testId=\"checkout-customer-returning\"\r\n        >\r\n            <Fieldset>\r\n                { createAccountErrorMessage && <Alert\r\n                    type={ AlertType.Error }\r\n                >\r\n                    { createAccountErrorMessage }\r\n                </Alert> }\r\n                <div className=\"create-account-form\">\r\n                    { formFields.map(field => (\r\n                        <DynamicFormField\r\n                            autocomplete={ field.name }\r\n                            extraClass={ `dynamic-form-field--${field.name}` }\r\n                            field={ field }\r\n                            key={ field.id }\r\n                            parentFieldName={ field.custom ? 'customFields'  : undefined }\r\n                        />\r\n                    )) }\r\n                </div>\r\n            </Fieldset>\r\n\r\n           <div className=\"form-actions\">\r\n                <Button\r\n                    disabled={ isCreatingAccount }\r\n                    id=\"checkout-customer-create\"\r\n                    testId=\"customer-continue-create\"\r\n                    type=\"submit\"\r\n                    variant={ ButtonVariant.Primary }\r\n                >\r\n                    <TranslatedString id=\"customer.create_account_action\" />\r\n                </Button>\r\n\r\n                <a\r\n                    className=\"button optimizedCheckout-buttonSecondary\"\r\n                    data-test=\"customer-cancel-button\"\r\n                    href=\"#\"\r\n                    id=\"checkout-customer-cancel\"\r\n                    onClick={ preventDefault(onCancel) }\r\n                >\r\n                    <TranslatedString id=\"common.cancel_action\" />\r\n                </a>\r\n            </div>\r\n        </Form>\r\n    </>);\r\n};\r\n\r\nexport default withLanguage(withFormik<CreateAccountFormProps & WithLanguageProps, CreateAccountFormValues>({\r\n    handleSubmit: (values, { props: { onSubmit = noop } }) => {\r\n        onSubmit(values);\r\n    },\r\n    mapPropsToValues: ({requiresMarketingConsent}) => ({\r\n        firstName: '',\r\n        lastName: '',\r\n        email: '',\r\n        password: '',\r\n        customFields: {},\r\n        acceptsMarketingEmails: requiresMarketingConsent ? [] : ['0'],\r\n    }),\r\n    validationSchema: ({\r\n        language,\r\n        formFields,\r\n    }: CreateAccountFormProps & WithLanguageProps) => {\r\n        const passwordRequirements = formFields.find(({ requirements }) => requirements)?.requirements;\r\n\r\n        if (!passwordRequirements) {\r\n            throw new Error('Password requirements missing');\r\n        }\r\n\r\n        const schema = getCreateCustomerValidationSchema({\r\n            language,\r\n            formFields,\r\n            passwordRequirements: getPasswordRequirements(passwordRequirements),\r\n        });\r\n\r\n        return schema;\r\n    },\r\n})(CreateAccountForm));\r\n","import { FieldProps } from 'formik';\r\nimport React, { memo, useCallback, useMemo, FunctionComponent } from 'react';\r\n\r\nimport { TranslatedString } from '../locale';\r\nimport { FormField, TextInput } from '../ui/form';\r\n\r\nexport interface EmailFieldProps {\r\n    onChange?(value: string): void;\r\n}\r\n\r\nconst EmailField: FunctionComponent<EmailFieldProps>  = ({\r\n    onChange,\r\n}) => {\r\n    const renderInput = useCallback((props: FieldProps) => (\r\n        <TextInput\r\n            { ...props.field }\r\n            autoComplete={ props.field.name }\r\n            id={ props.field.name }\r\n            type=\"email\"\r\n        />\r\n    ), []);\r\n\r\n    const labelContent = useMemo(() => (\r\n        <TranslatedString id=\"customer.email_label\" />\r\n    ), []);\r\n\r\n    return <FormField\r\n        input={ renderInput }\r\n        labelContent={ labelContent }\r\n        name=\"email\"\r\n        onChange={ onChange }\r\n    />;\r\n};\r\n\r\nexport default memo(EmailField);\r\n","import { SignInEmail } from '@bigcommerce/checkout-sdk';\r\nimport { withFormik, FormikProps } from 'formik';\r\nimport { noop } from 'lodash';\r\nimport React, { memo, useMemo, FunctionComponent } from 'react';\r\n\r\nimport { withLanguage, TranslatedHtml, TranslatedLink, TranslatedString, WithLanguageProps } from '../locale';\r\nimport { Alert, AlertType } from '../ui/alert';\r\nimport { Button, ButtonVariant } from '../ui/button';\r\nimport { Form } from '../ui/form';\r\nimport { LoadingSpinner } from '../ui/loading';\r\nimport { Modal, ModalHeader } from '../ui/modal';\r\n\r\nimport getEmailValidationSchema from './getEmailValidationSchema';\r\nimport EmailField from './EmailField';\r\n\r\nexport interface EmailLoginFormProps {\r\n    email?: string;\r\n    isOpen: boolean;\r\n    isSendingEmail?: boolean;\r\n    emailHasBeenRequested?: boolean;\r\n    sentEmail?: SignInEmail;\r\n    sentEmailError?: any;\r\n    onRequestClose?(): void;\r\n    onSendLoginEmail?(values: EmailLoginFormValues): void;\r\n}\r\n\r\nexport interface EmailLoginFormValues {\r\n    email: string;\r\n}\r\n\r\nconst EmailLoginForm: FunctionComponent<EmailLoginFormProps & WithLanguageProps & FormikProps<EmailLoginFormValues>> = ({\r\n    email,\r\n    isOpen,\r\n    isSendingEmail = false,\r\n    emailHasBeenRequested,\r\n    onRequestClose = noop,\r\n    sentEmailError,\r\n    sentEmail,\r\n    submitForm,\r\n    values: {\r\n        email: formEmail,\r\n    },\r\n}) => {\r\n    const modalHeaderStringId = useMemo(() => {\r\n        if (emailHasBeenRequested) {\r\n            if (sentEmailError) {\r\n                return 'common.error_heading';\r\n            }\r\n\r\n            return 'login_email.sent_header';\r\n        }\r\n\r\n        if (email) {\r\n            return 'login_email.header_with_email';\r\n        }\r\n\r\n        return 'login_email.header';\r\n    }, [emailHasBeenRequested, sentEmailError, email]);\r\n\r\n    const okButton = useMemo(() => (\r\n        <div className=\"modal-footer\">\r\n            <Button onClick={ onRequestClose }>\r\n                <TranslatedString id=\"common.ok_action\" />\r\n            </Button>\r\n        </div>\r\n    ), [onRequestClose]);\r\n\r\n    const footer = useMemo(() => {\r\n        if (sentEmailError && sentEmailError.status === 429) {\r\n            return okButton;\r\n        }\r\n\r\n        if (emailHasBeenRequested && !sentEmailError) {\r\n            if (isSendingEmail) {\r\n                return <LoadingSpinner isLoading />;\r\n            }\r\n\r\n            if (sentEmail && sentEmail.sent_email === 'reset_password') {\r\n                return okButton;\r\n            }\r\n\r\n            return (\r\n                <p>\r\n                    <TranslatedLink\r\n                        id=\"login_email.resend_link\"\r\n                        onClick={ submitForm }\r\n                    />\r\n                    <TranslatedLink\r\n                        id=\"login_email.use_password_link\"\r\n                        onClick={ onRequestClose }\r\n                    />\r\n                </p>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className=\"modal-footer\">\r\n                <Button\r\n                    className=\"optimizedCheckout-buttonSecondary\"\r\n                    onClick={ onRequestClose }\r\n                    type=\"button\"\r\n                >\r\n                    <TranslatedString id=\"common.go_back\" />\r\n                </Button>\r\n                <Button\r\n                    isLoading={ isSendingEmail }\r\n                    type=\"submit\"\r\n                    variant={ ButtonVariant.Primary }\r\n                >\r\n                    <TranslatedString id=\"login_email.send\" />\r\n                </Button>\r\n            </div>\r\n        );\r\n    }, [\r\n        sentEmailError,\r\n        emailHasBeenRequested,\r\n        okButton,\r\n        submitForm,\r\n        isSendingEmail,\r\n        onRequestClose,\r\n        sentEmail,\r\n    ]);\r\n\r\n    const error = useMemo(() => {\r\n        if (!sentEmailError) {\r\n            return null;\r\n        }\r\n\r\n        const { status } = sentEmailError;\r\n\r\n        return (\r\n            <Alert type={ AlertType.Error }>\r\n                { status === 429 ?\r\n                    <TranslatedString id=\"login_email.error_temporary_disabled\" /> :\r\n                    <TranslatedString id={ status === 404 ?\r\n                        'login_email.error_not_found' :\r\n                        'login_email.error_server' }\r\n                    /> }\r\n            </Alert>\r\n        );\r\n    }, [sentEmailError]);\r\n\r\n    const form = useMemo(() => {\r\n        if (sentEmailError && sentEmailError.status === 429) {\r\n            return null;\r\n        }\r\n\r\n        if (emailHasBeenRequested && sentEmail && !sentEmailError) {\r\n            const { expiry, sent_email } = sentEmail;\r\n\r\n            return (\r\n                <p>\r\n                    <TranslatedHtml\r\n                        data={ {\r\n                            email: formEmail,\r\n                            minutes: Math.round(expiry / 60),\r\n                        } }\r\n                        id={ sent_email === 'sign_in' ?\r\n                            'login_email.sent_text' :\r\n                            'customer.reset_password_before_login_error' }\r\n                    />\r\n                </p>\r\n            );\r\n        }\r\n\r\n        if (emailHasBeenRequested && !sentEmail) {\r\n            return <EmailField />;\r\n        }\r\n\r\n        return (<>\r\n            <p>\r\n                <TranslatedString id=\"login_email.text\" />\r\n            </p>\r\n            <EmailField />\r\n        </>);\r\n    }, [sentEmailError, emailHasBeenRequested, sentEmail, formEmail]);\r\n\r\n    return (\r\n        <Modal\r\n            additionalBodyClassName=\"modal--withText\"\r\n            additionalModalClassName=\"modal--medium\"\r\n            header={\r\n                <ModalHeader>\r\n                    <TranslatedString id={ modalHeaderStringId } />\r\n                </ModalHeader>\r\n            }\r\n            isOpen={ isOpen }\r\n            onRequestClose={ onRequestClose }\r\n            shouldShowCloseButton={ true }\r\n        >\r\n            <Form>\r\n                <LoadingSpinner isLoading={ isSendingEmail && !email } />\r\n                { error }\r\n                { form }\r\n                { footer }\r\n            </Form>\r\n        </Modal>);\r\n};\r\n\r\nexport default withLanguage(withFormik<EmailLoginFormProps & WithLanguageProps, EmailLoginFormValues>({\r\n    mapPropsToValues: ({\r\n        email = '',\r\n    }) => ({\r\n        email,\r\n    }),\r\n    handleSubmit: (values, { props: { onSendLoginEmail = noop } }) => {\r\n        onSendLoginEmail(values);\r\n    },\r\n    validationSchema: ({ language }: WithLanguageProps) => getEmailValidationSchema({ language }),\r\n})(memo(EmailLoginForm)));\r\n","import React, { memo, FunctionComponent } from 'react';\r\n\r\nimport { TranslatedHtml } from '../locale';\r\nimport { CheckboxFormField, Fieldset } from '../ui/form';\r\n\r\nconst PrivacyPolicyCheckboxFieldLink: FunctionComponent<{ url: string }> = ({\r\n    url,\r\n}) => (\r\n    <CheckboxFormField\r\n        labelContent={ <TranslatedHtml data={ { url } } id=\"privacy_policy.label\" /> }\r\n        name=\"privacyPolicy\"\r\n    />\r\n);\r\n\r\nconst PrivacyPolicyFieldset: FunctionComponent<{ url: string }> = ({\r\n    url,\r\n}) => (\r\n    <Fieldset additionalClassName=\"checkout-privacy-policy\">\r\n        <PrivacyPolicyCheckboxFieldLink url={ url } />\r\n    </Fieldset>\r\n);\r\n\r\nexport default memo(PrivacyPolicyFieldset);\r\n","import { FieldProps } from 'formik';\r\nimport React, { memo, Fragment, FunctionComponent } from 'react';\r\n\r\nimport { TranslatedString } from '../locale';\r\nimport { Input, Label } from '../ui/form';\r\n\r\nexport type SubscribeFieldProps = FieldProps<boolean> & {\r\n    requiresMarketingConsent: boolean;\r\n};\r\n\r\nconst SubscribeField: FunctionComponent<SubscribeFieldProps> = ({ field, requiresMarketingConsent }) => (\r\n    <Fragment>\r\n        <Input\r\n            { ...field }\r\n            checked={ field.value }\r\n            className=\"form-checkbox\"\r\n            id={ field.name }\r\n            type=\"checkbox\"\r\n        />\r\n\r\n        <Label htmlFor={ field.name }>\r\n            <TranslatedString id={ requiresMarketingConsent ?\r\n                'customer.guest_marketing_consent' :\r\n                'customer.guest_subscribe_to_newsletter_text' }\r\n            />\r\n        </Label>\r\n    </Fragment>\r\n);\r\n\r\nexport default memo(SubscribeField);\r\n","import { withFormik, FieldProps, FormikProps } from 'formik';\r\nimport React, { memo, useCallback, FunctionComponent, ReactNode } from 'react';\r\nimport { object, string } from 'yup';\r\n\r\nimport { withLanguage, TranslatedHtml, TranslatedString, WithLanguageProps } from '../locale';\r\nimport { getPrivacyPolicyValidationSchema, PrivacyPolicyField } from '../privacyPolicy';\r\nimport { Button, ButtonVariant } from '../ui/button';\r\nimport { BasicFormField, Fieldset, Form, Legend  } from '../ui/form';\r\n\r\nimport EmailField from './EmailField';\r\nimport SubscribeField from './SubscribeField';\r\n\r\nexport interface GuestFormProps {\r\n    canSubscribe: boolean;\r\n    checkoutButtons?: ReactNode;\r\n    continueAsGuestButtonLabelId: string;\r\n    requiresMarketingConsent: boolean;\r\n    defaultShouldSubscribe: boolean;\r\n    email?: string;\r\n    isLoading: boolean;\r\n    privacyPolicyUrl?: string;\r\n    onChangeEmail(email: string): void;\r\n    onContinueAsGuest(data: GuestFormValues): void;\r\n    onShowLogin(): void;\r\n}\r\n\r\nexport interface GuestFormValues {\r\n    email: string;\r\n    shouldSubscribe: boolean;\r\n}\r\n\r\nconst GuestForm: FunctionComponent<GuestFormProps & WithLanguageProps & FormikProps<GuestFormValues>> = ({\r\n    canSubscribe,\r\n    checkoutButtons,\r\n    continueAsGuestButtonLabelId,\r\n    isLoading,\r\n    onChangeEmail,\r\n    onShowLogin,\r\n    privacyPolicyUrl,\r\n    requiresMarketingConsent,\r\n}) => {\r\n    const renderField = useCallback((fieldProps: FieldProps<boolean>) => (\r\n        <SubscribeField\r\n            { ...fieldProps }\r\n            requiresMarketingConsent={ requiresMarketingConsent }\r\n        />\r\n    ), [\r\n        requiresMarketingConsent,\r\n    ]);\r\n\r\n    return (\r\n        <Form\r\n            className=\"checkout-form\"\r\n            id=\"checkout-customer-guest\"\r\n            testId=\"checkout-customer-guest\"\r\n        >\r\n            <Fieldset\r\n                legend={\r\n                    <Legend hidden>\r\n                        <TranslatedString id=\"customer.guest_customer_text\" />\r\n                    </Legend>\r\n                }\r\n            >\r\n                <p>\r\n                    <TranslatedHtml id=\"customer.checkout_as_guest_text\" />\r\n                </p>\r\n\r\n                <div className=\"customerEmail-container\">\r\n                    <div className=\"customerEmail-body\">\r\n                        <EmailField onChange={ onChangeEmail } />\r\n\r\n                        { (canSubscribe || requiresMarketingConsent) && <BasicFormField\r\n                            name=\"shouldSubscribe\"\r\n                            render={ renderField }\r\n                        /> }\r\n\r\n                        { privacyPolicyUrl && <PrivacyPolicyField\r\n                            url={ privacyPolicyUrl }\r\n                        /> }\r\n                    </div>\r\n\r\n                    <div className=\"form-actions customerEmail-action\">\r\n                        <Button\r\n                            className=\"customerEmail-button\"\r\n                            id=\"checkout-customer-continue\"\r\n                            isLoading={ isLoading }\r\n                            testId=\"customer-continue-as-guest-button\"\r\n                            type=\"submit\"\r\n                            variant={ ButtonVariant.Primary }\r\n                        >\r\n                            <TranslatedString id={ continueAsGuestButtonLabelId } />\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n\r\n                {\r\n                    !isLoading && <p>\r\n                        <TranslatedString id=\"customer.login_text\" />\r\n                        { ' ' }\r\n                        <a\r\n                            data-test=\"customer-continue-button\"\r\n                            id=\"checkout-customer-login\"\r\n                            onClick={ onShowLogin }\r\n                        >\r\n                            <TranslatedString id=\"customer.login_action\" />\r\n                        </a>\r\n                    </p>\r\n                }\r\n\r\n                { checkoutButtons }\r\n            </Fieldset>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default withLanguage(withFormik<GuestFormProps & WithLanguageProps, GuestFormValues>({\r\n    mapPropsToValues: ({\r\n        email = '',\r\n        defaultShouldSubscribe = false,\r\n        requiresMarketingConsent,\r\n    }) => ({\r\n        email,\r\n        shouldSubscribe: requiresMarketingConsent ? false : defaultShouldSubscribe,\r\n        privacyPolicy: false,\r\n    }),\r\n    handleSubmit: (values, { props: { onContinueAsGuest } }) => {\r\n        onContinueAsGuest(values);\r\n    },\r\n    validationSchema: ({ language, privacyPolicyUrl }: GuestFormProps & WithLanguageProps) => {\r\n        const email = string()\r\n            .email(language.translate('customer.email_invalid_error'))\r\n            .max(256)\r\n            .required(language.translate('customer.email_required_error'));\r\n\r\n        const baseSchema = object({ email });\r\n\r\n        if (privacyPolicyUrl) {\r\n            return baseSchema.concat(getPrivacyPolicyValidationSchema({\r\n                isRequired: !!privacyPolicyUrl,\r\n                language,\r\n            }));\r\n        }\r\n\r\n        return baseSchema;\r\n    },\r\n})(memo(GuestForm)));\r\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\r\nimport { boolean, object, BooleanSchema, ObjectSchema } from 'yup';\r\n\r\nexport interface PrivacyPolicyValidatonSchemaProps {\r\n    isRequired: boolean;\r\n    language: LanguageService;\r\n}\r\n\r\nexport default function getPrivacyPolicyValidationSchema({\r\n    isRequired,\r\n    language,\r\n}: PrivacyPolicyValidatonSchemaProps): ObjectSchema<{ privacyPolicy?: boolean }> {\r\n    const schemaFields: {\r\n        privacyPolicy?: BooleanSchema;\r\n    } = {};\r\n\r\n    if (isRequired) {\r\n        schemaFields.privacyPolicy = boolean()\r\n            .oneOf([true], language.translate('privacy_policy.required_error'));\r\n    }\r\n\r\n    return object(schemaFields);\r\n}\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nimport withIconContainer from './withIconContainer';\r\n\r\nconst IconEye: FunctionComponent = () => (\r\n    <svg\r\n        viewBox=\"0 0 576 512\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n    >\r\n        <path d=\"M288 144a110.94 110.94 0 0 0-31.24 5 55.4 55.4 0 0 1 7.24 27 56 56 0 0 1-56 56 55.4 55.4 0 0 1-27-7.24A111.71 111.71 0 1 0 288 144zm284.52 97.4C518.29 135.59 410.93 64 288 64S57.68 135.64 3.48 241.41a32.35 32.35 0 0 0 0 29.19C57.71 376.41 165.07 448 288 448s230.32-71.64 284.52-177.41a32.35 32.35 0 0 0 0-29.19zM288 400c-98.65 0-189.09-55-237.93-144C98.91 167 189.34 112 288 112s189.09 55 237.93 144C477.1 345 386.66 400 288 400z\" />\r\n    </svg>\r\n);\r\n\r\nexport default withIconContainer(IconEye);\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nimport withIconContainer from './withIconContainer';\r\n\r\nconst IconEyeSlash: FunctionComponent = () => (\r\n    <svg\r\n        viewBox=\"0 0 640 512\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n    >\r\n        <path d=\"M634 471L36 3.51A16 16 0 0 0 13.51 6l-10 12.49A16 16 0 0 0 6 41l598 467.49a16 16 0 0 0 22.49-2.49l10-12.49A16 16 0 0 0 634 471zM296.79 146.47l134.79 105.38C429.36 191.91 380.48 144 320 144a112.26 112.26 0 0 0-23.21 2.47zm46.42 219.07L208.42 260.16C210.65 320.09 259.53 368 320 368a113 113 0 0 0 23.21-2.46zM320 112c98.65 0 189.09 55 237.93 144a285.53 285.53 0 0 1-44 60.2l37.74 29.5a333.7 333.7 0 0 0 52.9-75.11 32.35 32.35 0 0 0 0-29.19C550.29 135.59 442.93 64 320 64c-36.7 0-71.71 7-104.63 18.81l46.41 36.29c18.94-4.3 38.34-7.1 58.22-7.1zm0 288c-98.65 0-189.08-55-237.93-144a285.47 285.47 0 0 1 44.05-60.19l-37.74-29.5a333.6 333.6 0 0 0-52.89 75.1 32.35 32.35 0 0 0 0 29.19C89.72 376.41 197.08 448 320 448c36.7 0 71.71-7.05 104.63-18.81l-46.41-36.28C359.28 397.2 339.89 400 320 400z\" />\r\n    </svg>\r\n);\r\n\r\nexport default withIconContainer(IconEyeSlash);\r\n","import { FieldProps } from 'formik';\r\nimport React, { memo, useCallback, useMemo, FunctionComponent } from 'react';\r\n\r\nimport { TranslatedString } from '../locale';\r\nimport { FormField, TextInput } from '../ui/form';\r\nimport { IconEye, IconEyeSlash } from '../ui/icon';\r\nimport { Toggle } from '../ui/toggle';\r\n\r\nexport interface PasswordFieldProps {\r\n    forgotPasswordUrl?: string;\r\n}\r\n\r\nconst PasswordField: FunctionComponent<PasswordFieldProps> = ({\r\n    forgotPasswordUrl,\r\n}) => {\r\n    const renderInput = useCallback((props: FieldProps) => (\r\n        <Toggle openByDefault={ false }>\r\n            { ({ isOpen, toggle }) => (\r\n                <div className=\"form-field-password\">\r\n                    <TextInput\r\n                        { ...props.field }\r\n                        additionalClassName=\"form-input--withIcon\"\r\n                        id={ props.field.name }\r\n                        type={ isOpen ? 'text' : 'password' }\r\n                    />\r\n                    <a className=\"form-toggle-password form-input-icon\" href=\"#\" onClick={ toggle }>\r\n                        { isOpen ? <IconEye /> : <IconEyeSlash /> }\r\n                    </a>\r\n                </div>\r\n            ) }\r\n        </Toggle>\r\n    ), []);\r\n\r\n    const labelContent = useMemo(() => (\r\n        <TranslatedString id={ 'customer.password_label' } />\r\n    ), []);\r\n\r\n    const footer = useMemo(() => {\r\n        if (!forgotPasswordUrl) {\r\n            return null;\r\n        }\r\n\r\n        return <a\r\n            data-test=\"forgot-password-link\"\r\n            href={ forgotPasswordUrl }\r\n            rel=\"noopener noreferrer\"\r\n            target=\"_blank\"\r\n        >\r\n            <TranslatedString id=\"customer.forgot_password_action\" />\r\n        </a>;\r\n    }, [forgotPasswordUrl]);\r\n\r\n    return <FormField\r\n        footer={ footer }\r\n        input={ renderInput }\r\n        labelContent={ labelContent }\r\n        name=\"password\"\r\n    />;\r\n};\r\n\r\nexport default memo(PasswordField);\r\n","import { withFormik, FormikProps } from 'formik';\r\nimport { noop } from 'lodash';\r\nimport React, { memo, useCallback, FunctionComponent } from 'react';\r\nimport { object, string } from 'yup';\r\n\r\nimport { preventDefault } from '../common/dom';\r\nimport { withLanguage, TranslatedHtml, TranslatedLink, TranslatedString, WithLanguageProps } from '../locale';\r\nimport { Alert, AlertType } from '../ui/alert';\r\nimport { Button, ButtonVariant } from '../ui/button';\r\nimport { Fieldset, Form, Legend } from '../ui/form';\r\n\r\nimport getEmailValidationSchema from './getEmailValidationSchema';\r\nimport mapErrorMessage from './mapErrorMessage';\r\nimport CustomerViewType from './CustomerViewType';\r\nimport EmailField from './EmailField';\r\nimport PasswordField from './PasswordField';\r\n\r\nexport interface LoginFormProps {\r\n    canCancel?: boolean;\r\n    continueAsGuestButtonLabelId: string;\r\n    email?: string;\r\n    forgotPasswordUrl: string;\r\n    isSignInEmailEnabled?: boolean;\r\n    isSendingSignInEmail?: boolean;\r\n    isSigningIn?: boolean;\r\n    signInError?: Error;\r\n    signInEmailError?: Error;\r\n    viewType?: Omit<CustomerViewType, 'guest'>;\r\n    passwordlessLogin?: boolean;\r\n    shouldShowCreateAccountLink?: boolean;\r\n    onCancel?(): void;\r\n    onCreateAccount?(): void;\r\n    onChangeEmail?(email: string): void;\r\n    onSignIn(data: LoginFormValues): void;\r\n    onSendLoginEmail?(): void;\r\n    onContinueAsGuest?(): void;\r\n}\r\n\r\nexport interface LoginFormValues {\r\n    email: string;\r\n    password: string;\r\n}\r\n\r\nconst LoginForm: FunctionComponent<LoginFormProps & WithLanguageProps & FormikProps<LoginFormValues>> = ({\r\n    canCancel,\r\n    continueAsGuestButtonLabelId,\r\n    forgotPasswordUrl,\r\n    email,\r\n    isSignInEmailEnabled,\r\n    isSigningIn,\r\n    language,\r\n    onCancel = noop,\r\n    onChangeEmail,\r\n    onContinueAsGuest,\r\n    onCreateAccount = noop,\r\n    onSendLoginEmail = noop,\r\n    signInError,\r\n    shouldShowCreateAccountLink,\r\n    viewType = CustomerViewType.Login,\r\n}) => {\r\n    const changeEmailLink = useCallback(() => {\r\n        if (!email) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <p className=\"optimizedCheckout-contentSecondary\">\r\n                <TranslatedLink\r\n                    data={ { email } }\r\n                    id=\"customer.guest_could_login_change_email\"\r\n                    onClick={ onCancel }\r\n                    testId=\"change-email\"\r\n                />\r\n            </p>\r\n        );\r\n    }, [email, onCancel]);\r\n\r\n    return (\r\n        <Form\r\n            className=\"checkout-form\"\r\n            id=\"checkout-customer-returning\"\r\n            testId=\"checkout-customer-returning\"\r\n        >\r\n            <Fieldset legend={\r\n                <Legend hidden>\r\n                    <TranslatedString id=\"customer.returning_customer_text\" />\r\n                </Legend>\r\n            }\r\n            >\r\n                { signInError && <Alert\r\n                    testId=\"customer-login-error-message\"\r\n                    type={ AlertType.Error }\r\n                >\r\n                    { mapErrorMessage(signInError, key => language.translate(key)) }\r\n                </Alert> }\r\n\r\n                { viewType === CustomerViewType.SuggestedLogin &&\r\n                    <Alert type={ AlertType.Info }>\r\n                        <TranslatedHtml\r\n                            data={ { email } }\r\n                            id=\"customer.guest_could_login\"\r\n                        />\r\n                    </Alert> }\r\n\r\n                { viewType === CustomerViewType.Login && shouldShowCreateAccountLink && <p>\r\n                    <TranslatedLink\r\n                        id=\"customer.create_account_to_continue_text\"\r\n                        onClick={ onCreateAccount }\r\n                    />\r\n                </p> }\r\n\r\n                { viewType === CustomerViewType.CancellableEnforcedLogin &&\r\n                    <Alert type={ AlertType.Info }>\r\n                        <TranslatedHtml\r\n                            data={ { email } }\r\n                            id=\"customer.guest_must_login\"\r\n                        />\r\n                    </Alert> }\r\n\r\n                { viewType === CustomerViewType.EnforcedLogin &&\r\n                    <Alert type={ AlertType.Error }>\r\n                        <TranslatedLink\r\n                            id=\"customer.guest_temporary_disabled\"\r\n                            onClick={ onCreateAccount }\r\n                        />\r\n                    </Alert> }\r\n\r\n                { (viewType === CustomerViewType.Login || viewType === CustomerViewType.EnforcedLogin) &&\r\n                    <EmailField onChange={ onChangeEmail } /> }\r\n\r\n                <PasswordField forgotPasswordUrl={ isSignInEmailEnabled ? undefined : forgotPasswordUrl } />\r\n\r\n                { isSignInEmailEnabled && <p>\r\n                    <TranslatedLink\r\n                        id=\"login_email.link\"\r\n                        onClick={ onSendLoginEmail }\r\n                        testId=\"customer-signin-link\"\r\n                    />\r\n                </p> }\r\n\r\n                <div className=\"form-actions\">\r\n                    <Button\r\n                        disabled={ isSigningIn }\r\n                        id=\"checkout-customer-continue\"\r\n                        testId=\"customer-continue-button\"\r\n                        type=\"submit\"\r\n                        variant={ ButtonVariant.Primary }\r\n                    >\r\n                        <TranslatedString id=\"customer.sign_in_action\" />\r\n                    </Button>\r\n\r\n                    { viewType === CustomerViewType.SuggestedLogin && <a\r\n                        className=\"button optimizedCheckout-buttonSecondary\"\r\n                        data-test=\"customer-guest-continue\"\r\n                        href=\"#\"\r\n                        id=\"checkout-guest-continue\"\r\n                        onClick={ preventDefault(onContinueAsGuest) }\r\n                    >\r\n                        <TranslatedString id={ continueAsGuestButtonLabelId } />\r\n                    </a> }\r\n\r\n                    { canCancel &&\r\n                        viewType !== CustomerViewType.EnforcedLogin &&\r\n                        viewType !== CustomerViewType.SuggestedLogin &&\r\n                        <a\r\n                            className=\"button optimizedCheckout-buttonSecondary\"\r\n                            data-test=\"customer-cancel-button\"\r\n                            href=\"#\"\r\n                            id=\"checkout-customer-cancel\"\r\n                            onClick={ preventDefault(onCancel) }\r\n                        >\r\n                            <TranslatedString id={ viewType === CustomerViewType.CancellableEnforcedLogin ?\r\n                                'login_email.use_another_email' :\r\n                                'common.cancel_action' }\r\n                            />\r\n                        </a> }\r\n                </div>\r\n\r\n                { viewType === CustomerViewType.SuggestedLogin && changeEmailLink() }\r\n            </Fieldset>\r\n        </Form>);\r\n};\r\n\r\nexport default withLanguage(withFormik<LoginFormProps & WithLanguageProps, LoginFormValues>({\r\n    mapPropsToValues: ({\r\n        email = '',\r\n    }) => ({\r\n        email,\r\n        password: '',\r\n    }),\r\n    handleSubmit: (values, { props: { onSignIn } }) => {\r\n        onSignIn(values);\r\n    },\r\n    validationSchema: ({ language }: LoginFormProps & WithLanguageProps) =>\r\n        getEmailValidationSchema({ language }).concat(object({\r\n            password: string()\r\n                .required(language.translate('customer.password_required_error')),\r\n        })),\r\n})(memo(LoginForm)));\r\n","export default function mapErrorMessage(\r\n    error: any, // TODO: Export `RequestError`\r\n    translate: (key: string) => string\r\n): string {\r\n    const type = error.body && error.body.type;\r\n\r\n    switch (type) {\r\n    case 'throttled_login':\r\n        return translate('customer.sign_in_throttled_error');\r\n\r\n    case 'reset_password_before_login':\r\n        return translate('customer.reset_password_before_login_error');\r\n\r\n    default:\r\n        return translate('customer.sign_in_error');\r\n    }\r\n}\r\n","import { CheckoutSelectors, CustomerAccountRequestBody, CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, ExecutePaymentMethodCheckoutOptions, FormField, GuestCredentials, SignInEmail, StoreConfig } from '@bigcommerce/checkout-sdk';\r\nimport { noop } from 'lodash';\r\nimport React, { Component, ReactNode } from 'react';\r\n\r\nimport { withCheckout, CheckoutContextProps } from '../checkout';\r\nimport { LoadingOverlay } from '../ui/loading';\r\n\r\nimport { CreateAccountFormValues } from './getCreateCustomerValidationSchema';\r\nimport mapCreateAccountFromFormValues from './mapCreateAccountFromFormValues';\r\nimport CheckoutButtonList from './CheckoutButtonList';\r\nimport CreateAccountForm from './CreateAccountForm';\r\nimport CustomerViewType from './CustomerViewType';\r\nimport EmailLoginForm, { EmailLoginFormValues } from './EmailLoginForm';\r\nimport GuestForm, { GuestFormValues } from './GuestForm';\r\nimport LoginForm from './LoginForm';\r\n\r\nexport interface CustomerProps {\r\n    viewType: CustomerViewType;\r\n    isEmbedded?: boolean;\r\n    checkEmbeddedSupport?(methodIds: string[]): void;\r\n    onChangeViewType?(viewType: CustomerViewType): void;\r\n    onAccountCreated?(): void;\r\n    onContinueAsGuest?(): void;\r\n    onContinueAsGuestError?(error: Error): void;\r\n    onReady?(): void;\r\n    onSignIn?(): void;\r\n    onSignInError?(error: Error): void;\r\n    onUnhandledError?(error: Error): void;\r\n}\r\n\r\nexport interface WithCheckoutCustomerProps {\r\n    canSubscribe: boolean;\r\n    customerAccountFields: FormField[];\r\n    checkoutButtonIds: string[];\r\n    defaultShouldSubscribe: boolean;\r\n    email?: string;\r\n    firstName?: string;\r\n    forgotPasswordUrl: string;\r\n    isContinuingAsGuest: boolean;\r\n    isCreatingAccount: boolean;\r\n    isExecutingPaymentMethodCheckout: boolean;\r\n    isGuestEnabled: boolean;\r\n    isInitializing: boolean;\r\n    isSendingSignInEmail: boolean;\r\n    isSignInEmailEnabled: boolean;\r\n    isSigningIn: boolean;\r\n    privacyPolicyUrl?: string;\r\n    providerWithCustomCheckout?: string;\r\n    requiresMarketingConsent: boolean;\r\n    signInEmail?: SignInEmail;\r\n    signInEmailError?: Error;\r\n    isAccountCreationEnabled: boolean;\r\n    createAccountError?: Error;\r\n    signInError?: Error;\r\n    clearError(error: Error): Promise<CheckoutSelectors>;\r\n    continueAsGuest(credentials: GuestCredentials): Promise<CheckoutSelectors>;\r\n    deinitializeCustomer(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\r\n    executePaymentMethodCheckout(options: ExecutePaymentMethodCheckoutOptions): Promise<CheckoutSelectors>;\r\n    initializeCustomer(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\r\n    sendLoginEmail(params: { email: string }): Promise<CheckoutSelectors>;\r\n    signIn(credentials: CustomerCredentials): Promise<CheckoutSelectors>;\r\n    createAccount(values: CustomerAccountRequestBody): Promise<CheckoutSelectors>;\r\n}\r\n\r\nexport interface CustomerState {\r\n    isEmailLoginFormOpen: boolean;\r\n    isReady: boolean;\r\n    hasRequestedLoginEmail: boolean;\r\n}\r\n\r\nclass Customer extends Component<CustomerProps & WithCheckoutCustomerProps, CustomerState> {\r\n    state: CustomerState = {\r\n        isEmailLoginFormOpen: false,\r\n        isReady: false,\r\n        hasRequestedLoginEmail: false,\r\n    };\r\n\r\n    private draftEmail?: string;\r\n\r\n    async componentDidMount(): Promise<void> {\r\n        const {\r\n            initializeCustomer,\r\n            email,\r\n            onReady = noop,\r\n            onUnhandledError = noop,\r\n            providerWithCustomCheckout,\r\n        } = this.props;\r\n\r\n        this.draftEmail = email;\r\n\r\n        try {\r\n            await initializeCustomer({ methodId: providerWithCustomCheckout });\r\n        } catch (error) {\r\n            onUnhandledError(error);\r\n        }\r\n\r\n        this.setState({ isReady: true });\r\n\r\n        onReady();\r\n    }\r\n\r\n    async componentWillUnmount(): Promise<void> {\r\n        const {\r\n            deinitializeCustomer = noop,\r\n            providerWithCustomCheckout,\r\n            onUnhandledError = noop,\r\n        } = this.props;\r\n\r\n        try {\r\n            await deinitializeCustomer({ methodId: providerWithCustomCheckout });\r\n        } catch (error) {\r\n            onUnhandledError(error);\r\n        }\r\n    }\r\n\r\n    render(): ReactNode {\r\n        const { viewType } = this.props;\r\n        const { isEmailLoginFormOpen, isReady } = this.state;\r\n        const shouldRenderGuestForm = viewType === CustomerViewType.Guest;\r\n        const shouldRenderCreateAccountForm = viewType === CustomerViewType.CreateAccount;\r\n        const shouldRenderLoginForm = !shouldRenderGuestForm && !shouldRenderCreateAccountForm;\r\n\r\n        return (\r\n            <LoadingOverlay\r\n                isLoading={ !isReady }\r\n                unmountContentWhenLoading\r\n            >\r\n                { isEmailLoginFormOpen && this.renderEmailLoginLinkForm() }\r\n                { shouldRenderLoginForm && this.renderLoginForm() }\r\n                { shouldRenderGuestForm && this.renderGuestForm() }\r\n                { shouldRenderCreateAccountForm && this.renderCreateAccountForm() }\r\n            </LoadingOverlay>\r\n        );\r\n    }\r\n\r\n    private renderGuestForm(): ReactNode {\r\n        const {\r\n            canSubscribe,\r\n            checkEmbeddedSupport,\r\n            checkoutButtonIds,\r\n            defaultShouldSubscribe,\r\n            deinitializeCustomer,\r\n            email,\r\n            initializeCustomer,\r\n            isContinuingAsGuest = false,\r\n            isExecutingPaymentMethodCheckout = false,\r\n            isInitializing = false,\r\n            privacyPolicyUrl,\r\n            providerWithCustomCheckout,\r\n            requiresMarketingConsent,\r\n            onUnhandledError = noop,\r\n        } = this.props;\r\n\r\n        return (\r\n            <GuestForm\r\n                canSubscribe={ canSubscribe }\r\n                checkoutButtons={\r\n                    <CheckoutButtonList\r\n                        checkEmbeddedSupport={ checkEmbeddedSupport }\r\n                        deinitialize={ deinitializeCustomer }\r\n                        initialize={ initializeCustomer }\r\n                        isInitializing={ isInitializing }\r\n                        methodIds={ checkoutButtonIds }\r\n                        onError={ onUnhandledError }\r\n                    />\r\n                }\r\n                continueAsGuestButtonLabelId={ providerWithCustomCheckout ? 'customer.continue' : 'customer.continue_as_guest_action' }\r\n                defaultShouldSubscribe={ defaultShouldSubscribe }\r\n                email={ this.draftEmail || email }\r\n                isLoading={ isContinuingAsGuest || isInitializing || isExecutingPaymentMethodCheckout }\r\n                onChangeEmail={ this.handleChangeEmail }\r\n                onContinueAsGuest={ this.handleContinueAsGuest }\r\n                onShowLogin={ this.handleShowLogin }\r\n                privacyPolicyUrl={ privacyPolicyUrl }\r\n                requiresMarketingConsent={ requiresMarketingConsent }\r\n            />\r\n        );\r\n    }\r\n\r\n    private renderEmailLoginLinkForm(): ReactNode {\r\n        const {\r\n            isEmailLoginFormOpen,\r\n            hasRequestedLoginEmail,\r\n        } = this.state;\r\n\r\n        const {\r\n            isSendingSignInEmail,\r\n            signInEmailError,\r\n            signInEmail,\r\n        } = this.props;\r\n\r\n        return (\r\n            <EmailLoginForm\r\n                email={ this.draftEmail }\r\n                emailHasBeenRequested={ hasRequestedLoginEmail }\r\n                isOpen={ isEmailLoginFormOpen }\r\n                isSendingEmail={ isSendingSignInEmail }\r\n                onRequestClose={ this.closeEmailLoginFormForm }\r\n                onSendLoginEmail={ this.handleSendLoginEmail }\r\n                sentEmail={ signInEmail }\r\n                sentEmailError={ signInEmailError }\r\n            />\r\n        );\r\n    }\r\n\r\n    private closeEmailLoginFormForm: () => void = () => {\r\n        this.setState({\r\n            isEmailLoginFormOpen: false,\r\n            hasRequestedLoginEmail: false,\r\n        });\r\n    };\r\n\r\n    private renderCreateAccountForm(): ReactNode {\r\n        const {\r\n            customerAccountFields,\r\n            isCreatingAccount,\r\n            createAccountError,\r\n            requiresMarketingConsent,\r\n        } = this.props;\r\n\r\n        return (\r\n            <CreateAccountForm\r\n                createAccountError={ createAccountError }\r\n                formFields={ customerAccountFields }\r\n                isCreatingAccount={ isCreatingAccount }\r\n                onCancel={ this.handleCancelCreateAccount }\r\n                onSubmit={ this.handleCreateAccount }\r\n                requiresMarketingConsent={ requiresMarketingConsent }\r\n            />\r\n        );\r\n    }\r\n\r\n    private renderLoginForm(): ReactNode {\r\n        const {\r\n            isEmbedded,\r\n            email,\r\n            forgotPasswordUrl,\r\n            isSignInEmailEnabled,\r\n            isGuestEnabled,\r\n            isSendingSignInEmail,\r\n            isSigningIn,\r\n            isAccountCreationEnabled,\r\n            providerWithCustomCheckout,\r\n            signInError,\r\n            viewType,\r\n        } = this.props;\r\n\r\n        return (\r\n            <LoginForm\r\n                canCancel={ isGuestEnabled }\r\n                continueAsGuestButtonLabelId={ providerWithCustomCheckout ? 'customer.continue' : 'customer.continue_as_guest_action' }\r\n                email={ this.draftEmail || email }\r\n                forgotPasswordUrl={ forgotPasswordUrl }\r\n                isSendingSignInEmail={ isSendingSignInEmail }\r\n                isSignInEmailEnabled={ isSignInEmailEnabled && !isEmbedded }\r\n                isSigningIn={ isSigningIn }\r\n                onCancel={ this.handleCancelSignIn }\r\n                onChangeEmail={ this.handleChangeEmail }\r\n                onContinueAsGuest={ this.executePaymentMethodCheckoutOrContinue }\r\n                onCreateAccount={ this.showCreateAccount }\r\n                onSendLoginEmail={ this.handleEmailLoginClicked }\r\n                onSignIn={ this.handleSignIn }\r\n                shouldShowCreateAccountLink={ isAccountCreationEnabled }\r\n                signInError={ signInError }\r\n                viewType={ viewType }\r\n            />\r\n        );\r\n    }\r\n\r\n    private handleEmailLoginClicked: () => void = async () => {\r\n        const { viewType } = this.props;\r\n\r\n        try {\r\n            if (viewType !== CustomerViewType.Login && this.draftEmail) {\r\n                await this.handleSendLoginEmail({ email: this.draftEmail });\r\n            }\r\n        } finally {\r\n            this.setState({\r\n                isEmailLoginFormOpen: true,\r\n            });\r\n        }\r\n    };\r\n\r\n    private handleSendLoginEmail: (values: EmailLoginFormValues) => Promise<void> = async values => {\r\n        const {\r\n            sendLoginEmail,\r\n        } = this.props;\r\n\r\n        try {\r\n            await sendLoginEmail(values);\r\n        } finally {\r\n            this.setState({\r\n                hasRequestedLoginEmail: true,\r\n            });\r\n        }\r\n    };\r\n\r\n    private handleContinueAsGuest: (formValues: GuestFormValues) => Promise<void> = async formValues => {\r\n        const {\r\n            canSubscribe,\r\n            continueAsGuest,\r\n            onChangeViewType = noop,\r\n            onContinueAsGuest = noop,\r\n            onContinueAsGuestError = noop,\r\n        } = this.props;\r\n\r\n        const email = formValues.email.trim();\r\n        try {\r\n            const { data } = await continueAsGuest({\r\n                email,\r\n                acceptsMarketingNewsletter: canSubscribe && formValues.shouldSubscribe ? true : undefined,\r\n                acceptsAbandonedCartEmails: formValues.shouldSubscribe ? true : undefined,\r\n            });\r\n\r\n            const customer = data.getCustomer();\r\n\r\n            if (customer && customer.shouldEncourageSignIn && customer.isGuest) {\r\n               return onChangeViewType(CustomerViewType.SuggestedLogin);\r\n            }\r\n\r\n            await this.executePaymentMethodCheckoutOrContinue();\r\n\r\n            this.draftEmail = undefined;\r\n        } catch (error) {\r\n            if (error.type === 'update_subscriptions' || error.type === 'payment_method_client_invalid') {\r\n                this.draftEmail = undefined;\r\n\r\n                onContinueAsGuest();\r\n            }\r\n\r\n            if (error.status === 429) {\r\n                return onChangeViewType(CustomerViewType.EnforcedLogin);\r\n            }\r\n\r\n            if (error.status === 403) {\r\n                return onChangeViewType(CustomerViewType.CancellableEnforcedLogin);\r\n            }\r\n\r\n            onContinueAsGuestError(error);\r\n        }\r\n    };\r\n\r\n    private handleSignIn: (credentials: CustomerCredentials) => Promise<void> = async credentials => {\r\n        const {\r\n            signIn,\r\n            onSignIn = noop,\r\n            onSignInError = noop,\r\n        } = this.props;\r\n\r\n        try {\r\n            await signIn(credentials);\r\n            onSignIn();\r\n\r\n            this.draftEmail = undefined;\r\n        } catch (error) {\r\n            onSignInError(error);\r\n        }\r\n    };\r\n\r\n    private handleCreateAccount: (values: CreateAccountFormValues) => void = async values => {\r\n        const {\r\n            createAccount = noop,\r\n            onAccountCreated = noop,\r\n        } = this.props;\r\n\r\n        await createAccount(mapCreateAccountFromFormValues(values));\r\n\r\n        onAccountCreated();\r\n    };\r\n\r\n    private showCreateAccount: () => void = () => {\r\n        const {\r\n            onChangeViewType = noop,\r\n        } = this.props;\r\n\r\n        onChangeViewType(CustomerViewType.CreateAccount);\r\n    };\r\n\r\n    private handleCancelCreateAccount: () => void = () => {\r\n        const {\r\n            clearError,\r\n            onChangeViewType = noop,\r\n            createAccountError,\r\n        } = this.props;\r\n\r\n        if (createAccountError) {\r\n            clearError(createAccountError);\r\n        }\r\n\r\n        onChangeViewType(CustomerViewType.Login);\r\n    };\r\n\r\n    private handleCancelSignIn: () => void = () => {\r\n        const {\r\n            clearError,\r\n            onChangeViewType = noop,\r\n            signInError,\r\n        } = this.props;\r\n\r\n        if (signInError) {\r\n            clearError(signInError);\r\n        }\r\n\r\n        onChangeViewType(CustomerViewType.Guest);\r\n    };\r\n\r\n    private handleChangeEmail: (email: string) => void = email => {\r\n        this.draftEmail = email;\r\n    };\r\n\r\n    private handleShowLogin: () => void = () => {\r\n        const { onChangeViewType = noop } = this.props;\r\n\r\n        onChangeViewType(CustomerViewType.Login);\r\n    };\r\n\r\n    private executePaymentMethodCheckoutOrContinue: () => void = async () => {\r\n        const {\r\n            executePaymentMethodCheckout,\r\n            onContinueAsGuest = noop,\r\n            providerWithCustomCheckout,\r\n        } = this.props;\r\n\r\n        if (providerWithCustomCheckout) {\r\n            await executePaymentMethodCheckout({ methodId: providerWithCustomCheckout, continueWithCheckoutCallback: onContinueAsGuest });\r\n        } else {\r\n            onContinueAsGuest();\r\n        }\r\n    };\r\n}\r\n\r\nexport function mapToWithCheckoutCustomerProps(\r\n    { checkoutService, checkoutState }: CheckoutContextProps\r\n): WithCheckoutCustomerProps | null {\r\n    const {\r\n        data: { getBillingAddress, getCustomerAccountFields, getCheckout, getCustomer, getSignInEmail, getConfig },\r\n        errors: { getSignInError, getSignInEmailError, getCreateCustomerAccountError },\r\n        statuses: { isContinuingAsGuest, isExecutingPaymentMethodCheckout, isInitializingCustomer, isSigningIn, isSendingSignInEmail, isCreatingCustomerAccount },\r\n    } = checkoutState;\r\n\r\n    const billingAddress = getBillingAddress();\r\n    const checkout = getCheckout();\r\n    const customer = getCustomer();\r\n    const signInEmail = getSignInEmail();\r\n    const config = getConfig();\r\n\r\n    if (!checkout || !config) {\r\n        return null;\r\n    }\r\n\r\n    const {\r\n        checkoutSettings: {\r\n            privacyPolicyUrl,\r\n            requiresMarketingConsent,\r\n            isSignInEmailEnabled,\r\n            isAccountCreationEnabled,\r\n        },\r\n    } = config as StoreConfig & { checkoutSettings: { isAccountCreationEnabled: boolean } };\r\n\r\n    return {\r\n        customerAccountFields: getCustomerAccountFields(),\r\n        canSubscribe: config.shopperConfig.showNewsletterSignup,\r\n        checkoutButtonIds: config.checkoutSettings.remoteCheckoutProviders,\r\n        clearError: checkoutService.clearError,\r\n        createAccount: checkoutService.createCustomerAccount,\r\n        continueAsGuest: checkoutService.continueAsGuest,\r\n        sendLoginEmail: checkoutService.sendSignInEmail,\r\n        defaultShouldSubscribe: config.shopperConfig.defaultNewsletterSignup,\r\n        deinitializeCustomer: checkoutService.deinitializeCustomer,\r\n        executePaymentMethodCheckout: checkoutService.executePaymentMethodCheckout,\r\n        email: billingAddress?.email || customer?.email,\r\n        firstName: customer?.firstName,\r\n        forgotPasswordUrl: config.links.forgotPasswordLink,\r\n        initializeCustomer: checkoutService.initializeCustomer,\r\n        isCreatingAccount: isCreatingCustomerAccount(),\r\n        createAccountError: getCreateCustomerAccountError(),\r\n        isContinuingAsGuest: isContinuingAsGuest(),\r\n        isExecutingPaymentMethodCheckout: isExecutingPaymentMethodCheckout(),\r\n        isInitializing:  isInitializingCustomer(),\r\n        isSignInEmailEnabled,\r\n        isAccountCreationEnabled,\r\n        isGuestEnabled: config.checkoutSettings.guestCheckoutEnabled,\r\n        isSigningIn: isSigningIn(),\r\n        isSendingSignInEmail: isSendingSignInEmail(),\r\n        signInEmail,\r\n        signInEmailError: getSignInEmailError(),\r\n        privacyPolicyUrl,\r\n        providerWithCustomCheckout: config.checkoutSettings.providerWithCustomCheckout || undefined,\r\n        requiresMarketingConsent,\r\n        signIn: checkoutService.signInCustomer,\r\n        signInError: getSignInError(),\r\n    };\r\n}\r\n\r\nexport default withCheckout(mapToWithCheckoutCustomerProps)(Customer);\r\n","import { forIn, isDate, padStart } from 'lodash';\r\n\r\nexport default function mapCustomFormFieldsFromFormValues(\r\n    customFieldsObject: { [id: string]: any }\r\n): Array<{fieldId: string; fieldValue: string}> {\r\n    const customFields: Array<{fieldId: string; fieldValue: string}> = [];\r\n    forIn(customFieldsObject, (value, key) => {\r\n        let fieldValue: string;\r\n\r\n        if (isDate(value)) {\r\n            const padMonth = padStart((value.getMonth() + 1).toString(), 2, '0');\r\n            const padDay = padStart((value.getDate()).toString(), 2, '0');\r\n            fieldValue = `${value.getFullYear()}-${padMonth}-${padDay}`;\r\n        } else {\r\n            fieldValue = value;\r\n        }\r\n\r\n        customFields.push({\r\n            fieldId: key,\r\n            fieldValue,\r\n        });\r\n    });\r\n\r\n    return customFields;\r\n}\r\n","import React, { FunctionComponent, MouseEventHandler } from 'react';\r\n\r\nimport { preventDefault } from '../common/dom';\r\nimport { parseAnchor } from '../common/utility';\r\n\r\nimport withLanguage, { WithLanguageProps } from './withLanguage';\r\nimport { TranslatedStringProps } from './TranslatedString';\r\n\r\nexport type TranslatedLinkProps = TranslatedStringProps & {\r\n    testId?: string;\r\n    onClick: MouseEventHandler;\r\n};\r\n\r\nconst TranslatedLink: FunctionComponent<TranslatedLinkProps & WithLanguageProps> = ({\r\n    data,\r\n    id,\r\n    language,\r\n    onClick,\r\n    testId,\r\n}) => {\r\n    const translatedString = language.translate(id, data);\r\n    const parsedString = parseAnchor(translatedString);\r\n\r\n    return parsedString.length ?\r\n        <>\r\n            { parsedString[0] }\r\n            <a\r\n                data-test={ testId }\r\n                href=\"#\"\r\n                onClick={ preventDefault(onClick) }\r\n            >\r\n                { parsedString[1] }\r\n            </a>\r\n            { parsedString[2] }\r\n        </> :\r\n        <>{ translatedString }</>;\r\n};\r\n\r\nexport default withLanguage(TranslatedLink);\r\n","import { FieldProps } from 'formik';\r\nimport { kebabCase } from 'lodash';\r\nimport React, { memo, useCallback, Fragment, FunctionComponent, ReactNode } from 'react';\r\n\r\nimport BasicFormField from './BasicFormField';\r\nimport CheckboxInput from './CheckboxInput';\r\nimport FormFieldError from './FormFieldError';\r\n\r\nexport interface CheckboxFormFieldProps {\r\n    additionalClassName?: string;\r\n    disabled?: boolean;\r\n    name: string;\r\n    id?: string;\r\n    labelContent: ReactNode;\r\n    onChange?(isChecked: boolean): void;\r\n}\r\n\r\nconst CheckboxFormField: FunctionComponent<CheckboxFormFieldProps> = ({\r\n    additionalClassName,\r\n    disabled = false,\r\n    labelContent,\r\n    onChange,\r\n    name,\r\n    id,\r\n}) => {\r\n    const renderField = useCallback(({ field }: FieldProps) => (\r\n        <Fragment>\r\n            { <CheckboxInput\r\n                { ...field }\r\n                checked={ !!field.value }\r\n                disabled={ disabled }\r\n                id={ id || field.name }\r\n                label={ labelContent }\r\n            /> }\r\n\r\n            <FormFieldError\r\n                errorId={ `${id ?? name}-field-error-message` }\r\n                name={ name }\r\n                testId={ `${kebabCase(name)}-field-error-message` }\r\n            />\r\n        </Fragment>\r\n    ), [\r\n        disabled,\r\n        id,\r\n        labelContent,\r\n        name,\r\n    ]);\r\n\r\n    return <BasicFormField\r\n        additionalClassName={ additionalClassName }\r\n        name={ name }\r\n        onChange={ onChange }\r\n        render={ renderField }\r\n    />;\r\n};\r\n\r\nexport default memo(CheckboxFormField);\r\n","import classNames from 'classnames';\r\nimport React, { forwardRef, ReactNode, Ref } from 'react';\r\n\r\nimport Input, { InputProps } from './Input';\r\nimport Label from './Label';\r\n\r\nexport interface CheckboxInputProps extends InputProps {\r\n    additionalClassName?: string;\r\n    label: ReactNode;\r\n    value: string;\r\n    checked: boolean;\r\n}\r\n\r\nconst CheckboxInput = forwardRef((\r\n    {\r\n        additionalClassName,\r\n        label,\r\n        id,\r\n        ...rest\r\n    }: CheckboxInputProps,\r\n    ref: Ref<HTMLInputElement>\r\n) => (\r\n    <>\r\n        <Input\r\n            { ...rest }\r\n            className={ classNames(\r\n                'form-checkbox',\r\n                'optimizedCheckout-form-checkbox',\r\n                additionalClassName\r\n            ) }\r\n            id={ id }\r\n            ref={ ref }\r\n            type=\"checkbox\"\r\n        />\r\n        <Label htmlFor={ id }>\r\n            { label }\r\n        </Label>\r\n    </>\r\n));\r\n\r\nexport default CheckboxInput;\r\n","import { createInjectHoc, InjectHoc } from '../common/hoc';\r\n\r\nimport LocaleContext from './LocaleContext';\r\n\r\nexport interface WithDateProps {\r\n    date: {\r\n        inputFormat: string;\r\n    };\r\n}\r\n\r\nconst withDate: InjectHoc<WithDateProps> = createInjectHoc(LocaleContext, {\r\n    displayNamePrefix: 'withDate',\r\n    pickProps: (value, key) => key === 'date' && !!value,\r\n});\r\n\r\nexport default withDate;\r\n","import classNames from 'classnames';\r\nimport React, { forwardRef, ReactNode, Ref } from 'react';\r\n\r\nimport Input, { InputProps } from './Input';\r\nimport Label from './Label';\r\n\r\nexport interface RadioInputProps extends InputProps {\r\n    additionalClassName?: string;\r\n    label: ReactNode;\r\n    value: string;\r\n    checked: boolean;\r\n}\r\n\r\nconst RadioInput = forwardRef((\r\n    {\r\n        additionalClassName,\r\n        label,\r\n        value,\r\n        checked,\r\n        id,\r\n        ...rest\r\n    }: RadioInputProps,\r\n    ref: Ref<HTMLInputElement>\r\n) => (\r\n    <>\r\n        <Input\r\n            { ...rest }\r\n            checked={ checked }\r\n            className={ classNames(\r\n                'form-radio',\r\n                'optimizedCheckout-form-radio',\r\n                additionalClassName\r\n            ) }\r\n            id={ id }\r\n            ref={ ref }\r\n            type=\"radio\"\r\n            value={ value }\r\n        />\r\n        <Label htmlFor={ id }>\r\n            { label }\r\n        </Label>\r\n    </>\r\n));\r\n\r\nexport default RadioInput;\r\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\r\nimport { isDate, noop } from 'lodash';\r\nimport React, { memo, useCallback, FunctionComponent } from 'react';\r\nimport ReactDatePicker from 'react-datepicker';\r\n\r\nimport { withDate, WithDateProps } from '../../locale';\r\n\r\nimport CheckboxInput from './CheckboxInput';\r\nimport DynamicFormFieldType from './DynamicFormFieldType';\r\nimport { InputProps } from './Input';\r\nimport RadioInput from './RadioInput';\r\nimport TextArea from './TextArea';\r\nimport TextInput from './TextInput';\r\n\r\nexport interface DynamicInputProps extends InputProps {\r\n    id: string;\r\n    additionalClassName?: string;\r\n    value?: string | string[];\r\n    rows?: number;\r\n    fieldType?: DynamicFormFieldType;\r\n    options?: FormFieldItem[];\r\n}\r\n\r\nconst DynamicInput: FunctionComponent<DynamicInputProps & WithDateProps> = ({\r\n    additionalClassName,\r\n    date,\r\n    fieldType,\r\n    id,\r\n    name,\r\n    onChange = noop,\r\n    options,\r\n    placeholder,\r\n    value,\r\n    ...rest\r\n}) => {\r\n    const { inputFormat } = date;\r\n    const handleDateChange = useCallback((dateValue, event) => onChange({\r\n        ...event,\r\n        target: {\r\n            name,\r\n            value: dateValue,\r\n        },\r\n    }), [\r\n        onChange,\r\n        name,\r\n    ]);\r\n\r\n    switch (fieldType) {\r\n    case DynamicFormFieldType.dropdown:\r\n        return (\r\n            <select\r\n                { ...rest as any }\r\n                className=\"form-select optimizedCheckout-form-select\"\r\n                data-test={ `${id}-select` }\r\n                id={ id }\r\n                name={ name }\r\n                onChange={ onChange }\r\n                value={ value === null ? '' : value }\r\n            >\r\n                { placeholder &&\r\n                    <option value=\"\">\r\n                        { placeholder }\r\n                    </option> }\r\n                { options && options.map(({ label, value: optionValue }) =>\r\n                    <option\r\n                        key={ optionValue }\r\n                        value={ optionValue }\r\n                    >\r\n                        { label }\r\n                    </option>\r\n                ) }\r\n            </select>\r\n        );\r\n\r\n    case DynamicFormFieldType.radio:\r\n        if (!options || !options.length) {\r\n            return null;\r\n        }\r\n\r\n        return <>\r\n            { options.map(({ label, value: optionValue }) =>\r\n                <RadioInput\r\n                    { ...rest }\r\n                    checked={ optionValue === value }\r\n                    id={ `${id}-${optionValue}` }\r\n                    key={ optionValue }\r\n                    label={ label }\r\n                    name={ name }\r\n                    onChange={ onChange }\r\n                    testId={ `${id}-${optionValue}-radio` }\r\n                    value={ optionValue }\r\n                />) }\r\n        </>;\r\n\r\n    case DynamicFormFieldType.checkbox:\r\n        if (!options || !options.length) {\r\n            return null;\r\n        }\r\n\r\n        return <>\r\n            { options.map(({ label, value: optionValue }) =>\r\n                <CheckboxInput\r\n                    { ...rest }\r\n                    checked={ Array.isArray(value) ? value.includes(optionValue) : false }\r\n                    id={ `${id}-${optionValue}` }\r\n                    key={ optionValue }\r\n                    label={ label }\r\n                    name={ name }\r\n                    onChange={ onChange }\r\n                    testId={ `${id}-${optionValue}-checkbox` }\r\n                    value={ optionValue }\r\n                />) }\r\n        </>;\r\n\r\n    case DynamicFormFieldType.date:\r\n        return (\r\n            <ReactDatePicker\r\n                { ...rest as any }\r\n                autoComplete=\"off\"\r\n                // FIXME: we can avoid this by simply using onChangeRaw, but it's not being triggered properly\r\n                // https://github.com/Hacker0x01/react-datepicker/issues/1357\r\n                // onChangeRaw={ rest.onChange }\r\n                calendarClassName=\"optimizedCheckout-contentPrimary\"\r\n                className=\"form-input optimizedCheckout-form-input\"\r\n                dateFormat={ inputFormat }\r\n                maxDate={ rest.max ? new Date(`${rest.max}T00:00:00Z`) : undefined }\r\n                minDate={ rest.min ? new Date(`${rest.min}T00:00:00Z`) : undefined }\r\n                name={ name }\r\n                onChange={ handleDateChange }\r\n                placeholderText={ inputFormat.toUpperCase() }\r\n                popperClassName=\"optimizedCheckout-contentPrimary\"\r\n                selected={ isDate(value) ? value : undefined }\r\n            />\r\n        );\r\n\r\n    case DynamicFormFieldType.multiline:\r\n        return (\r\n            <TextArea\r\n                { ...rest as any }\r\n                id={ id }\r\n                name={ name }\r\n                onChange={ onChange }\r\n                testId={ `${id}-text` }\r\n                type={ fieldType }\r\n                value={ value }\r\n            />\r\n        );\r\n\r\n    default:\r\n        return (\r\n            <TextInput\r\n                { ...rest }\r\n                id={ id }\r\n                name={ name }\r\n                onChange={ onChange }\r\n                placeholder={ placeholder }\r\n                testId={ `${id}-${ fieldType === DynamicFormFieldType.password ?\r\n                    'password' :\r\n                    'text' }` }\r\n                type={ fieldType }\r\n                value={ value }\r\n            />\r\n        );\r\n    }\r\n};\r\n\r\nexport default memo(withDate(DynamicInput));\r\n","import React, { memo, useCallback, FunctionComponent, MouseEvent } from 'react';\r\n\r\nimport { TranslatedString } from '../../locale';\r\n\r\nimport './MultiCheckboxControl.scss';\r\n\r\nexport interface MultiCheckboxControlProps {\r\n    testId?: string;\r\n    onSelectedAll(): void;\r\n    onSelectedNone(): void;\r\n}\r\n\r\nconst MultiCheckboxControl: FunctionComponent<MultiCheckboxControlProps> = ({\r\n    testId,\r\n    onSelectedAll,\r\n    onSelectedNone,\r\n}) => {\r\n    const handleSelectAllClick = useCallback((event: MouseEvent) => {\r\n        event.preventDefault();\r\n        onSelectedAll();\r\n    }, [onSelectedAll]);\r\n\r\n    const handleSelectNoneClick = useCallback((event: MouseEvent) => {\r\n        event.preventDefault();\r\n        onSelectedNone();\r\n    }, [onSelectedNone]);\r\n\r\n    return <ul className=\"multiCheckbox--controls\">\r\n        <li className=\"multiCheckbox--control\">\r\n            <TranslatedString id=\"address.select\" />\r\n        </li>\r\n\r\n        <li className=\"multiCheckbox--control\">\r\n            <a\r\n                data-test={ `${testId}Checkbox-all-button` }\r\n                href=\"#\"\r\n                onClick={ handleSelectAllClick }\r\n            >\r\n                <TranslatedString id=\"address.select_all\" />\r\n            </a>\r\n        </li>\r\n\r\n        <li className=\"multiCheckbox--control\">\r\n            <a\r\n                data-test={ `${testId}Checkbox-none-button` }\r\n                href=\"#\"\r\n                onClick={ handleSelectNoneClick }\r\n            >\r\n                <TranslatedString id=\"address.select_none\" />\r\n            </a>\r\n        </li>\r\n    </ul>;\r\n};\r\n\r\nexport default memo(MultiCheckboxControl);\r\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\r\nimport { getIn, FieldArray, FieldArrayRenderProps } from 'formik';\r\nimport { difference, kebabCase, noop, pick } from 'lodash';\r\nimport React, { memo, useCallback, ChangeEvent, FunctionComponent, ReactNode } from 'react';\r\n\r\nimport DynamicFormFieldType from './DynamicFormFieldType';\r\nimport DynamicInput from './DynamicInput';\r\nimport FormFieldContainer from './FormFieldContainer';\r\nimport FormFieldError from './FormFieldError';\r\nimport MultiCheckboxControl from './MultiCheckboxControl';\r\n\r\nexport interface CheckboxGroupFormFieldProps {\r\n    id: string;\r\n    label: ReactNode;\r\n    name: string;\r\n    options: FormFieldItem[];\r\n    onChange?(values: string[]): void;\r\n}\r\n\r\ntype MultiCheckboxFormFieldProps = (\r\n    CheckboxGroupFormFieldProps &\r\n    Pick<FieldArrayRenderProps, 'push' | 'remove' | 'pop' | 'form'>\r\n);\r\n\r\nconst MultiCheckboxFormField: FunctionComponent<MultiCheckboxFormFieldProps> = ({\r\n    form: { values, errors },\r\n    id,\r\n    label,\r\n    name,\r\n    onChange = noop,\r\n    options,\r\n    push,\r\n    remove,\r\n}) => {\r\n    const handleSelectAll = useCallback(() => {\r\n        const checkedValues: string[] = getIn(values, name) || [];\r\n\r\n        difference(options.map(({ value }) => value), checkedValues)\r\n            .forEach(val => push(val));\r\n\r\n        onChange(getIn(values, name));\r\n    }, [\r\n        name,\r\n        onChange,\r\n        options,\r\n        push,\r\n        values,\r\n    ]);\r\n\r\n    const handleSelectNone = useCallback(() => {\r\n        const checkedValues: string[] = getIn(values, name) || [];\r\n\r\n        checkedValues.forEach(() => remove(0));\r\n\r\n        onChange(getIn(values, name));\r\n    }, [\r\n        name,\r\n        onChange,\r\n        remove,\r\n        values,\r\n    ]);\r\n\r\n    const handleInputChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\r\n        const checkedValues: string[] = getIn(values, name) || [];\r\n        const { value, checked } = event.target;\r\n\r\n        if (checked) {\r\n            push(value);\r\n        } else {\r\n            remove(checkedValues.indexOf(value));\r\n        }\r\n\r\n        onChange(getIn(values, name));\r\n    }, [\r\n        name,\r\n        onChange,\r\n        push,\r\n        remove,\r\n        values,\r\n    ]);\r\n\r\n    return <FormFieldContainer hasError={ getIn(errors, name) && getIn(errors, name).length }>\r\n        { label }\r\n\r\n        { options.length > 1 && <MultiCheckboxControl\r\n            onSelectedAll={ handleSelectAll }\r\n            onSelectedNone={ handleSelectNone }\r\n            testId={ id }\r\n        /> }\r\n\r\n        <DynamicInput\r\n            fieldType={ DynamicFormFieldType.checkbox }\r\n            id={ id }\r\n            name={ name }\r\n            onChange={ handleInputChange }\r\n            options={ options }\r\n            value={ getIn(values, name) || [] }\r\n        />\r\n\r\n        <FormFieldError\r\n            errorId={ `${id ?? name}-field-error-message` }\r\n            name={ name }\r\n            testId={ `${kebabCase(name)}-field-error-message` }\r\n        />\r\n    </FormFieldContainer>;\r\n};\r\n\r\nconst CheckboxGroupFormField: FunctionComponent<CheckboxGroupFormFieldProps> = ({\r\n    id,\r\n    label,\r\n    name,\r\n    onChange,\r\n    options,\r\n}) => {\r\n    const renderField = useCallback((renderProps: FieldArrayRenderProps) => (\r\n        <MultiCheckboxFormField\r\n            id={ id }\r\n            label={ label }\r\n            name={ name }\r\n            onChange={ onChange }\r\n            options={ options }\r\n            { ...pick(renderProps, [\r\n                'form',\r\n                'pop',\r\n                'push',\r\n                'remove',\r\n            ]) }\r\n        />\r\n    ), [\r\n        id,\r\n        label,\r\n        name,\r\n        onChange,\r\n        options,\r\n    ]);\r\n\r\n    return <FieldArray\r\n        name={ name }\r\n        render={ renderField }\r\n    />;\r\n};\r\n\r\nexport default memo(CheckboxGroupFormField);\r\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\r\nimport { FieldProps } from 'formik';\r\nimport React, { memo, useCallback, useMemo, FunctionComponent, ReactNode } from 'react';\r\n\r\nimport { TranslatedString } from '../../locale';\r\n\r\nimport CheckboxGroupFormField from './CheckboxGroupFormField';\r\nimport DynamicFormFieldType from './DynamicFormFieldType';\r\nimport DynamicInput from './DynamicInput';\r\nimport FormField from './FormField';\r\nimport Label from './Label';\r\n\r\nexport interface DynamicFormFieldOption {\r\n    code: string;\r\n    name: string;\r\n}\r\n\r\nexport interface DynamicFormFieldProps {\r\n    field: FormFieldType;\r\n    inputId?: string;\r\n    extraClass?: string;\r\n    autocomplete?: string;\r\n    parentFieldName?: string;\r\n    placeholder?: string;\r\n    label?: ReactNode;\r\n    onChange?(value: string | string[]): void;\r\n}\r\n\r\nconst DynamicFormField: FunctionComponent<DynamicFormFieldProps>  = ({\r\n    field: {\r\n        fieldType,\r\n        type,\r\n        secret,\r\n        name,\r\n        label: fieldLabel,\r\n        required,\r\n        options,\r\n        max,\r\n        min,\r\n        maxLength,\r\n    },\r\n    parentFieldName,\r\n    onChange,\r\n    placeholder,\r\n    inputId,\r\n    autocomplete,\r\n    label,\r\n    extraClass,\r\n}) => {\r\n    const fieldInputId = inputId || name;\r\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\r\n\r\n    const labelComponent = useMemo(() => (\r\n        <Label htmlFor={ fieldInputId } id={ `${fieldInputId}-label` }>\r\n            { label || fieldLabel }\r\n            { !required &&\r\n                <>\r\n                    { ' ' }\r\n                    <small className=\"optimizedCheckout-contentSecondary\">\r\n                        <TranslatedString id=\"common.optional_text\" />\r\n                    </small>\r\n                </> }\r\n        </Label>\r\n    ), [\r\n        fieldInputId,\r\n        fieldLabel,\r\n        required,\r\n        label,\r\n    ]);\r\n\r\n    const dynamicFormFieldType = useMemo((): DynamicFormFieldType => {\r\n        if (fieldType === 'text') {\r\n            if (type === 'integer') {\r\n                return DynamicFormFieldType.number;\r\n            }\r\n\r\n            return secret ?\r\n                DynamicFormFieldType.password :\r\n                DynamicFormFieldType.text;\r\n        }\r\n\r\n        return fieldType as DynamicFormFieldType;\r\n    }, [fieldType, type, secret]);\r\n\r\n    const renderInput = useCallback(({ field }: FieldProps<string>) => (\r\n        <DynamicInput\r\n            { ...field }\r\n            aria-labelledby={ `${fieldInputId}-label ${fieldInputId}-field-error-message` }\r\n            autoComplete={ autocomplete }\r\n            fieldType={ dynamicFormFieldType }\r\n            id={ fieldInputId }\r\n            max={ max }\r\n            maxLength={ maxLength || undefined }\r\n            min={ min }\r\n            options={ options && options.items }\r\n            placeholder={ placeholder || (options && options.helperLabel) }\r\n            rows={ options && (options as any).rows }\r\n        />\r\n    ), [\r\n        fieldInputId,\r\n        max,\r\n        maxLength,\r\n        min,\r\n        options,\r\n        placeholder,\r\n        dynamicFormFieldType,\r\n        autocomplete,\r\n    ]);\r\n\r\n    return (\r\n        <div className={ `dynamic-form-field ${extraClass}` }>\r\n            { fieldType === DynamicFormFieldType.checkbox ?\r\n                <CheckboxGroupFormField\r\n                    id={ fieldInputId }\r\n                    label={ labelComponent }\r\n                    name={ fieldName }\r\n                    onChange={ onChange }\r\n                    options={ (options && options.items) || [] }\r\n                /> :\r\n                <FormField\r\n                    id={ fieldInputId }\r\n                    input={ renderInput }\r\n                    label={ labelComponent }\r\n                    name={ fieldName }\r\n                    onChange={ onChange }\r\n                /> }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default memo(DynamicFormField);\r\n","import classNames from 'classnames';\r\nimport React, { forwardRef, Ref, TextareaHTMLAttributes } from 'react';\r\n\r\nexport interface TextAreaProps extends TextareaHTMLAttributes<HTMLTextAreaElement> {\r\n    additionalClassName?: string;\r\n    testId?: string;\r\n}\r\n\r\nconst TextArea = forwardRef((\r\n    { additionalClassName, testId, className, ...rest }: TextAreaProps,\r\n    ref: Ref<HTMLTextAreaElement>\r\n) => (\r\n    <textarea\r\n        { ...rest }\r\n        className={ className || classNames(\r\n            'form-input',\r\n            'optimizedCheckout-form-input',\r\n            additionalClassName\r\n        ) }\r\n        data-test={ testId }\r\n        ref={ ref }\r\n    />\r\n));\r\n\r\nexport default TextArea;\r\n"],"names":["parseAnchor","text","div","document","createElement","innerHTML","anchor","querySelector","anchorSiblings","split","outerHTML","mapCreateAccountFromFormValues","acceptsMarketingEmails","customFields","values","length","mapCustomFormFieldsFromFormValues","EMAIL_REGEXP","getEmailValidationSchema","language","email","max","matches","translate","required","getTranslateCreateCustomerError","type","label","min","memoize","formFields","passwordRequirements","description","numeric","alpha","minLength","firstName","lastName","password","concat","getCustomFormFieldsValidationSchema","withLanguage","withFormik","handleSubmit","onSubmit","noop","mapPropsToValues","validationSchema","find","requirements","Error","getCreateCustomerValidationSchema","getPasswordRequirements","createAccountError","isCreatingAccount","onCancel","createAccountErrorMessage","useMemo","isRequestError","status","splitMessage","message","TranslatedString","data","trim","id","Form","className","testId","Fieldset","Alert","map","field","DynamicFormField","autocomplete","name","extraClass","key","parentFieldName","custom","undefined","Button","disabled","variant","href","onClick","preventDefault","memo","onChange","renderInput","useCallback","props","TextInput","autoComplete","labelContent","FormField","input","onSendLoginEmail","isOpen","isSendingEmail","emailHasBeenRequested","onRequestClose","sentEmailError","sentEmail","submitForm","formEmail","modalHeaderStringId","okButton","footer","LoadingSpinner","isLoading","sent_email","TranslatedLink","error","form","expiry","TranslatedHtml","minutes","Math","round","Modal","additionalBodyClassName","additionalModalClassName","header","ModalHeader","shouldShowCloseButton","PrivacyPolicyCheckboxFieldLink","url","CheckboxFormField","additionalClassName","requiresMarketingConsent","Fragment","Input","checked","value","Label","htmlFor","defaultShouldSubscribe","shouldSubscribe","privacyPolicy","onContinueAsGuest","privacyPolicyUrl","baseSchema","isRequired","schemaFields","oneOf","getPrivacyPolicyValidationSchema","canSubscribe","checkoutButtons","continueAsGuestButtonLabelId","onChangeEmail","onShowLogin","renderField","fieldProps","legend","Legend","hidden","BasicFormField","render","PrivacyPolicyField","withIconContainer","viewBox","xmlns","d","forgotPasswordUrl","Toggle","openByDefault","toggle","rel","target","onSignIn","canCancel","isSignInEmailEnabled","isSigningIn","onCreateAccount","signInError","shouldShowCreateAccountLink","viewType","CustomerViewType","changeEmailLink","body","mapErrorMessage","state","isEmailLoginFormOpen","isReady","hasRequestedLoginEmail","closeEmailLoginFormForm","setState","handleEmailLoginClicked","this","draftEmail","handleSendLoginEmail","sendLoginEmail","handleContinueAsGuest","formValues","continueAsGuest","onChangeViewType","onContinueAsGuestError","acceptsMarketingNewsletter","acceptsAbandonedCartEmails","customer","getCustomer","shouldEncourageSignIn","isGuest","executePaymentMethodCheckoutOrContinue","handleSignIn","credentials","signIn","onSignInError","handleCreateAccount","createAccount","onAccountCreated","showCreateAccount","handleCancelCreateAccount","clearError","handleCancelSignIn","handleChangeEmail","handleShowLogin","executePaymentMethodCheckout","providerWithCustomCheckout","methodId","continueWithCheckoutCallback","componentDidMount","initializeCustomer","onReady","onUnhandledError","componentWillUnmount","deinitializeCustomer","shouldRenderGuestForm","shouldRenderCreateAccountForm","shouldRenderLoginForm","LoadingOverlay","unmountContentWhenLoading","renderEmailLoginLinkForm","renderLoginForm","renderGuestForm","renderCreateAccountForm","checkEmbeddedSupport","checkoutButtonIds","isContinuingAsGuest","isExecutingPaymentMethodCheckout","isInitializing","CheckoutButtonList","deinitialize","initialize","methodIds","onError","isSendingSignInEmail","signInEmailError","signInEmail","customerAccountFields","isEmbedded","isGuestEnabled","isAccountCreationEnabled","Component","mapToWithCheckoutCustomerProps","checkoutService","checkoutState","getBillingAddress","getCustomerAccountFields","getCheckout","getSignInEmail","getConfig","getSignInError","getSignInEmailError","getCreateCustomerAccountError","isInitializingCustomer","isCreatingCustomerAccount","billingAddress","checkout","config","shopperConfig","showNewsletterSignup","checkoutSettings","remoteCheckoutProviders","createCustomerAccount","sendSignInEmail","defaultNewsletterSignup","links","forgotPasswordLink","guestCheckoutEnabled","signInCustomer","withCheckout","Customer","customFieldsObject","forIn","fieldValue","isDate","padMonth","padStart","getMonth","toString","padDay","getDate","getFullYear","push","fieldId","translatedString","parsedString","errorId","kebabCase","forwardRef","ref","rest","createInjectHoc","LocaleContext","displayNamePrefix","pickProps","date","fieldType","options","placeholder","inputFormat","handleDateChange","dateValue","event","DynamicFormFieldType","optionValue","CheckboxInput","Array","isArray","includes","calendarClassName","dateFormat","maxDate","Date","minDate","placeholderText","toUpperCase","popperClassName","selected","TextArea","onSelectedAll","onSelectedNone","handleSelectAllClick","handleSelectNoneClick","MultiCheckboxFormField","errors","remove","handleSelectAll","checkedValues","getIn","difference","forEach","val","handleSelectNone","handleInputChange","indexOf","FormFieldContainer","hasError","FormFieldError","renderProps","pick","FieldArray","secret","fieldLabel","maxLength","inputId","fieldInputId","fieldName","labelComponent","dynamicFormFieldType","items","helperLabel","rows"],"sourceRoot":""}
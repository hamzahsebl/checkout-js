{"version":3,"file":"billing-47ad1762.js","mappings":"0QAIe,SAASA,EAAmBC,GACvC,IACMC,GAAqB,EAAAC,EAAA,GAAsBF,GAEjD,OAAOC,GAHoB,CAAC,aAGoBE,QAAQF,EAAmBG,aAAe,EACtFH,EAAmBG,gBACnBC,CACR,C,8JC0BA,yE,OACI,EAAAC,MAA0B,CACtBC,oBAAoB,GAGhB,EAAAC,gBAAiD,IAAAC,aA+EjD,EAAAC,oBAA2D,SAAMC,GAAO,kD,6EACtE,EAGFC,KAAKC,MAFLC,EAAa,gBACbC,EAAgB,mBAGpBH,KAAKI,SAAS,CAAET,oBAAoB,I,iBAGhC,O,uBAAA,GAAMO,EAAcH,I,cAApB,S,+BAEAI,EAAiB,G,oBAEjBH,KAAKI,SAAS,CAAET,oBAAoB,I,6BAIpC,EAAAU,oBAAkC,WACtC,EAAKP,oBAAoB,CAAC,EAC9B,E,CACJ,QAxG0B,oBAOtB,YAAAQ,OAAA,WACU,MAYFN,KAAKC,MAXLM,EAAgB,mBAChBC,EAAc,iBACdC,EAAyB,4BACzB,IAAAC,SAAYC,EAAS,YAAEC,EAAO,UAC9BC,EAAS,YACTC,EAAS,YACTC,EAAU,aACVC,EAAa,gBACbC,EAAuB,0BACvBC,EAAM,SAIJC,EAAyC,cAHnC,WAINC,EAAgBP,EAAUK,EAAOG,aACjCC,EAAmBF,EAAcG,QAAO,SAAC,GAAe,OAAP,QAAO,IACxDC,EAAsBF,EAAiBG,OAAS,EAChDC,EAAqBP,GAA6BK,EAAsBF,EAAmBF,EACzFzB,EAAuBK,KAAKN,MAAK,mBACnCiC,EAAehB,GAAaA,EAAUc,OAAS,EAC/CG,EAA0BpB,IAC5B,EAAAqB,EAAA,GAAuBrB,EAAgBG,EAAWE,EAAUL,EAAea,cAE/E,OACI,gBAACS,EAAA,EAAI,CAACC,aAAa,MACbZ,GAA6BX,GAC3B,uBAAKwB,UAAY,iBACb,gBAACC,EAAA,EAAoB,CAAClC,QAAUS,KAGxC,gBAAC0B,EAAA,EAAQ,CAACC,GAAG,yBAAyBC,IAAMpC,KAAKJ,gBAC3C+B,IAAiBR,GACf,gBAACe,EAAA,EAAQ,CAACC,GAAG,oBACT,gBAACE,EAAA,EAAc,CAACC,UAAY3C,GACxB,gBAAC4C,EAAA,EAAa,CACV5B,UAAYA,EACZ6B,gBAAkBxC,KAAKF,oBACvB2C,gBAAkBzC,KAAKK,oBACvBqC,gBAAkBd,EAA0BpB,OAAiBf,OAK1EmC,GACC,gBAACS,EAAA,EAAc,CAACC,UAAY3C,GACxB,gBAACgD,EAAA,EAAW,CACR7B,UAAYA,EACZL,0BAA4BA,EAC5BY,YAAcH,EAAOG,YACrBuB,WAAalB,EACbnB,iBAAmBA,EACnBS,cAAgBA,EAChB6B,uBAAyBjC,MAKvCK,GACE,gBAAC6B,EAAA,EAAa,MAElB,uBAAKd,UAAU,gBACX,gBAACe,EAAA,GAAM,CACHC,SAAWjC,GAAcpB,EACzBwC,GAAG,4BACHG,UAAYvB,GAAcpB,EAC1BsD,KAAK,SACLC,QAAUH,EAAA,YAEV,gBAACI,EAAA,EAAgB,CAAChB,GAAG,6BAKzC,EAsBJ,EAxGA,CAA0B,EAAAiB,eA0G1B,SAAe,EAAAC,EAAA,IAAa,IAAAC,YAAoE,CAC5FC,aAAc,SAACrC,EAAQ,IACnBsC,EADsC,kBAC7BtC,EACb,EACAuC,iBAAkB,SAAC,G,IAAE5C,EAAS,YAAE6C,EAAe,kBAAElD,EAAc,iBAAO,OAAC,iCAEhE,EAAAmD,EAAA,GACC9C,EAAUL,GAAkBA,EAAea,aAC3Cb,IACH,CACDoD,aAAcF,GANoD,EAQtEG,eAAgB,SAAC,G,IACbrD,EAAc,iBACdK,EAAS,YACTiD,EAAQ,WACN,QACAtD,IAAkB,EAAAuD,EAAA,GAAqC,CACrDD,SAAQ,EACRlB,WAAY/B,EAAUL,EAAea,eACtC2C,YAAYxD,EAJb,EAMNyD,iBAAkB,SAAC,G,IACfH,EAAQ,WACRjD,EAAS,YAE+B,MAAa,cAD7C,YAEP,SAAiC,SAAAK,GAAU,SAAAgD,EAAA,GAAoC,CAC5EC,WAAW,OAAyBL,GACpClB,WAAY/B,EAAUK,GAAUA,EAAOG,cAFC,KAI3C,SAAiC,SAAAH,GAAU,SAAA6C,EAAA,GAAqC,CAC7ED,SAAQ,EACRlB,WAAY/B,EAAUK,GAAUA,EAAOG,cAFC,GALJ,EAS5C+C,oBAAoB,GAnCI,CAoCzBC,IC7IH,6E,OA6CY,EAAAd,aAAoD,SAAO,GAGlE,kD,wBAFGK,EAAY,eACTU,GAAa,cAF+C,kB,iEAIzD,EAOFtE,KAAKC,MANLC,EAAa,gBACbqE,EAAc,iBACdb,EAAe,kBACflD,EAAc,iBACdgE,EAAgB,mBAChBrE,EAAgB,mBAGdsE,EAA8C,IAC9C1E,GAAU,EAAA2E,EAAA,GAAyBJ,OAEzB,EAAAK,EAAA,GAAe5E,EAASS,IACpCiE,EAASG,KAAK1E,EAAcH,IAG5B2D,IAAoBE,GACpBa,EAASG,KAAKL,EAAe,CAAEb,gBAAiBE,K,iBAIhD,O,sBAAA,GAAMiB,QAAQC,IAAIL,I,cAAlB,SAEAD,I,+BAEArE,EAAiB,G,gCAG7B,QA7EsB,oBACZ,YAAA4E,kBAAN,W,sIACU,EAIF/E,KAAKC,MAHL+E,EAAU,aACV,IAAAC,QAAAA,OAAO,IAAG,IAAAC,KAAI,EACd/E,EAAgB,mB,iBAIhB,O,sBAAA,GAAM6E,K,cAAN,SACAC,I,+BAEA9E,EAAiB,G,+BAIzB,YAAAG,OAAA,WACI,IAAM,EAIFN,KAAKC,MAHLC,EAAa,gBACbiF,EAAc,iBACXlF,GAAK,cAHN,oCAMN,OACI,uBAAK+B,UAAU,iBACX,uBAAKA,UAAU,yBACX,gBAACoD,EAAA,EAAM,CAACC,OAAO,2BACX,gBAAClC,EAAA,EAAgB,CAAChB,GAAG,sCAI7B,gBAACE,EAAA,EAAc,CACXC,UAAY6C,EACZG,2BAAyB,GAEzB,gBAAC,GAAW,iBACHrF,EAAK,CACVuD,SAAWxD,KAAKuD,aAChBrD,cAAgBA,MAKpC,EAkCJ,EA7EA,CAAsB,EAAAqF,WA2ItB,SAAe,EAAAC,EAAA,IA5Df,SAA2B,G,IACvBC,EAAe,kBACfC,EAAa,gBAGT,EAcAA,EAAa,KAbTC,EAAW,cACXC,EAAS,YACTC,EAAO,UACPC,EAAW,cACXC,EAAiB,oBACjBC,EAAuB,0BACvBC,EAAmB,sBAEvB,EAKAP,EAAa,SAJTQ,EAAyB,4BACzBC,EAAwB,2BACxBC,EAAkB,qBAIpBC,EAAST,IACTlF,EAAWoF,IACX1G,EAAWuG,IACXW,EAAOT,IAEb,KAAKQ,GAAW3F,GAAatB,GAAakH,GACtC,OAAO,KAGL,MAIFD,EAAOE,iBAHPC,EAAmB,sBACnBjG,EAAgB,mBAIdE,EAA4B,CAAC,KAAM,KAAM,KAAM,MAMrD,OATY,WAKC,0DACTA,EAA0BmE,KAAK,MAG5B,CACHpE,eAAgBuF,IAChBjF,UAAWmF,KAAyB,IACpCxF,0BAAyB,EACzBC,SAAQ,EACRgD,gBAAiBtE,EAASsE,gBAC1B7C,UAAWmF,EACXzF,iBAAgB,EAChByE,WAAYS,EAAgBgB,yBAC5BtB,eAAgBe,IAChBnF,WAAYoF,KAA8BC,IAC1CM,SAAUvH,EAAmBC,GAC7B6B,wBAAyBuF,IAAuB,EAAAG,EAAA,GAAuBL,GAAQ,EAC/EpG,cAAeuF,EAAgBmB,qBAC/BrC,eAAgBkB,EAAgBlB,eAExC,GAEA,CAA+CsC,E","sources":["webpack://checkout/./packages/core/src/app/billing/getBillingMethodId.ts","webpack://checkout/./packages/core/src/app/billing/BillingForm.tsx","webpack://checkout/./packages/core/src/app/billing/Billing.tsx"],"sourcesContent":["import { Checkout } from '@bigcommerce/checkout-sdk';\r\n\r\nimport { getPreselectedPayment } from '../payment';\r\n\r\nexport default function getBillingMethodId(checkout: Checkout): string | undefined {\r\n    const BILLING_METHOD_IDS = ['amazonpay'];\r\n    const preselectedPayment = getPreselectedPayment(checkout);\r\n\r\n    return preselectedPayment && BILLING_METHOD_IDS.indexOf(preselectedPayment.providerId) > -1 ?\r\n        preselectedPayment.providerId :\r\n        undefined;\r\n}\r\n","import { Address, CheckoutSelectors, Country, Customer, FormField } from '@bigcommerce/checkout-sdk';\r\nimport { withFormik, FormikProps } from 'formik';\r\nimport React, { createRef, PureComponent, ReactNode, RefObject } from 'react';\r\nimport { lazy } from 'yup';\r\n\r\nimport { getAddressFormFieldsValidationSchema, getTranslateAddressError, isValidCustomerAddress, mapAddressToFormValues, AddressForm, AddressFormValues, AddressSelect } from '../address';\r\nimport { getCustomFormFieldsValidationSchema } from '../formFields';\r\nimport { withLanguage, TranslatedString, WithLanguageProps } from '../locale';\r\nimport { OrderComments } from '../orderComments';\r\nimport { Button, ButtonVariant } from '../ui/button';\r\nimport { Fieldset, Form } from '../ui/form';\r\nimport { LoadingOverlay } from '../ui/loading';\r\n\r\nimport StaticBillingAddress from './StaticBillingAddress';\r\n\r\nexport type BillingFormValues = AddressFormValues & { orderComment: string };\r\n\r\nexport interface BillingFormProps {\r\n    billingAddress?: Address;\r\n    countries: Country[];\r\n    countriesWithAutocomplete: string[];\r\n    customer: Customer;\r\n    customerMessage: string;\r\n    googleMapsApiKey: string;\r\n    isUpdating: boolean;\r\n    methodId?: string;\r\n    shouldShowOrderComments: boolean;\r\n    getFields(countryCode?: string): FormField[];\r\n    onSubmit(values: BillingFormValues): void;\r\n    onUnhandledError(error: Error): void;\r\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\r\n}\r\n\r\ninterface BillingFormState {\r\n    isResettingAddress: boolean;\r\n}\r\n\r\nclass BillingForm extends PureComponent<BillingFormProps & WithLanguageProps & FormikProps<BillingFormValues>, BillingFormState> {\r\n    state: BillingFormState = {\r\n        isResettingAddress: false,\r\n    };\r\n\r\n    private addressFormRef: RefObject<HTMLFieldSetElement> = createRef();\r\n\r\n    render(): ReactNode {\r\n        const {\r\n            googleMapsApiKey,\r\n            billingAddress,\r\n            countriesWithAutocomplete,\r\n            customer: { addresses, isGuest },\r\n            getFields,\r\n            countries,\r\n            isUpdating,\r\n            setFieldValue,\r\n            shouldShowOrderComments,\r\n            values,\r\n            methodId,\r\n        } = this.props;\r\n\r\n        const shouldRenderStaticAddress = methodId === 'amazonpay';\r\n        const allFormFields = getFields(values.countryCode);\r\n        const customFormFields = allFormFields.filter(({ custom }) => custom);\r\n        const hasCustomFormFields = customFormFields.length > 0;\r\n        const editableFormFields = shouldRenderStaticAddress && hasCustomFormFields ? customFormFields : allFormFields;\r\n        const { isResettingAddress } = this.state;\r\n        const hasAddresses = addresses && addresses.length > 0;\r\n        const hasValidCustomerAddress = billingAddress &&\r\n            isValidCustomerAddress(billingAddress, addresses, getFields(billingAddress.countryCode));\r\n\r\n        return (\r\n            <Form autoComplete=\"on\">\r\n                { shouldRenderStaticAddress && billingAddress &&\r\n                    <div className={ 'form-fieldset' }>\r\n                        <StaticBillingAddress address={ billingAddress } />\r\n                    </div> }\r\n\r\n                <Fieldset id=\"checkoutBillingAddress\" ref={ this.addressFormRef }>\r\n                    { hasAddresses && !shouldRenderStaticAddress &&\r\n                        <Fieldset id=\"billingAddresses\">\r\n                            <LoadingOverlay isLoading={ isResettingAddress }>\r\n                                <AddressSelect\r\n                                    addresses={ addresses }\r\n                                    onSelectAddress={ this.handleSelectAddress }\r\n                                    onUseNewAddress={ this.handleUseNewAddress }\r\n                                    selectedAddress={ hasValidCustomerAddress ? billingAddress : undefined }\r\n                                />\r\n                            </LoadingOverlay>\r\n                        </Fieldset> }\r\n\r\n                    { !hasValidCustomerAddress &&\r\n                        <LoadingOverlay isLoading={ isResettingAddress }>\r\n                            <AddressForm\r\n                                countries={ countries }\r\n                                countriesWithAutocomplete={ countriesWithAutocomplete }\r\n                                countryCode={ values.countryCode }\r\n                                formFields={ editableFormFields }\r\n                                googleMapsApiKey={ googleMapsApiKey }\r\n                                setFieldValue={ setFieldValue }\r\n                                shouldShowSaveAddress={ !isGuest }\r\n                            />\r\n                        </LoadingOverlay> }\r\n                </Fieldset>\r\n\r\n                { shouldShowOrderComments &&\r\n                    <OrderComments /> }\r\n\r\n                <div className=\"form-actions\">\r\n                    <Button\r\n                        disabled={ isUpdating || isResettingAddress }\r\n                        id=\"checkout-billing-continue\"\r\n                        isLoading={ isUpdating || isResettingAddress }\r\n                        type=\"submit\"\r\n                        variant={ ButtonVariant.Primary }\r\n                    >\r\n                        <TranslatedString id=\"common.continue_action\" />\r\n                    </Button>\r\n                </div>\r\n            </Form>\r\n        );\r\n    }\r\n\r\n    private handleSelectAddress: (address: Partial<Address>) => void = async address => {\r\n        const {\r\n            updateAddress,\r\n            onUnhandledError,\r\n        } = this.props;\r\n\r\n        this.setState({ isResettingAddress: true });\r\n\r\n        try {\r\n            await updateAddress(address);\r\n        } catch (e) {\r\n            onUnhandledError(e);\r\n        } finally {\r\n            this.setState({ isResettingAddress: false });\r\n        }\r\n    };\r\n\r\n    private handleUseNewAddress: () => void = () => {\r\n        this.handleSelectAddress({});\r\n    };\r\n}\r\n\r\nexport default withLanguage(withFormik<BillingFormProps & WithLanguageProps, BillingFormValues>({\r\n    handleSubmit: (values, { props: { onSubmit } }) => {\r\n        onSubmit(values);\r\n    },\r\n    mapPropsToValues: ({ getFields, customerMessage, billingAddress }) => (\r\n        {\r\n        ...mapAddressToFormValues(\r\n            getFields(billingAddress && billingAddress.countryCode),\r\n            billingAddress\r\n        ),\r\n        orderComment: customerMessage,\r\n    }),\r\n    isInitialValid: ({\r\n        billingAddress,\r\n        getFields,\r\n        language,\r\n    }) => (\r\n        !!billingAddress && getAddressFormFieldsValidationSchema({\r\n            language,\r\n            formFields: getFields(billingAddress.countryCode),\r\n        }).isValidSync(billingAddress)\r\n    ),\r\n    validationSchema: ({\r\n        language,\r\n        getFields,\r\n        methodId,\r\n    }: BillingFormProps & WithLanguageProps) => methodId === 'amazonpay' ?\r\n        (lazy<Partial<AddressFormValues>>(values => getCustomFormFieldsValidationSchema({\r\n            translate: getTranslateAddressError(language),\r\n            formFields: getFields(values && values.countryCode),\r\n        }))) :\r\n        (lazy<Partial<AddressFormValues>>(values => getAddressFormFieldsValidationSchema({\r\n            language,\r\n            formFields: getFields(values && values.countryCode),\r\n        }))),\r\n    enableReinitialize: true,\r\n})(BillingForm));\r\n","import { Address, CheckoutRequestBody, CheckoutSelectors, Country, Customer, FormField } from '@bigcommerce/checkout-sdk';\r\nimport { noop } from 'lodash';\r\nimport React, { Component, ReactNode } from 'react';\r\n\r\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\r\nimport { withCheckout, CheckoutContextProps } from '../checkout';\r\nimport { EMPTY_ARRAY } from '../common/utility';\r\nimport { TranslatedString } from '../locale';\r\nimport { getShippableItemsCount } from '../shipping';\r\nimport { Legend } from '../ui/form';\r\nimport { LoadingOverlay } from '../ui/loading';\r\n\r\nimport getBillingMethodId from './getBillingMethodId';\r\nimport BillingForm, { BillingFormValues } from './BillingForm';\r\n\r\nexport interface BillingProps {\r\n    navigateNextStep(): void;\r\n    onReady?(): void;\r\n    onUnhandledError(error: Error): void;\r\n}\r\n\r\nexport interface WithCheckoutBillingProps {\r\n    countries: Country[];\r\n    countriesWithAutocomplete: string[];\r\n    customer: Customer;\r\n    customerMessage: string;\r\n    googleMapsApiKey: string;\r\n    isInitializing: boolean;\r\n    isUpdating: boolean;\r\n    shouldShowOrderComments: boolean;\r\n    billingAddress?: Address;\r\n    methodId?: string;\r\n    getFields(countryCode?: string): FormField[];\r\n    initialize(): Promise<CheckoutSelectors>;\r\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\r\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\r\n}\r\n\r\nclass Billing extends Component<BillingProps & WithCheckoutBillingProps> {\r\n    async componentDidMount(): Promise<void> {\r\n        const {\r\n            initialize,\r\n            onReady = noop,\r\n            onUnhandledError,\r\n        } = this.props;\r\n\r\n        try {\r\n            await initialize();\r\n            onReady();\r\n        } catch (e) {\r\n            onUnhandledError(e);\r\n        }\r\n    }\r\n\r\n    render(): ReactNode {\r\n        const {\r\n            updateAddress,\r\n            isInitializing,\r\n            ...props\r\n        } = this.props;\r\n\r\n        return (\r\n            <div className=\"checkout-form\">\r\n                <div className=\"form-legend-container\">\r\n                    <Legend testId=\"billing-address-heading\">\r\n                        <TranslatedString id=\"billing.billing_address_heading\" />\r\n                    </Legend>\r\n                </div>\r\n\r\n                <LoadingOverlay\r\n                    isLoading={ isInitializing }\r\n                    unmountContentWhenLoading\r\n                >\r\n                    <BillingForm\r\n                        { ...props }\r\n                        onSubmit={ this.handleSubmit }\r\n                        updateAddress={ updateAddress }\r\n                    />\r\n                </LoadingOverlay>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private handleSubmit: (values: BillingFormValues) => void = async ({\r\n        orderComment,\r\n        ...addressValues\r\n    }) => {\r\n        const {\r\n            updateAddress,\r\n            updateCheckout,\r\n            customerMessage,\r\n            billingAddress,\r\n            navigateNextStep,\r\n            onUnhandledError,\r\n        } = this.props;\r\n\r\n        const promises: Array<Promise<CheckoutSelectors>> = [];\r\n        const address = mapAddressFromFormValues(addressValues);\r\n\r\n        if (address && !isEqualAddress(address, billingAddress)) {\r\n            promises.push(updateAddress(address));\r\n        }\r\n\r\n        if (customerMessage !== orderComment) {\r\n            promises.push(updateCheckout({ customerMessage: orderComment }));\r\n        }\r\n\r\n        try {\r\n            await Promise.all(promises);\r\n\r\n            navigateNextStep();\r\n        } catch (error) {\r\n            onUnhandledError(error);\r\n        }\r\n    };\r\n}\r\n\r\nfunction mapToBillingProps({\r\n    checkoutService,\r\n    checkoutState,\r\n}: CheckoutContextProps): WithCheckoutBillingProps | null {\r\n    const {\r\n        data: {\r\n            getCheckout,\r\n            getConfig,\r\n            getCart,\r\n            getCustomer,\r\n            getBillingAddress,\r\n            getBillingAddressFields,\r\n            getBillingCountries,\r\n        },\r\n        statuses: {\r\n            isLoadingBillingCountries,\r\n            isUpdatingBillingAddress,\r\n            isUpdatingCheckout,\r\n        },\r\n    } = checkoutState;\r\n\r\n    const config = getConfig();\r\n    const customer = getCustomer();\r\n    const checkout = getCheckout();\r\n    const cart = getCart();\r\n\r\n    if (!config || !customer || !checkout || !cart) {\r\n        return null;\r\n    }\r\n\r\n    const {\r\n        enableOrderComments,\r\n        googleMapsApiKey,\r\n        features,\r\n    } = config.checkoutSettings;\r\n\r\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ'];\r\n\r\n    if (features['CHECKOUT-4183.checkout_google_address_autocomplete_uk']) {\r\n        countriesWithAutocomplete.push('GB');\r\n    }\r\n\r\n    return {\r\n        billingAddress: getBillingAddress(),\r\n        countries: getBillingCountries() || EMPTY_ARRAY,\r\n        countriesWithAutocomplete,\r\n        customer,\r\n        customerMessage: checkout.customerMessage,\r\n        getFields: getBillingAddressFields,\r\n        googleMapsApiKey,\r\n        initialize: checkoutService.loadBillingAddressFields,\r\n        isInitializing: isLoadingBillingCountries(),\r\n        isUpdating: isUpdatingBillingAddress() || isUpdatingCheckout(),\r\n        methodId: getBillingMethodId(checkout),\r\n        shouldShowOrderComments: enableOrderComments && getShippableItemsCount(cart) < 1,\r\n        updateAddress: checkoutService.updateBillingAddress,\r\n        updateCheckout: checkoutService.updateCheckout,\r\n    };\r\n}\r\n\r\nexport default withCheckout(mapToBillingProps)(Billing);\r\n"],"names":["getBillingMethodId","checkout","preselectedPayment","getPreselectedPayment","indexOf","providerId","undefined","state","isResettingAddress","addressFormRef","createRef","handleSelectAddress","address","this","props","updateAddress","onUnhandledError","setState","handleUseNewAddress","render","googleMapsApiKey","billingAddress","countriesWithAutocomplete","customer","addresses","isGuest","getFields","countries","isUpdating","setFieldValue","shouldShowOrderComments","values","shouldRenderStaticAddress","allFormFields","countryCode","customFormFields","filter","hasCustomFormFields","length","editableFormFields","hasAddresses","hasValidCustomerAddress","isValidCustomerAddress","Form","autoComplete","className","StaticBillingAddress","Fieldset","id","ref","LoadingOverlay","isLoading","AddressSelect","onSelectAddress","onUseNewAddress","selectedAddress","AddressForm","formFields","shouldShowSaveAddress","OrderComments","Button","disabled","type","variant","TranslatedString","PureComponent","withLanguage","withFormik","handleSubmit","onSubmit","mapPropsToValues","customerMessage","mapAddressToFormValues","orderComment","isInitialValid","language","getAddressFormFieldsValidationSchema","isValidSync","validationSchema","getCustomFormFieldsValidationSchema","translate","enableReinitialize","BillingForm","addressValues","updateCheckout","navigateNextStep","promises","mapAddressFromFormValues","isEqualAddress","push","Promise","all","componentDidMount","initialize","onReady","noop","isInitializing","Legend","testId","unmountContentWhenLoading","Component","withCheckout","checkoutService","checkoutState","getCheckout","getConfig","getCart","getCustomer","getBillingAddress","getBillingAddressFields","getBillingCountries","isLoadingBillingCountries","isUpdatingBillingAddress","isUpdatingCheckout","config","cart","checkoutSettings","enableOrderComments","loadBillingAddressFields","methodId","getShippableItemsCount","updateBillingAddress","Billing"],"sourceRoot":""}
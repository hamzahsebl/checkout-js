{"version":3,"file":"shipping-dfe0e597.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/common/form/connectFormik.tsx","webpack://checkout/./packages/core/src/app/common/utility/parseAnchor.ts","webpack://checkout/./packages/core/src/app/locale/TranslatedLink.tsx","webpack://checkout/./packages/core/src/app/shipping/errors/UnassignItemError.ts","webpack://checkout/./packages/core/src/app/shipping/getShippingMethodId.ts","webpack://checkout/./packages/core/src/app/address/AddressFormModal.tsx","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemInvalidAddressError.ts","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemFailedError.ts","webpack://checkout/./packages/core/src/app/shipping/findConsignment.ts","webpack://checkout/./packages/core/src/app/shipping/getShippableLineItems.ts","webpack://checkout/./packages/core/src/app/shipping/updateShippableItems.ts","webpack://checkout/./packages/core/src/app/shipping/ItemAddressSelect.tsx","webpack://checkout/./packages/core/src/app/shipping/getRecommendedShippingOption.ts","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptionsList.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptionsForm.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptions.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingFormFooter.tsx","webpack://checkout/./packages/core/src/app/shipping/MultiShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/BillingSameAsShippingField.tsx","webpack://checkout/./packages/core/src/app/shipping/RemoteShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressForm.tsx","webpack://checkout/./packages/core/src/app/shipping/StaticAddressEditable.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressFields.ts","webpack://checkout/./packages/core/src/app/shipping/SingleShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingHeader.tsx","webpack://checkout/./packages/core/src/app/shipping/Shipping.tsx","webpack://checkout/./packages/core/src/app/ui/accordion/AccordionContext.tsx","webpack://checkout/./packages/core/src/app/ui/accordion/Accordion.tsx","webpack://checkout/./packages/core/src/app/ui/form/Checklist.tsx","webpack://checkout/./packages/core/src/app/ui/accordion/AccordionItem.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItemInput.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItem.tsx"],"sourcesContent":["import { connect } from 'formik';\r\nimport React, { memo, ComponentType, FunctionComponent } from 'react';\r\nimport shallowEqual from 'shallowequal';\r\n\r\nimport ConnectFormikProps from './ConnectFormikProps';\r\n\r\nexport default function connectFormik<\r\n    TProps extends ConnectFormikProps<TValues>,\r\n    TValues = any\r\n>(\r\n    OriginalComponent: ComponentType<TProps>\r\n): ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>> {\r\n    const InnerComponent: FunctionComponent<TProps> = memo(\r\n        props => <OriginalComponent { ...props } />,\r\n        ({ formik: prevFormik, ...prevProps }, { formik: nextFormik, ...nextProps }) => (\r\n            shallowEqual(prevFormik, nextFormik) && shallowEqual(prevProps, nextProps)\r\n        )\r\n    );\r\n\r\n    const DecoratedComponent = connect<TProps, TValues>(InnerComponent) as ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>>;\r\n\r\n    DecoratedComponent.displayName = `ConnectFormik(${OriginalComponent.displayName || OriginalComponent.name})`;\r\n\r\n    return DecoratedComponent;\r\n}\r\n","export default function parseAnchor(text: string): string[] {\r\n    const div = document.createElement('div');\r\n    div.innerHTML = text;\r\n\r\n    const anchor = div.querySelector('a');\r\n\r\n    if (!anchor) {\r\n        return [];\r\n    }\r\n\r\n    const anchorSiblings = div.innerHTML.split(anchor.outerHTML);\r\n\r\n    return [ anchorSiblings[0], anchor.text, anchorSiblings[1] ];\r\n}\r\n","import React, { FunctionComponent, MouseEventHandler } from 'react';\r\n\r\nimport { preventDefault } from '../common/dom';\r\nimport { parseAnchor } from '../common/utility';\r\n\r\nimport withLanguage, { WithLanguageProps } from './withLanguage';\r\nimport { TranslatedStringProps } from './TranslatedString';\r\n\r\nexport type TranslatedLinkProps = TranslatedStringProps & {\r\n    testId?: string;\r\n    onClick: MouseEventHandler;\r\n};\r\n\r\nconst TranslatedLink: FunctionComponent<TranslatedLinkProps & WithLanguageProps> = ({\r\n    data,\r\n    id,\r\n    language,\r\n    onClick,\r\n    testId,\r\n}) => {\r\n    const translatedString = language.translate(id, data);\r\n    const parsedString = parseAnchor(translatedString);\r\n\r\n    return parsedString.length ?\r\n        <>\r\n            { parsedString[0] }\r\n            <a\r\n                data-test={ testId }\r\n                href=\"#\"\r\n                onClick={ preventDefault(onClick) }\r\n            >\r\n                { parsedString[1] }\r\n            </a>\r\n            { parsedString[2] }\r\n        </> :\r\n        <>{ translatedString }</>;\r\n};\r\n\r\nexport default withLanguage(TranslatedLink);\r\n","import { setPrototypeOf, CustomError } from '../../common/error';\r\nimport { getLanguageService } from '../../locale';\r\n\r\nexport default class UnassignItemError extends CustomError {\r\n    constructor(data: Error) {\r\n        super({\r\n            name: 'UNASSIGN_ITEM_FAILED',\r\n            message: getLanguageService().translate('shipping.unassign_item_error'),\r\n            data,\r\n        });\r\n\r\n        setPrototypeOf(this, UnassignItemError.prototype);\r\n    }\r\n}\r\n","import { Checkout } from '@bigcommerce/checkout-sdk';\r\n\r\nimport { getPreselectedPayment } from '../payment';\r\n\r\nexport default function getShippingMethodId(checkout: Checkout): string | undefined {\r\n    const SHIPPING_METHOD_IDS = ['amazon', 'amazonpay'];\r\n    const preselectedPayment = getPreselectedPayment(checkout);\r\n\r\n    return preselectedPayment && SHIPPING_METHOD_IDS.indexOf(preselectedPayment.providerId) > -1 ?\r\n        preselectedPayment.providerId :\r\n        undefined;\r\n}\r\n","import { Country, FormField } from '@bigcommerce/checkout-sdk';\r\nimport { withFormik, FormikProps } from 'formik';\r\nimport React, { FunctionComponent } from 'react';\r\nimport { lazy } from 'yup';\r\n\r\nimport { preventDefault } from '../common/dom';\r\nimport { withLanguage, TranslatedString, WithLanguageProps } from '../locale';\r\nimport { Button, ButtonVariant } from '../ui/button';\r\nimport { Form } from '../ui/form';\r\nimport { LoadingOverlay } from '../ui/loading';\r\nimport { Modal, ModalHeader } from '../ui/modal';\r\n\r\nimport getAddressFormFieldsValidationSchema from './getAddressFormFieldsValidationSchema';\r\nimport { AddressFormValues } from './mapAddressToFormValues';\r\nimport AddressForm from './AddressForm';\r\n\r\nexport interface AddressFormModalProps extends AddressFormProps {\r\n    isOpen: boolean;\r\n    onAfterOpen?(): void;\r\n}\r\n\r\nexport interface AddressFormProps {\r\n    countries?: Country[];\r\n    countriesWithAutocomplete: string[];\r\n    googleMapsApiKey?: string;\r\n    isLoading: boolean;\r\n    shouldShowSaveAddress?: boolean;\r\n    defaultCountryCode?: string;\r\n    getFields(countryCode?: string): FormField[];\r\n    onSaveAddress(address: AddressFormValues): void;\r\n    onRequestClose?(): void;\r\n}\r\n\r\nconst SaveAddress: FunctionComponent<AddressFormProps & WithLanguageProps & FormikProps<AddressFormValues>> = ({\r\n    googleMapsApiKey,\r\n    getFields,\r\n    countriesWithAutocomplete,\r\n    countries,\r\n    values,\r\n    setFieldValue,\r\n    isLoading,\r\n    onRequestClose,\r\n}) => (\r\n    <Form autoComplete=\"on\">\r\n        <LoadingOverlay isLoading={ isLoading }>\r\n            <AddressForm\r\n                countries={ countries }\r\n                countriesWithAutocomplete={ countriesWithAutocomplete }\r\n                countryCode={ values.countryCode }\r\n                formFields={ getFields(values.countryCode) }\r\n                googleMapsApiKey={ googleMapsApiKey }\r\n                setFieldValue={ setFieldValue }\r\n                shouldShowSaveAddress={ false }\r\n            />\r\n            <div className=\"form-actions\">\r\n                <a\r\n                    className=\"button optimizedCheckout-buttonSecondary\"\r\n                    href=\"#\"\r\n                    onClick={ preventDefault(onRequestClose) }\r\n                >\r\n                    <TranslatedString id=\"common.cancel_action\" />\r\n                </a>\r\n\r\n                <Button\r\n                    disabled={ isLoading }\r\n                    id=\"checkout-save-address\"\r\n                    type=\"submit\"\r\n                    variant={ ButtonVariant.Primary }\r\n                >\r\n                    <TranslatedString id=\"address.save_address_action\" />\r\n                </Button>\r\n            </div>\r\n        </LoadingOverlay>\r\n    </Form>\r\n);\r\n\r\nconst SaveAddressForm = withLanguage(withFormik<AddressFormProps & WithLanguageProps, AddressFormValues>({\r\n    handleSubmit: (values, { props: { onSaveAddress } }) => {\r\n        onSaveAddress(values);\r\n    },\r\n    mapPropsToValues: ({ defaultCountryCode = '' }) => ({\r\n        firstName: '',\r\n        lastName: '',\r\n        address1: '',\r\n        address2: '',\r\n        customFields: {},\r\n        country: '',\r\n        countryCode: defaultCountryCode,\r\n        stateOrProvince: '',\r\n        stateOrProvinceCode: '',\r\n        postalCode: '',\r\n        phone: '',\r\n        city: '',\r\n        company: '',\r\n        shouldSaveAddress: false,\r\n    }),\r\n    validationSchema: ({\r\n        language,\r\n        getFields,\r\n    }: AddressFormProps & WithLanguageProps) => (\r\n        lazy<Partial<AddressFormValues>>(values => getAddressFormFieldsValidationSchema({\r\n            language,\r\n            formFields: getFields(values && values.countryCode),\r\n        }))\r\n    ),\r\n})(SaveAddress));\r\n\r\nconst AddressFormModal: FunctionComponent<AddressFormModalProps> = ({\r\n    isOpen,\r\n    onAfterOpen,\r\n    onRequestClose,\r\n    ...addressFormProps\r\n}) => (\r\n    <Modal\r\n        additionalModalClassName=\"modal--medium\"\r\n        header={\r\n            <ModalHeader>\r\n                <TranslatedString id=\"address.add_address_heading\" />\r\n            </ModalHeader>\r\n        }\r\n        isOpen={ isOpen }\r\n        onAfterOpen={ onAfterOpen }\r\n        onRequestClose={ onRequestClose }\r\n        shouldShowCloseButton={ true }\r\n    >\r\n        <SaveAddressForm\r\n            { ...addressFormProps }\r\n            onRequestClose={ onRequestClose }\r\n        />\r\n    </Modal>\r\n);\r\n\r\nexport default AddressFormModal;\r\n","import { setPrototypeOf, CustomError } from '../../common/error';\r\nimport { getLanguageService } from '../../locale';\r\n\r\nexport default class AssignItemInvalidAddressError extends CustomError {\r\n    constructor(data?: Error) {\r\n        super({\r\n            name: 'ASSIGN_ITEM_INVALID_ADDRESS',\r\n            message: getLanguageService().translate('shipping.assign_item_invalid_address_error'),\r\n            title: getLanguageService().translate('shipping.assign_item_invalid_address_error_heading'),\r\n            data,\r\n        });\r\n\r\n        setPrototypeOf(this, AssignItemInvalidAddressError.prototype);\r\n    }\r\n}\r\n","import { setPrototypeOf, CustomError } from '../../common/error';\r\nimport { getLanguageService } from '../../locale';\r\n\r\nexport default class AssignItemFailedError extends CustomError {\r\n    constructor(data: Error) {\r\n        super({\r\n            name: 'ASSIGN_ITEM_FAILED',\r\n            message: getLanguageService().translate('shipping.assign_item_error'),\r\n            data,\r\n        });\r\n\r\n        setPrototypeOf(this, AssignItemFailedError.prototype);\r\n    }\r\n}\r\n","import { Consignment } from '@bigcommerce/checkout-sdk';\r\nimport { find, includes } from 'lodash';\r\n\r\nexport default function findConsignment(\r\n    consignments: Consignment[],\r\n    itemId: string\r\n): Consignment | undefined {\r\n    return find(consignments, consignment => includes(consignment.lineItemIds, itemId));\r\n}\r\n","import { Cart, Consignment, PhysicalItem } from '@bigcommerce/checkout-sdk';\r\nimport { isNil, reduce } from 'lodash';\r\n\r\nimport findConsignment from './findConsignment';\r\nimport ShippableItem from './ShippableItem';\r\n\r\nexport default function getShippableLineItems(\r\n    cart: Cart,\r\n    consignments: Consignment[]\r\n): ShippableItem[] {\r\n    return reduce(\r\n        (cart && cart.lineItems.physicalItems) || [],\r\n        (result, item, i) => (\r\n            !item.addedByPromotion && isNil(item.parentId) ?\r\n                result.concat(...splitItem(item, consignments, i)) :\r\n                result\r\n        ),\r\n        [] as ShippableItem[]\r\n    );\r\n}\r\n\r\nfunction splitItem(\r\n    item: PhysicalItem,\r\n    consignments: Consignment[],\r\n    lineItemIndex: number\r\n): ShippableItem[] {\r\n    let splitItems: ShippableItem[] = [];\r\n    const consignment = findConsignment(consignments, item.id as string);\r\n\r\n    for (let i = 0; i < item.quantity; i++) {\r\n        splitItems = splitItems.concat({\r\n            ...item,\r\n            key: `${item.variantId}-${item.productId}-${lineItemIndex}-${i}`,\r\n            consignment,\r\n            quantity: 1,\r\n        });\r\n    }\r\n\r\n    return splitItems;\r\n}\r\n","import { Address, Cart, Consignment } from '@bigcommerce/checkout-sdk';\r\n\r\nimport { isEqualAddress } from '../address';\r\n\r\nimport findConsignment from './findConsignment';\r\nimport ShippableItem from './ShippableItem';\r\n\r\nexport interface UpdateItemParams {\r\n    updatedItemIndex: number;\r\n    address: Address;\r\n}\r\n\r\nexport default function updateShippableItems(\r\n    items: ShippableItem[],\r\n    { updatedItemIndex, address }: UpdateItemParams,\r\n    { cart, consignments }: { cart?: Cart; consignments?: Consignment[] }\r\n): ShippableItem[] | undefined {\r\n    if (updatedItemIndex < 0 || updatedItemIndex >= items.length || !cart) {\r\n        return;\r\n    }\r\n\r\n    const cartItemIds = cart.lineItems.physicalItems.map(({ id }) => id);\r\n\r\n    const updatedConsignment = (consignments || []).find(consignment =>\r\n        isEqualAddress(consignment.shippingAddress, address)\r\n    );\r\n\r\n    const newId = findNewItemId(items[updatedItemIndex], cart, updatedConsignment);\r\n\r\n    return items.map((item, i) => {\r\n        if (newId && !cartItemIds.includes(item.id) || i === updatedItemIndex) {\r\n            const itemId = newId ?? item.id;\r\n\r\n            return {\r\n                ...item,\r\n                id: itemId,\r\n                consignment: findConsignment(consignments || [], itemId as string),\r\n            };\r\n        } else {\r\n            return item;\r\n        }\r\n    });\r\n}\r\n\r\nfunction findNewItemId(item: ShippableItem, cart?: Cart, consignment?: Consignment): string | undefined {\r\n    if (!cart || !consignment) {\r\n        return;\r\n    }\r\n\r\n    const { physicalItems } = cart.lineItems;\r\n    const matchingCartItems = physicalItems.filter(\r\n        ({ productId, variantId }) => productId === item.productId && variantId === item.variantId\r\n    );\r\n\r\n    const matchingCartItemIds = matchingCartItems.map(({ id }) => id);\r\n\r\n    return consignment.lineItemIds.find(id => matchingCartItemIds.includes(id));\r\n}\r\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\r\nimport React, { memo, useCallback, FunctionComponent } from 'react';\r\n\r\nimport { AddressSelect } from '../address';\r\n\r\nimport ShippableItem from './ShippableItem';\r\n\r\nexport interface ItemAddressSelectProps {\r\n    item: ShippableItem;\r\n    addresses: CustomerAddress[];\r\n    onSelectAddress(address: Address, itemId: string, itemKey: string): void;\r\n    onUseNewAddress(address: Address | undefined, itemId: string, itemKey: string): void;\r\n}\r\n\r\nconst ItemAddressSelect: FunctionComponent<ItemAddressSelectProps> = ({\r\n    item: {\r\n        id,\r\n        key,\r\n        imageUrl,\r\n        quantity,\r\n        name,\r\n        options,\r\n        consignment,\r\n    },\r\n    addresses,\r\n    onSelectAddress,\r\n    onUseNewAddress,\r\n}) => {\r\n    const handleUseNewAddress = useCallback((address: Address) => {\r\n        onUseNewAddress(address, id as string, key);\r\n    }, [\r\n        id,\r\n        onUseNewAddress,\r\n        key,\r\n    ]);\r\n\r\n    const handleSelectAddress = useCallback((address: Address) => {\r\n        onSelectAddress(address, id as string, key);\r\n    }, [\r\n        id,\r\n        key,\r\n        onSelectAddress,\r\n    ]);\r\n\r\n    return <div className=\"consignment\">\r\n        <figure className=\"consignment-product-figure\">\r\n            { imageUrl &&\r\n                <img alt={ name } src={ imageUrl } /> }\r\n        </figure>\r\n\r\n        <div className=\"consignment-product-body\">\r\n            <h5 className=\"optimizedCheckout-contentPrimary\">\r\n                { `${quantity} x ${name}` }\r\n            </h5>\r\n\r\n            { (options || []).map(({ name: optionName, value, nameId }) =>\r\n                <ul\r\n                    className=\"product-options optimizedCheckout-contentSecondary\"\r\n                    data-test=\"consigment-item-product-options\"\r\n                    key={ nameId }\r\n                >\r\n                    <li className=\"product-option\">\r\n                        { `${optionName } ${value}` }\r\n                    </li>\r\n                </ul>\r\n            ) }\r\n\r\n            <AddressSelect\r\n                addresses={ addresses }\r\n                onSelectAddress={ handleSelectAddress }\r\n                onUseNewAddress={ handleUseNewAddress }\r\n                selectedAddress={ consignment && consignment.shippingAddress }\r\n            />\r\n        </div>\r\n    </div>;\r\n};\r\n\r\nexport default memo(ItemAddressSelect);\r\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\r\n\r\nexport default function getRecommendedShippingOption(availableShippingOptions: ShippingOption[]): ShippingOption | undefined {\r\n    if (!availableShippingOptions) {\r\n        return;\r\n    }\r\n\r\n    return availableShippingOptions.find(({ isRecommended }: { isRecommended: any }) => isRecommended);\r\n}\r\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\r\nimport React, { memo, useCallback, FunctionComponent } from 'react';\r\n\r\nimport { EMPTY_ARRAY } from '../../common/utility';\r\nimport { Checklist, ChecklistItem } from '../../ui/form';\r\nimport { LoadingOverlay } from '../../ui/loading';\r\n\r\nimport StaticShippingOption from './StaticShippingOption';\r\n\r\ninterface ShippingOptionListItemProps {\r\n    consignmentId: string;\r\n    shippingOption: ShippingOption;\r\n}\r\n\r\nconst ShippingOptionListItem: FunctionComponent<ShippingOptionListItemProps> = ({\r\n    consignmentId,\r\n    shippingOption,\r\n}) => {\r\n    const renderLabel = useCallback(() => (\r\n        <div className=\"shippingOptionLabel\">\r\n            <StaticShippingOption displayAdditionalInformation={ true } method={ shippingOption } />\r\n        </div>\r\n    ), [shippingOption]);\r\n\r\n    return <ChecklistItem\r\n        htmlId={ `shippingOptionRadio-${consignmentId}-${shippingOption.id}` }\r\n        label={ renderLabel }\r\n        value={ shippingOption.id }\r\n    />;\r\n};\r\n\r\nexport interface ShippingOptionListProps {\r\n    consignmentId: string;\r\n    inputName: string;\r\n    isLoading: boolean;\r\n    selectedShippingOptionId?: string;\r\n    shippingOptions?: ShippingOption[];\r\n    onSelectedOption(consignmentId: string, shippingOptionId: string): void;\r\n}\r\n\r\nconst ShippingOptionsList: FunctionComponent<ShippingOptionListProps> = ({\r\n    consignmentId,\r\n    inputName,\r\n    isLoading,\r\n    shippingOptions = EMPTY_ARRAY,\r\n    selectedShippingOptionId,\r\n    onSelectedOption,\r\n }) => {\r\n    const handleSelect = useCallback((value: string) => {\r\n        onSelectedOption(consignmentId, value);\r\n    }, [\r\n        consignmentId,\r\n        onSelectedOption,\r\n    ]);\r\n\r\n    if (!shippingOptions.length) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <LoadingOverlay isLoading={ isLoading }>\r\n            <Checklist\r\n                aria-live=\"polite\"\r\n                defaultSelectedItemId={ selectedShippingOptionId }\r\n                name={ inputName }\r\n                onSelect={ handleSelect }\r\n            >\r\n                { shippingOptions.map(shippingOption => (\r\n                    <ShippingOptionListItem\r\n                        consignmentId={ consignmentId }\r\n                        key={ shippingOption.id }\r\n                        shippingOption={ shippingOption }\r\n                    />\r\n                )) }\r\n            </Checklist>\r\n        </LoadingOverlay>\r\n    );\r\n};\r\n\r\nexport default memo(ShippingOptionsList);\r\n","import { CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\r\nimport { withFormik, FormikProps } from 'formik';\r\nimport { noop } from 'lodash';\r\nimport React, { PureComponent, ReactNode } from 'react';\r\n\r\nimport { StaticAddress } from '../../address';\r\nimport { TranslatedString } from '../../locale';\r\nimport { LoadingOverlay } from '../../ui/loading';\r\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\r\nimport StaticConsignmentItemList from '../StaticConsignmentItemList';\r\n\r\nimport { ShippingOptionsProps, WithCheckoutShippingOptionsProps } from './ShippingOptions';\r\nimport './ShippingOptionsForm.scss';\r\nimport ShippingOptionsList from './ShippingOptionsList';\r\n\r\nexport type ShippingOptionsFormProps = ShippingOptionsProps & WithCheckoutShippingOptionsProps;\r\n\r\nclass ShippingOptionsForm extends PureComponent<ShippingOptionsFormProps & FormikProps<ShippingOptionsFormValues>> {\r\n    private unsubscribe?: () => void;\r\n\r\n    componentDidMount(): void {\r\n        const { subscribeToConsignments } = this.props;\r\n        this.unsubscribe = subscribeToConsignments(this.selectDefaultShippingOptions);\r\n    }\r\n\r\n    componentWillUnmount(): void {\r\n        if (this.unsubscribe) {\r\n            this.unsubscribe();\r\n            this.unsubscribe = undefined;\r\n        }\r\n    }\r\n\r\n    render(): ReactNode {\r\n        const {\r\n            consignments,\r\n            isMultiShippingMode,\r\n            selectShippingOption,\r\n            isLoading,\r\n            shouldShowShippingOptions,\r\n            invalidShippingMessage,\r\n            methodId,\r\n        } = this.props;\r\n\r\n        if (!consignments ||\r\n            !consignments.length ||\r\n            !shouldShowShippingOptions\r\n        ) {\r\n            return (\r\n                <LoadingOverlay isLoading={ isLoading() }>\r\n                    { this.renderNoShippingOptions(\r\n                        <TranslatedString\r\n                            id={ methodId || isMultiShippingMode ?\r\n                                'shipping.select_shipping_address_text' :\r\n                                'shipping.enter_shipping_address_text' }\r\n                        />\r\n                    ) }\r\n                </LoadingOverlay>\r\n            );\r\n        }\r\n\r\n        return <>\r\n            { consignments\r\n                .map(consignment => (\r\n                <div className=\"shippingOptions-container form-fieldset\" key={ consignment.id }>\r\n                        { isMultiShippingMode && this.renderConsignment(consignment) }\r\n\r\n                        <ShippingOptionsList\r\n                            consignmentId={ consignment.id }\r\n                            inputName={ getRadioInputName(consignment.id) }\r\n                            isLoading={ isLoading(consignment.id) }\r\n                            onSelectedOption={ selectShippingOption }\r\n                            selectedShippingOptionId={ consignment.selectedShippingOption && consignment.selectedShippingOption.id }\r\n                            shippingOptions={ consignment.availableShippingOptions }\r\n                        />\r\n\r\n                        { (!consignment.availableShippingOptions || !consignment.availableShippingOptions.length) &&\r\n                            <LoadingOverlay hideContentWhenLoading isLoading={ isLoading(consignment.id) }>\r\n                                { this.renderNoShippingOptions(invalidShippingMessage) }\r\n                            </LoadingOverlay> }\r\n                    </div>\r\n                )) }\r\n        </>;\r\n    }\r\n\r\n    private selectDefaultShippingOptions: (state: CheckoutSelectors) => void = async ({ data }) => {\r\n        const { selectShippingOption, setFieldValue } = this.props;\r\n\r\n        const consignment = (data.getConsignments() || []).find(({\r\n            selectedShippingOption,\r\n            availableShippingOptions: shippingOptions,\r\n        }) => !selectedShippingOption && shippingOptions);\r\n\r\n        if (!consignment || !consignment.availableShippingOptions) {\r\n            return;\r\n        }\r\n\r\n        const { availableShippingOptions, id } = consignment;\r\n        const recommendedOption = getRecommendedShippingOption(availableShippingOptions);\r\n        const singleShippingOption = availableShippingOptions.length === 1 && availableShippingOptions[0];\r\n        const defaultShippingOption = recommendedOption || singleShippingOption;\r\n\r\n        if (!defaultShippingOption) {\r\n            return;\r\n        }\r\n\r\n        await selectShippingOption(id, defaultShippingOption.id);\r\n        setFieldValue(`shippingOptionIds.${id}`, defaultShippingOption.id);\r\n    };\r\n\r\n    private renderNoShippingOptions(message: ReactNode): ReactNode {\r\n        return (\r\n            <div className=\"shippingOptions-panel optimizedCheckout-overlay\">\r\n                <p className=\"shippingOptions-panel-message optimizedCheckout-primaryContent\">\r\n                    { message }\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private renderConsignment(consignment: Consignment): ReactNode {\r\n        const { cart } = this.props;\r\n\r\n        return (\r\n            <div className=\"staticConsignment\">\r\n                <strong>\r\n                    <TranslatedString id=\"shipping.shipping_address_heading\" />\r\n                </strong>\r\n\r\n                <StaticAddress address={ consignment.shippingAddress } />\r\n\r\n                <StaticConsignmentItemList\r\n                    cart={ cart }\r\n                    consignment={ consignment }\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction getRadioInputName(consignmentId: string): string {\r\n    return `shippingOptionIds.${consignmentId}`;\r\n}\r\n\r\nexport interface ShippingOptionsFormValues {\r\n    shippingOptionIds: {\r\n        [shippingOptionIds: string]: string;\r\n    };\r\n}\r\n\r\nexport default withFormik<ShippingOptionsFormProps, ShippingOptionsFormValues>({\r\n    handleSubmit: noop,\r\n    mapPropsToValues({ consignments }) {\r\n        const shippingOptionIds: { [id: string]: string } = {};\r\n\r\n        (consignments || []).forEach(consignment => {\r\n            shippingOptionIds[consignment.id] = consignment.selectedShippingOption ?\r\n                consignment.selectedShippingOption.id :\r\n                '';\r\n        });\r\n\r\n        return { shippingOptionIds };\r\n    },\r\n})(ShippingOptionsForm);\r\n","import { Cart, CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\r\nimport { map, sortBy, uniq } from 'lodash';\r\nimport { createSelector } from 'reselect';\r\n\r\nimport { withCheckout, CheckoutContextProps } from '../../checkout';\r\nimport getShippableLineItems from '../getShippableLineItems';\r\nimport getShippingMethodId from '../getShippingMethodId';\r\n\r\nimport ShippingOptionsForm from './ShippingOptionsForm';\r\n\r\nexport interface ShippingOptionsProps {\r\n    isMultiShippingMode: boolean;\r\n    isUpdatingAddress?: boolean;\r\n    shouldShowShippingOptions: boolean;\r\n}\r\n\r\nexport interface WithCheckoutShippingOptionsProps {\r\n    invalidShippingMessage: string;\r\n    methodId?: string;\r\n    consignments?: Consignment[];\r\n    cart: Cart;\r\n    isSelectingShippingOption(consignmentId?: string): boolean;\r\n    subscribeToConsignments(subscriber: (state: CheckoutSelectors) => void): () => void;\r\n    selectShippingOption(consignmentId: string, optionId: string): Promise<CheckoutSelectors>;\r\n    isLoading(consignmentId?: string): boolean;\r\n}\r\n\r\nconst subscribeToConsignmentsSelector = createSelector(\r\n    ({ checkoutService }: CheckoutContextProps) => checkoutService.subscribe,\r\n    subscribe => (subscriber: (state: CheckoutSelectors) => void) => {\r\n        return subscribe(subscriber, ({ data }) => data.getConsignments());\r\n    }\r\n);\r\n\r\nconst isLoadingSelector = createSelector(\r\n    (_: CheckoutSelectors, { isUpdatingAddress }: ShippingOptionsProps) => isUpdatingAddress,\r\n    ({ statuses }: CheckoutSelectors) => statuses.isLoadingShippingOptions,\r\n    ({ statuses }: CheckoutSelectors) => statuses.isSelectingShippingOption,\r\n    ({ statuses }: CheckoutSelectors) => statuses.isUpdatingConsignment,\r\n    ({ statuses }: CheckoutSelectors) => statuses.isCreatingConsignments,\r\n    (isUpdatingAddress, isLoadingShippingOptions, isSelectingShippingOption, isUpdatingConsignment, isCreatingConsignments) => {\r\n        return (consignmentId?: string) => {\r\n            return (\r\n                isUpdatingAddress ||\r\n                isLoadingShippingOptions() ||\r\n                isSelectingShippingOption(consignmentId) ||\r\n                isUpdatingConsignment(consignmentId) ||\r\n                isCreatingConsignments()\r\n            );\r\n        };\r\n    }\r\n);\r\n\r\nconst sortConsignments = (cart: Cart, unsortedConsignments: Consignment[]): Consignment[] => {\r\n    if (unsortedConsignments.length < 2) {\r\n        return unsortedConsignments;\r\n    }\r\n    const shippableItems = getShippableLineItems(cart, unsortedConsignments);\r\n    const consignmentsOrder = uniq(map(shippableItems, 'consignment.id'));\r\n\r\n    return sortBy(unsortedConsignments, consignment => consignmentsOrder.indexOf(consignment.id));\r\n};\r\n\r\nexport function mapToShippingOptions(\r\n    { checkoutService, checkoutState }: CheckoutContextProps,\r\n    props: ShippingOptionsProps\r\n): WithCheckoutShippingOptionsProps | null {\r\n    const {\r\n        data: {\r\n            getCart,\r\n            getConsignments,\r\n            getConfig,\r\n            getCustomer,\r\n            getCheckout,\r\n        },\r\n        statuses: {\r\n            isSelectingShippingOption,\r\n        },\r\n    } = checkoutState;\r\n\r\n    const customer = getCustomer();\r\n    const cart = getCart();\r\n    const config = getConfig();\r\n    const checkout = getCheckout();\r\n\r\n    if (!config || !checkout || !customer || !cart) {\r\n        return null;\r\n    }\r\n\r\n    const consignments = sortConsignments(cart, getConsignments() ||  []);\r\n    const methodId = getShippingMethodId(checkout);\r\n    const { shippingQuoteFailedMessage } = config.checkoutSettings;\r\n\r\n    return {\r\n        cart,\r\n        consignments,\r\n        invalidShippingMessage: shippingQuoteFailedMessage,\r\n        isLoading: isLoadingSelector(checkoutState, props),\r\n        isSelectingShippingOption,\r\n        methodId,\r\n        selectShippingOption: checkoutService.selectConsignmentShippingOption,\r\n        subscribeToConsignments: subscribeToConsignmentsSelector({ checkoutService, checkoutState }),\r\n    };\r\n}\r\n\r\nexport default withCheckout(mapToShippingOptions)(ShippingOptionsForm);\r\n","import React, { PureComponent, ReactNode } from 'react';\r\n\r\nimport { TranslatedString } from '../locale';\r\nimport { OrderComments } from '../orderComments';\r\nimport { Alert, AlertType } from '../ui/alert';\r\nimport { Button, ButtonVariant } from '../ui/button';\r\nimport { Fieldset, Legend } from '../ui/form';\r\n\r\nimport { ShippingOptions } from './shippingOption';\r\n\r\nexport interface ShippingFormFooterProps {\r\n    cartHasChanged: boolean;\r\n    isMultiShippingMode: boolean;\r\n    shouldShowOrderComments: boolean;\r\n    shouldShowShippingOptions?: boolean;\r\n    shouldDisableSubmit: boolean;\r\n    isLoading: boolean;\r\n}\r\n\r\nclass ShippingFormFooter extends PureComponent<ShippingFormFooterProps> {\r\n    render(): ReactNode {\r\n        const {\r\n            cartHasChanged,\r\n            isMultiShippingMode,\r\n            shouldShowOrderComments,\r\n            shouldShowShippingOptions = true,\r\n            shouldDisableSubmit,\r\n            isLoading,\r\n        } = this.props;\r\n\r\n        return <>\r\n            <Fieldset\r\n                id=\"checkout-shipping-options\"\r\n                legend={\r\n                    <>\r\n                        <Legend>\r\n                            <TranslatedString id=\"shipping.shipping_method_label\" />\r\n                        </Legend>\r\n\r\n                        { cartHasChanged &&\r\n                            <Alert type={ AlertType.Error }>\r\n                                <strong>\r\n                                    <TranslatedString id=\"shipping.cart_change_error\" />\r\n                                </strong>\r\n                            </Alert> }\r\n                    </>\r\n                }\r\n            >\r\n                <ShippingOptions\r\n                    isMultiShippingMode={ isMultiShippingMode }\r\n                    isUpdatingAddress={ isLoading }\r\n                    shouldShowShippingOptions={ shouldShowShippingOptions }\r\n                />\r\n            </Fieldset>\r\n\r\n            { shouldShowOrderComments &&\r\n                <OrderComments /> }\r\n\r\n            <div className=\"form-actions\">\r\n                <Button\r\n                    disabled={ shouldDisableSubmit }\r\n                    id=\"checkout-shipping-continue\"\r\n                    isLoading={ isLoading }\r\n                    type=\"submit\"\r\n                    variant={ ButtonVariant.Primary }\r\n                >\r\n                    <TranslatedString id=\"common.continue_action\" />\r\n                </Button>\r\n            </div>\r\n        </>;\r\n    }\r\n}\r\n\r\nexport default ShippingFormFooter;\r\n","import { Address, AddressRequestBody, Cart, CheckoutSelectors, CheckoutStoreSelector, Consignment, ConsignmentAssignmentRequestBody, Country, CustomerAddress, FormField } from '@bigcommerce/checkout-sdk';\r\nimport { withFormik, FormikProps } from 'formik';\r\nimport React, { Fragment, PureComponent, ReactNode } from 'react';\r\n\r\nimport { isValidAddress, mapAddressFromFormValues, AddressFormModal, AddressFormValues } from '../address';\r\nimport { preventDefault } from '../common/dom';\r\nimport { ErrorModal } from '../common/error';\r\nimport { withLanguage, TranslatedLink, TranslatedString, WithLanguageProps } from '../locale';\r\nimport { Form } from '../ui/form';\r\n\r\nimport { AssignItemFailedError, AssignItemInvalidAddressError } from './errors';\r\nimport getShippableItemsCount from './getShippableItemsCount';\r\nimport getShippableLineItems from './getShippableLineItems';\r\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\r\nimport hasUnassignedLineItems from './hasUnassignedLineItems';\r\nimport updateShippableItems from './updateShippableItems';\r\nimport ItemAddressSelect from './ItemAddressSelect';\r\nimport ShippableItem from './ShippableItem';\r\nimport ShippingFormFooter from './ShippingFormFooter';\r\n\r\nexport interface MultiShippingFormProps {\r\n    addresses: CustomerAddress[];\r\n    cart: Cart;\r\n    cartHasChanged: boolean;\r\n    consignments: Consignment[];\r\n    customerMessage: string;\r\n    isGuest: boolean;\r\n    isLoading: boolean;\r\n    shouldShowOrderComments: boolean;\r\n    defaultCountryCode?: string;\r\n    countries?: Country[];\r\n    countriesWithAutocomplete: string[];\r\n    googleMapsApiKey?: string;\r\n    shouldShowAddAddressInCheckout: boolean;\r\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\r\n    onCreateAccount(): void;\r\n    createCustomerAddress(address: AddressRequestBody): void;\r\n    onSignIn(): void;\r\n    getFields(countryCode?: string): FormField[];\r\n    onSubmit(values: MultiShippingFormValues): void;\r\n    onUnhandledError(error: Error): void;\r\n    onUseNewAddress(address: Address, itemId: string): void;\r\n}\r\n\r\ninterface ShippableItemId {\r\n    key: string;\r\n    itemId: string;\r\n}\r\n\r\nexport interface MultiShippingFormState {\r\n    items: ShippableItem[];\r\n    itemAddingAddress?: ShippableItemId;\r\n    createCustomerAddressError?: Error;\r\n}\r\n\r\nclass MultiShippingForm extends PureComponent<MultiShippingFormProps & WithLanguageProps & FormikProps<MultiShippingFormValues>, MultiShippingFormState> {\r\n    static getDerivedStateFromProps(\r\n        { cart, consignments }: MultiShippingFormProps,\r\n        state: MultiShippingFormState\r\n    ) {\r\n        if (!state || !state.items || getShippableItemsCount(cart) !== state.items.length) {\r\n            return { items: getShippableLineItems(cart, consignments) };\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    state: MultiShippingFormState = { items: [] };\r\n\r\n    render(): ReactNode {\r\n        const {\r\n            addresses,\r\n            consignments,\r\n            cart,\r\n            isGuest,\r\n            onSignIn,\r\n            onCreateAccount,\r\n            cartHasChanged,\r\n            shouldShowOrderComments,\r\n            isLoading,\r\n            getFields,\r\n            defaultCountryCode,\r\n            countries,\r\n            countriesWithAutocomplete,\r\n            googleMapsApiKey,\r\n        } = this.props;\r\n\r\n        const { items, itemAddingAddress, createCustomerAddressError } = this.state;\r\n\r\n        if (isGuest) {\r\n            return (\r\n                <div className=\"checkout-step-info\">\r\n                    <TranslatedString id=\"shipping.multishipping_guest_intro\" />\r\n                    { ' ' }\r\n                    <a data-test=\"shipping-sign-in-link\" href=\"#\" onClick={ preventDefault(onSignIn) }>\r\n                        <TranslatedString id=\"shipping.multishipping_guest_sign_in\" />\r\n                    </a>\r\n                    { ' ' }\r\n                    <TranslatedLink\r\n                        id=\"shipping.multishipping_guest_create\"\r\n                        onClick={ onCreateAccount }\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Fragment>\r\n                <ErrorModal\r\n                    error={ createCustomerAddressError }\r\n                    message={\r\n                        <>\r\n                            <TranslatedString id=\"address.consignment_address_updated_text\" />\r\n                            { ' ' }\r\n                            <TranslatedString id=\"customer.create_address_error\" />\r\n                        </>\r\n                    }\r\n                    onClose={ this.handleCloseErrorModal }\r\n                    shouldShowErrorCode={ false }\r\n                />\r\n                { <AddressFormModal\r\n                    countries={ countries }\r\n                    countriesWithAutocomplete={ countriesWithAutocomplete }\r\n                    defaultCountryCode={ defaultCountryCode }\r\n                    getFields={ getFields }\r\n                    googleMapsApiKey={ googleMapsApiKey }\r\n                    isLoading={ isLoading }\r\n                    isOpen={ !!itemAddingAddress }\r\n                    onRequestClose={ this.handleCloseAddAddressForm }\r\n                    onSaveAddress={ this.handleSaveAddress }\r\n                /> }\r\n\r\n                <Form>\r\n                    <ul className=\"consignmentList\">\r\n                        { items.map(item => (\r\n                            <li key={ item.key }>\r\n                                <ItemAddressSelect\r\n                                    addresses={ addresses }\r\n                                    item={ item }\r\n                                    onSelectAddress={ this.handleSelectAddress }\r\n                                    onUseNewAddress={ this.handleUseNewAddress }\r\n                                />\r\n                            </li>\r\n                        )) }\r\n                    </ul>\r\n\r\n                    <ShippingFormFooter\r\n                        cartHasChanged={ cartHasChanged }\r\n                        isLoading={ isLoading }\r\n                        isMultiShippingMode={ true }\r\n                        shouldDisableSubmit={ this.shouldDisableSubmit() }\r\n                        shouldShowOrderComments={ shouldShowOrderComments }\r\n                        shouldShowShippingOptions={ !hasUnassignedLineItems(consignments, cart.lineItems) }\r\n                    />\r\n                </Form>\r\n            </Fragment>\r\n        );\r\n    }\r\n\r\n    private handleCloseErrorModal: () => void = () => {\r\n        this.setState({ createCustomerAddressError: undefined });\r\n    };\r\n\r\n    private handleSaveAddress: (address: AddressFormValues) => void = async address => {\r\n        const { createCustomerAddress } = this.props;\r\n        const { itemAddingAddress } = this.state;\r\n\r\n        if (!itemAddingAddress) {\r\n            return;\r\n        }\r\n\r\n        const shippingAddress = mapAddressFromFormValues(address);\r\n\r\n        await this.handleSelectAddress(shippingAddress, itemAddingAddress.itemId, itemAddingAddress.key);\r\n\r\n        try {\r\n            await createCustomerAddress(shippingAddress);\r\n        } catch (e) {\r\n            this.setState({ createCustomerAddressError: e });\r\n        }\r\n\r\n        this.setState({\r\n            itemAddingAddress: undefined,\r\n        });\r\n    };\r\n\r\n    private handleUseNewAddress: (address: Address, itemId: string, itemKey: string) => void = (address, itemId, itemKey) => {\r\n        const { onUseNewAddress, shouldShowAddAddressInCheckout } = this.props;\r\n\r\n        if (!shouldShowAddAddressInCheckout) {\r\n            onUseNewAddress(address, itemId);\r\n\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            itemAddingAddress: {\r\n                key: itemKey,\r\n                itemId,\r\n            },\r\n        });\r\n    };\r\n\r\n    private handleCloseAddAddressForm: () => void = () => {\r\n        this.setState({\r\n            itemAddingAddress: undefined,\r\n        });\r\n    };\r\n\r\n    private handleSelectAddress: (address: Address, itemId: string, itemKey: string) => Promise<void> = async (address, itemId, itemKey) => {\r\n        const {\r\n            assignItem,\r\n            onUnhandledError,\r\n            getFields,\r\n        } = this.props;\r\n\r\n        if (!isValidAddress(address, getFields(address.countryCode))) {\r\n            return onUnhandledError(new AssignItemInvalidAddressError());\r\n        }\r\n\r\n        try {\r\n            const { data } = await assignItem({\r\n                address,\r\n                lineItems: [{\r\n                    itemId,\r\n                    quantity: 1,\r\n                }],\r\n            });\r\n\r\n            this.syncItems(itemKey, address, data);\r\n        } catch (e) {\r\n            onUnhandledError(new AssignItemFailedError(e));\r\n        }\r\n    };\r\n\r\n    private shouldDisableSubmit: () => boolean = () => {\r\n        const { isLoading, consignments } = this.props;\r\n\r\n        return isLoading || !hasSelectedShippingOptions(consignments);\r\n    };\r\n\r\n    private syncItems: (\r\n        key: string,\r\n        address: Address,\r\n        data: CheckoutStoreSelector\r\n    ) => void = (key, address, data) => {\r\n        const { items: currentItems } = this.state;\r\n        const items = updateShippableItems(\r\n            currentItems,\r\n            {\r\n                updatedItemIndex: currentItems.findIndex(item => item.key === key),\r\n                address,\r\n            },\r\n            {\r\n                cart: data.getCart(),\r\n                consignments: data.getConsignments(),\r\n            }\r\n        );\r\n\r\n        if (items) {\r\n            this.setState({ items });\r\n        }\r\n    };\r\n}\r\n\r\nexport interface MultiShippingFormValues {\r\n    orderComment: string;\r\n}\r\n\r\nexport default withLanguage(withFormik<MultiShippingFormProps & WithLanguageProps, MultiShippingFormValues>({\r\n    handleSubmit: (values, { props: { onSubmit } }) => {\r\n        onSubmit(values);\r\n    },\r\n    mapPropsToValues: ({ customerMessage }) => ({\r\n        orderComment: customerMessage,\r\n    }),\r\n    enableReinitialize: true,\r\n})(MultiShippingForm));\r\n","import React, { memo, useMemo, FunctionComponent } from 'react';\r\n\r\nimport { TranslatedString } from '../locale';\r\nimport { CheckboxFormField } from '../ui/form';\r\n\r\nexport interface BillingSameAsShippingFieldProps {\r\n    onChange?(isChecked: boolean): void;\r\n}\r\n\r\nconst BillingSameAsShippingField: FunctionComponent<BillingSameAsShippingFieldProps>  = ({\r\n    onChange,\r\n}) => {\r\n    const labelContent = useMemo(() => (\r\n        <TranslatedString id=\"billing.use_shipping_address_label\" />\r\n    ), []);\r\n\r\n    return <CheckboxFormField\r\n        id=\"sameAsBilling\"\r\n        labelContent={ labelContent }\r\n        name=\"billingSameAsShipping\"\r\n        onChange={ onChange }\r\n    />;\r\n};\r\n\r\nexport default memo(BillingSameAsShippingField);\r\n","import { CheckoutSelectors, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\r\nimport { noop } from 'lodash';\r\nimport React, { PureComponent, ReactNode } from 'react';\r\n\r\nimport { DynamicFormField, Fieldset } from '../ui/form';\r\n\r\nexport interface RemoteShippingAddressProps {\r\n    containerId: string;\r\n    methodId: string;\r\n    formFields: FormField[];\r\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\r\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\r\n    onUnhandledError?(error: Error): void;\r\n    onFieldChange(fieldName: string, value: string): void;\r\n}\r\n\r\nclass RemoteShippingAddress extends PureComponent<RemoteShippingAddressProps> {\r\n    async componentDidMount(): Promise<void> {\r\n        const {\r\n            initialize,\r\n            methodId,\r\n            onUnhandledError = noop,\r\n        } = this.props;\r\n\r\n        try {\r\n            await initialize({ methodId });\r\n        } catch (error) {\r\n            onUnhandledError(error);\r\n        }\r\n    }\r\n\r\n    async componentWillUnmount(): Promise<void> {\r\n        const {\r\n            deinitialize,\r\n            methodId,\r\n            onUnhandledError = noop,\r\n        } = this.props;\r\n\r\n        try {\r\n            await deinitialize({ methodId });\r\n        } catch (error) {\r\n            onUnhandledError(error);\r\n        }\r\n    }\r\n\r\n    render(): ReactNode {\r\n        const {\r\n            containerId,\r\n            formFields,\r\n            methodId,\r\n        } = this.props;\r\n\r\n        return (\r\n            <>\r\n                <div\r\n                    className={ `widget address-widget widget--${methodId}` }\r\n                    id={ containerId }\r\n                    tabIndex={ -1 }\r\n                />\r\n                <Fieldset>\r\n                {\r\n                    formFields.filter(({ custom }) => custom).map(field => (\r\n                        <DynamicFormField\r\n                            field={ field }\r\n                            key={ `${field.id}-${field.name}` }\r\n                            onChange={ this.handleFieldValueChange(field.name) }\r\n                            parentFieldName=\"shippingAddress.customFields\"\r\n                        />\r\n                    ))\r\n                }\r\n                </Fieldset>\r\n            </>\r\n        );\r\n    }\r\n\r\n    private handleFieldValueChange: (name: string) => (value: string) => void = name => value => {\r\n        const { onFieldChange } = this.props;\r\n        onFieldChange(name, value);\r\n    };\r\n}\r\n\r\nexport default RemoteShippingAddress;\r\n","import { Address, Consignment, Country, CustomerAddress, FormField } from '@bigcommerce/checkout-sdk';\r\nimport React, { Component, ReactNode } from 'react';\r\n\r\nimport {  isValidCustomerAddress, AddressForm, AddressSelect } from '../address';\r\nimport { connectFormik, ConnectFormikProps } from '../common/form';\r\nimport { Fieldset } from '../ui/form';\r\nimport { LoadingOverlay } from '../ui/loading';\r\n\r\nimport { SingleShippingFormValues } from './SingleShippingForm';\r\n\r\nexport interface ShippingAddressFormProps {\r\n    addresses: CustomerAddress[];\r\n    address?: Address;\r\n    consignments: Consignment[];\r\n    countries?: Country[];\r\n    countriesWithAutocomplete: string[];\r\n    googleMapsApiKey?: string;\r\n    isLoading: boolean;\r\n    formFields: FormField[];\r\n    shouldShowSaveAddress?: boolean;\r\n    onUseNewAddress(): void;\r\n    onFieldChange(fieldName: string, value: string): void;\r\n    onAddressSelect(address: Address): void;\r\n}\r\n\r\nconst addressFieldName = 'shippingAddress';\r\n\r\nclass ShippingAddressForm extends Component<ShippingAddressFormProps & ConnectFormikProps<SingleShippingFormValues>> {\r\n    render(): ReactNode {\r\n        const {\r\n            addresses,\r\n            address: shippingAddress,\r\n            onAddressSelect,\r\n            onUseNewAddress,\r\n            shouldShowSaveAddress,\r\n            countries,\r\n            countriesWithAutocomplete,\r\n            formFields,\r\n            isLoading,\r\n            googleMapsApiKey,\r\n            formik: {\r\n                values: {\r\n                    shippingAddress: formAddress,\r\n                },\r\n            },\r\n        } = this.props;\r\n\r\n        const hasAddresses = addresses && addresses.length > 0;\r\n        const hasValidCustomerAddress = isValidCustomerAddress(shippingAddress, addresses, formFields);\r\n\r\n        return (\r\n            <Fieldset id=\"checkoutShippingAddress\">\r\n                { hasAddresses &&\r\n                    <Fieldset id=\"shippingAddresses\">\r\n                        <LoadingOverlay isLoading={ isLoading }>\r\n                            <AddressSelect\r\n                                addresses={ addresses }\r\n                                onSelectAddress={ onAddressSelect }\r\n                                onUseNewAddress={ onUseNewAddress }\r\n                                selectedAddress={ hasValidCustomerAddress ? shippingAddress : undefined }\r\n                            />\r\n                        </LoadingOverlay>\r\n                    </Fieldset> }\r\n\r\n                { !hasValidCustomerAddress &&\r\n                    <LoadingOverlay isLoading={ isLoading } unmountContentWhenLoading>\r\n                        <AddressForm\r\n                            countries={ countries }\r\n                            countriesWithAutocomplete={ countriesWithAutocomplete }\r\n                            countryCode={ formAddress && formAddress.countryCode }\r\n                            fieldName={ addressFieldName }\r\n                            formFields={ formFields }\r\n                            googleMapsApiKey={ googleMapsApiKey }\r\n                            onAutocompleteToggle={ this.handleAutocompleteToggle }\r\n                            onChange={ this.handleChange }\r\n                            setFieldValue={ this.setFieldValue }\r\n                            shouldShowSaveAddress={ shouldShowSaveAddress }\r\n                        />\r\n                    </LoadingOverlay> }\r\n            </Fieldset>\r\n        );\r\n    }\r\n\r\n    private setFieldValue: (fieldName: string, fieldValue: string) => void = (fieldName, fieldValue) => {\r\n        const {\r\n            formik: { setFieldValue },\r\n            formFields,\r\n        } = this.props;\r\n\r\n        const customFormFieldNames = formFields\r\n            .filter(field => field.custom)\r\n            .map(field => field.name);\r\n\r\n        const formFieldName = customFormFieldNames.includes(fieldName) ?\r\n            `customFields.${fieldName}` :\r\n            fieldName;\r\n\r\n        setFieldValue(`${addressFieldName}.${formFieldName}`, fieldValue);\r\n    };\r\n\r\n    private handleChange: (fieldName: string, value: string) => void = (fieldName, value) => {\r\n        const {\r\n            onFieldChange,\r\n        } = this.props;\r\n\r\n        onFieldChange(fieldName, value);\r\n    };\r\n\r\n    private handleAutocompleteToggle: (state: { inputValue: string; isOpen: boolean }) => void = ({ isOpen, inputValue }) => {\r\n        const { onFieldChange } = this.props;\r\n\r\n        if (!isOpen) {\r\n            onFieldChange('address1', inputValue);\r\n        }\r\n    };\r\n}\r\n\r\nexport default connectFormik(ShippingAddressForm);\r\n","import { Address, CheckoutSelectors, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\r\nimport { noop } from 'lodash';\r\nimport React, { PureComponent, ReactNode } from 'react';\r\n\r\nimport { StaticAddress } from '../address/';\r\nimport { preventDefault } from '../common/dom';\r\nimport { TranslatedString } from '../locale';\r\nimport { Button, ButtonSize, ButtonVariant } from '../ui/button';\r\nimport { DynamicFormField, Fieldset } from '../ui/form';\r\nimport { LoadingOverlay } from '../ui/loading';\r\n\r\nimport './StaticAddressEditable.scss';\r\n\r\nexport interface StaticAddressEditableProps {\r\n    address: Address;\r\n    buttonId: string;\r\n    formFields: FormField[];\r\n    isLoading: boolean;\r\n    methodId?: string;\r\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\r\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\r\n    onFieldChange(fieldName: string, value: string): void;\r\n    onUnhandledError?(error: Error): void;\r\n}\r\n\r\nclass StaticAddressEditable extends PureComponent<StaticAddressEditableProps> {\r\n    async componentDidMount(): Promise<void> {\r\n        const {\r\n            initialize,\r\n            methodId,\r\n            onUnhandledError = noop,\r\n        } = this.props;\r\n\r\n        try {\r\n            await initialize({ methodId });\r\n        } catch (error) {\r\n            onUnhandledError(error);\r\n        }\r\n    }\r\n\r\n    async componentWillUnmount(): Promise<void> {\r\n        const {\r\n            deinitialize,\r\n            methodId,\r\n            onUnhandledError = noop,\r\n        } = this.props;\r\n\r\n        try {\r\n            await deinitialize({ methodId });\r\n        } catch (error) {\r\n            onUnhandledError(error);\r\n        }\r\n    }\r\n\r\n    render(): ReactNode {\r\n        const {\r\n            address,\r\n            buttonId,\r\n            formFields,\r\n            isLoading,\r\n        } = this.props;\r\n\r\n        const customFormFields = formFields.filter(({ custom }) => custom);\r\n        const shouldShowCustomFormFields = customFormFields.length > 0;\r\n\r\n        return (\r\n            <LoadingOverlay isLoading={ isLoading }>\r\n                <div className=\"stepHeader\" style={ { padding: 0 } }>\r\n                    <div className=\"stepHeader-body subheader\">\r\n                        <StaticAddress\r\n                            address={ address }\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"stepHeader-actions subheader\">\r\n                        <Button\r\n                            id={ buttonId }\r\n                            onClick={ preventDefault() }\r\n                            size={ ButtonSize.Tiny }\r\n                            testId=\"step-edit-button\"\r\n                            variant={ ButtonVariant.Secondary }\r\n                        >\r\n                            <TranslatedString id=\"common.edit_action\" />\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n\r\n                { shouldShowCustomFormFields && <Fieldset id=\"customFieldset\">\r\n                    {\r\n                        customFormFields.map(field => (\r\n                            <DynamicFormField\r\n                                field={ field }\r\n                                key={ `${field.id}-${field.name}` }\r\n                                onChange={ this.handleFieldValueChange(field.name) }\r\n                                parentFieldName=\"shippingAddress.customFields\"\r\n                            />\r\n                        ))\r\n                    }\r\n                </Fieldset> }\r\n            </LoadingOverlay>\r\n        );\r\n    }\r\n\r\n    private handleFieldValueChange: (name: string) => (value: string) => void = name => value => {\r\n        const { onFieldChange } = this.props;\r\n        onFieldChange(name, value);\r\n    };\r\n}\r\n\r\nexport default StaticAddressEditable;\r\n","import { Address, CheckoutSelectors, Consignment, Country, CustomerAddress, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\r\nimport { memoizeOne } from '@bigcommerce/memoize';\r\nimport { noop } from 'lodash';\r\nimport React, { memo, useCallback, useContext, FunctionComponent } from 'react';\r\n\r\nimport { FormContext } from '../ui/form';\r\n\r\nimport RemoteShippingAddress from './RemoteShippingAddress';\r\nimport ShippingAddressForm from './ShippingAddressForm';\r\nimport StaticAddressEditable from './StaticAddressEditable';\r\n\r\nexport interface ShippingAddressProps {\r\n    addresses: CustomerAddress[];\r\n    consignments: Consignment[];\r\n    countries?: Country[];\r\n    countriesWithAutocomplete: string[];\r\n    formFields: FormField[];\r\n    googleMapsApiKey?: string;\r\n    isLoading: boolean;\r\n    isShippingStepPending: boolean;\r\n    methodId?: string;\r\n    shippingAddress?: Address;\r\n    shouldShowSaveAddress?: boolean;\r\n    hasRequestedShippingOptions: boolean;\r\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\r\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\r\n    onAddressSelect(address: Address): void;\r\n    onFieldChange(name: string, value: string): void;\r\n    onUnhandledError?(error: Error): void;\r\n    onUseNewAddress(): void;\r\n}\r\n\r\nconst ShippingAddress: FunctionComponent<ShippingAddressProps> = props => {\r\n    const {\r\n        methodId,\r\n        formFields,\r\n        countries,\r\n        countriesWithAutocomplete,\r\n        consignments,\r\n        googleMapsApiKey,\r\n        onAddressSelect,\r\n        onFieldChange,\r\n        onUseNewAddress,\r\n        initialize,\r\n        deinitialize,\r\n        isLoading,\r\n        shippingAddress,\r\n        hasRequestedShippingOptions,\r\n        addresses,\r\n        shouldShowSaveAddress,\r\n        onUnhandledError = noop,\r\n        isShippingStepPending,\r\n    } = props;\r\n\r\n    const { setSubmitted } = useContext(FormContext);\r\n\r\n    const initializeShipping = useCallback(memoizeOne((defaultOptions: ShippingInitializeOptions) => (\r\n        (options?: ShippingInitializeOptions) => initialize({\r\n            ...defaultOptions,\r\n            ...options,\r\n        })\r\n    )), []);\r\n\r\n    const handleFieldChange: (fieldName: string, value: string) => void = (fieldName, value) => {\r\n        if (hasRequestedShippingOptions) {\r\n            setSubmitted(true);\r\n        }\r\n\r\n        onFieldChange(fieldName, value);\r\n    };\r\n\r\n    if (methodId) {\r\n        const containerId = 'addressWidget';\r\n        let options: ShippingInitializeOptions = {};\r\n\r\n        if (methodId === 'amazon') {\r\n            options = {\r\n                amazon: {\r\n                    container: containerId,\r\n                    onError: onUnhandledError,\r\n                },\r\n            };\r\n\r\n            return (\r\n                <RemoteShippingAddress\r\n                    containerId={ containerId }\r\n                    deinitialize={ deinitialize }\r\n                    formFields={ formFields }\r\n                    initialize={ initializeShipping(options) }\r\n                    methodId={ methodId }\r\n                    onFieldChange={ onFieldChange }\r\n                />\r\n            );\r\n        }\r\n\r\n        if (methodId === 'amazonpay' && shippingAddress) {\r\n            const editAddressButtonId = 'edit-ship-button';\r\n\r\n            options = {\r\n                amazonpay: {\r\n                    editAddressButtonId,\r\n                },\r\n            };\r\n\r\n            return (\r\n                <StaticAddressEditable\r\n                    address={ shippingAddress }\r\n                    buttonId={ editAddressButtonId }\r\n                    deinitialize={ deinitialize }\r\n                    formFields={ formFields }\r\n                    initialize={ initializeShipping(options) }\r\n                    isLoading={ isShippingStepPending }\r\n                    methodId={ methodId }\r\n                    onFieldChange={ onFieldChange }\r\n                />\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <ShippingAddressForm\r\n            address={ shippingAddress }\r\n            addresses={ addresses }\r\n            consignments={ consignments }\r\n            countries={ countries }\r\n            countriesWithAutocomplete={ countriesWithAutocomplete }\r\n            formFields={ formFields }\r\n            googleMapsApiKey={ googleMapsApiKey }\r\n            isLoading={ isLoading }\r\n            onAddressSelect={ onAddressSelect }\r\n            onFieldChange={ handleFieldChange }\r\n            onUseNewAddress={ onUseNewAddress }\r\n            shouldShowSaveAddress={ shouldShowSaveAddress }\r\n        />\r\n    );\r\n};\r\n\r\nexport default memo(ShippingAddress);\r\n","export const SHIPPING_ADDRESS_FIELDS = [\r\n    'address1',\r\n    'postalCode',\r\n    'countryCode',\r\n    'city',\r\n    'stateOrProvince',\r\n    'stateOrProvinceCode',\r\n];\r\n","import { Address, CheckoutParams, CheckoutSelectors, Consignment, Country, CustomerAddress, CustomerRequestOptions, FormField, RequestOptions, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\r\nimport { withFormik, FormikProps } from 'formik';\r\nimport { debounce, noop } from 'lodash';\r\nimport React, { PureComponent, ReactNode } from 'react';\r\nimport { lazy, object } from 'yup';\r\n\r\nimport { getAddressFormFieldsValidationSchema, getTranslateAddressError, isEqualAddress, mapAddressFromFormValues, mapAddressToFormValues, AddressFormValues } from '../address';\r\nimport { getCustomFormFieldsValidationSchema } from '../formFields';\r\nimport { withLanguage, WithLanguageProps } from '../locale';\r\nimport { Fieldset, Form, FormContext } from '../ui/form';\r\n\r\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\r\nimport BillingSameAsShippingField from './BillingSameAsShippingField';\r\nimport ShippingAddress from './ShippingAddress';\r\nimport { SHIPPING_ADDRESS_FIELDS } from './ShippingAddressFields';\r\nimport ShippingFormFooter from './ShippingFormFooter';\r\n\r\nexport interface SingleShippingFormProps {\r\n    addresses: CustomerAddress[];\r\n    isBillingSameAsShipping: boolean;\r\n    cartHasChanged: boolean;\r\n    consignments: Consignment[];\r\n    countries: Country[];\r\n    countriesWithAutocomplete: string[];\r\n    customerMessage: string;\r\n    googleMapsApiKey?: string;\r\n    isLoading: boolean;\r\n    isShippingStepPending: boolean;\r\n    isMultiShippingMode: boolean;\r\n    methodId?: string;\r\n    shippingAddress?: Address;\r\n    shouldShowSaveAddress?: boolean;\r\n    shouldShowOrderComments: boolean;\r\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\r\n    deleteConsignments(): Promise<Address | undefined>;\r\n    getFields(countryCode?: string): FormField[];\r\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\r\n    onSubmit(values: SingleShippingFormValues): void;\r\n    onUnhandledError?(error: Error): void;\r\n    signOut(options?: CustomerRequestOptions): void;\r\n    updateAddress(address: Partial<Address>, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors>;\r\n}\r\n\r\nexport interface SingleShippingFormValues {\r\n    billingSameAsShipping: boolean;\r\n    shippingAddress?: AddressFormValues;\r\n    orderComment: string;\r\n}\r\n\r\ninterface SingleShippingFormState {\r\n    isResettingAddress: boolean;\r\n    isUpdatingShippingData: boolean;\r\n    hasRequestedShippingOptions: boolean;\r\n}\r\n\r\nexport const SHIPPING_AUTOSAVE_DELAY = 1700;\r\n\r\nclass SingleShippingForm extends PureComponent<SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>> {\r\n    static contextType = FormContext;\r\n\r\n    state: SingleShippingFormState = {\r\n        isResettingAddress: false,\r\n        isUpdatingShippingData: false,\r\n        hasRequestedShippingOptions: false,\r\n    };\r\n\r\n    private debouncedUpdateAddress: any;\r\n\r\n    constructor(props: SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>) {\r\n        super(props);\r\n\r\n        const { updateAddress } = this.props;\r\n\r\n        this.debouncedUpdateAddress = debounce(async (address: Address, includeShippingOptions: boolean) => {\r\n            try {\r\n                await updateAddress(address, {\r\n                    params: {\r\n                        include: {\r\n                            'consignments.availableShippingOptions': includeShippingOptions,\r\n                        },\r\n                    },\r\n                });\r\n                if (includeShippingOptions) {\r\n                    this.setState({ hasRequestedShippingOptions: true });\r\n                }\r\n            } finally {\r\n                this.setState({ isUpdatingShippingData: false });\r\n            }\r\n        }, SHIPPING_AUTOSAVE_DELAY);\r\n    }\r\n\r\n    render(): ReactNode {\r\n        const {\r\n            addresses,\r\n            cartHasChanged,\r\n            isLoading,\r\n            onUnhandledError,\r\n            methodId,\r\n            shouldShowSaveAddress,\r\n            countries,\r\n            countriesWithAutocomplete,\r\n            googleMapsApiKey,\r\n            shippingAddress,\r\n            consignments,\r\n            shouldShowOrderComments,\r\n            initialize,\r\n            isValid,\r\n            deinitialize,\r\n            values: { shippingAddress: addressForm },\r\n            isShippingStepPending,\r\n        } = this.props;\r\n\r\n        const {\r\n            isResettingAddress,\r\n            isUpdatingShippingData,\r\n            hasRequestedShippingOptions,\r\n        } = this.state;\r\n\r\n        const PAYMENT_METHOD_VALID = ['amazon', 'amazonpay'];\r\n        const shouldShowBillingSameAsShipping = !PAYMENT_METHOD_VALID.some(method => method === methodId);\r\n\r\n        return (\r\n            <Form autoComplete=\"on\">\r\n                <Fieldset>\r\n                    <ShippingAddress\r\n                        addresses={ addresses }\r\n                        consignments={ consignments }\r\n                        countries={ countries }\r\n                        countriesWithAutocomplete={ countriesWithAutocomplete }\r\n                        deinitialize={ deinitialize }\r\n                        formFields={ this.getFields(addressForm && addressForm.countryCode) }\r\n                        googleMapsApiKey={ googleMapsApiKey }\r\n                        hasRequestedShippingOptions={ hasRequestedShippingOptions }\r\n                        initialize={ initialize }\r\n                        isLoading={ isResettingAddress }\r\n                        isShippingStepPending={ isShippingStepPending }\r\n                        methodId={ methodId }\r\n                        onAddressSelect={ this.handleAddressSelect }\r\n                        onFieldChange={ this.handleFieldChange }\r\n                        onUnhandledError={ onUnhandledError }\r\n                        onUseNewAddress={ this.onUseNewAddress }\r\n                        shippingAddress={ shippingAddress }\r\n                        shouldShowSaveAddress={ shouldShowSaveAddress }\r\n                    />\r\n                    {\r\n                        shouldShowBillingSameAsShipping && <div className=\"form-body\">\r\n                            <BillingSameAsShippingField />\r\n                        </div>\r\n                    }\r\n                </Fieldset>\r\n\r\n                <ShippingFormFooter\r\n                    cartHasChanged={ cartHasChanged }\r\n                    isLoading={ isLoading || isUpdatingShippingData }\r\n                    isMultiShippingMode={ false }\r\n                    shouldDisableSubmit={ this.shouldDisableSubmit() }\r\n                    shouldShowOrderComments={ shouldShowOrderComments }\r\n                    shouldShowShippingOptions={ isValid }\r\n                />\r\n            </Form>\r\n        );\r\n    }\r\n\r\n    private shouldDisableSubmit: () => boolean = () => {\r\n        const {\r\n            isLoading,\r\n            consignments,\r\n            isValid,\r\n        } = this.props;\r\n\r\n        const {\r\n            isUpdatingShippingData,\r\n        } = this.state;\r\n\r\n        if (!isValid) {\r\n            return false;\r\n        }\r\n\r\n        return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\r\n    };\r\n\r\n    private handleFieldChange: (name: string) => void = async name => {\r\n        const {\r\n            setFieldValue,\r\n        } = this.props;\r\n\r\n        if (name === 'countryCode') {\r\n            setFieldValue('shippingAddress.stateOrProvince', '');\r\n            setFieldValue('shippingAddress.stateOrProvinceCode', '');\r\n        }\r\n\r\n        // Enqueue the following code to run after Formik has run validation\r\n        await new Promise(resolve => setTimeout(resolve));\r\n\r\n        const isShippingField = SHIPPING_ADDRESS_FIELDS.includes(name);\r\n\r\n        const { hasRequestedShippingOptions } = this.state;\r\n\r\n        const { isValid } = this.props;\r\n\r\n        if (!isValid) {\r\n            return;\r\n        }\r\n\r\n        this.updateAddressWithFormData(isShippingField || !hasRequestedShippingOptions);\r\n    };\r\n\r\n    private updateAddressWithFormData(includeShippingOptions: boolean) {\r\n        const {\r\n            shippingAddress,\r\n            values: { shippingAddress: addressForm },\r\n        } = this.props;\r\n\r\n        const updatedShippingAddress = addressForm && mapAddressFromFormValues(addressForm);\r\n\r\n        if (!updatedShippingAddress || isEqualAddress(updatedShippingAddress, shippingAddress)) {\r\n            return;\r\n        }\r\n\r\n        this.setState({ isUpdatingShippingData: true });\r\n        this.debouncedUpdateAddress(updatedShippingAddress, includeShippingOptions);\r\n    }\r\n\r\n    private handleAddressSelect: (\r\n        address: Address\r\n    ) => void = async address => {\r\n        const {\r\n            updateAddress,\r\n            onUnhandledError = noop,\r\n            values,\r\n            setValues,\r\n        } = this.props;\r\n\r\n        this.setState({ isResettingAddress: true });\r\n\r\n        try {\r\n            await updateAddress(address);\r\n\r\n            setValues({\r\n                ...values,\r\n                shippingAddress: mapAddressToFormValues(\r\n                    this.getFields(address.countryCode),\r\n                    address\r\n                ),\r\n            });\r\n        } catch (error) {\r\n            onUnhandledError(error);\r\n        } finally {\r\n            this.setState({ isResettingAddress: false });\r\n        }\r\n    };\r\n\r\n    private onUseNewAddress: () => void = async () => {\r\n        const {\r\n            deleteConsignments,\r\n            onUnhandledError = noop,\r\n            setValues,\r\n            values,\r\n        } = this.props;\r\n\r\n        this.setState({ isResettingAddress: true });\r\n\r\n        try {\r\n            const address = await deleteConsignments();\r\n            setValues({\r\n                ...values,\r\n                shippingAddress: mapAddressToFormValues(\r\n                    this.getFields(address && address.countryCode),\r\n                    address\r\n                ),\r\n            });\r\n        } catch (e) {\r\n            onUnhandledError(e);\r\n        } finally {\r\n            this.setState({ isResettingAddress: false });\r\n        }\r\n    };\r\n\r\n    private getFields(countryCode: string | undefined): FormField[] {\r\n        const {\r\n            getFields,\r\n        } = this.props;\r\n\r\n        return getFields(countryCode);\r\n    }\r\n}\r\n\r\nexport default withLanguage(withFormik<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\r\n    handleSubmit: (values, { props: { onSubmit } }) => {\r\n        onSubmit(values);\r\n    },\r\n    mapPropsToValues: ({ getFields, shippingAddress, isBillingSameAsShipping, customerMessage }) => ({\r\n        billingSameAsShipping: isBillingSameAsShipping,\r\n        orderComment: customerMessage,\r\n        shippingAddress: mapAddressToFormValues(\r\n            getFields(shippingAddress && shippingAddress.countryCode),\r\n            shippingAddress\r\n        ),\r\n    }),\r\n    isInitialValid: ({\r\n        shippingAddress,\r\n        getFields,\r\n        language,\r\n    }) => (\r\n        !!shippingAddress && getAddressFormFieldsValidationSchema({\r\n            language,\r\n            formFields: getFields(shippingAddress.countryCode),\r\n        }).isValidSync(shippingAddress)\r\n    ),\r\n    validationSchema: ({\r\n        language,\r\n        getFields,\r\n        methodId,\r\n    }: SingleShippingFormProps & WithLanguageProps) => methodId ?\r\n        object({\r\n            shippingAddress: lazy<Partial<AddressFormValues>>(formValues =>\r\n                getCustomFormFieldsValidationSchema({\r\n                    translate: getTranslateAddressError(language),\r\n                    formFields: getFields(formValues && formValues.countryCode),\r\n                })\r\n            ),\r\n        }) :\r\n        object({\r\n            shippingAddress: lazy<Partial<AddressFormValues>>(formValues =>\r\n                getAddressFormFieldsValidationSchema({\r\n                    language,\r\n                    formFields: getFields(formValues && formValues.countryCode),\r\n                })\r\n            ),\r\n        }),\r\n    enableReinitialize: false,\r\n})(SingleShippingForm));\r\n","import { Address, AddressRequestBody, Cart, CheckoutParams, CheckoutSelectors, Consignment, ConsignmentAssignmentRequestBody, Country, CustomerAddress, CustomerRequestOptions, FormField, RequestOptions, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\r\nimport React, { Component, ReactNode } from 'react';\r\n\r\nimport { withLanguage, WithLanguageProps } from '../locale';\r\n\r\nimport MultiShippingForm, { MultiShippingFormValues } from './MultiShippingForm';\r\nimport SingleShippingForm, { SingleShippingFormValues } from './SingleShippingForm';\r\n\r\nexport interface ShippingFormProps {\r\n    addresses: CustomerAddress[];\r\n    cart: Cart;\r\n    cartHasChanged: boolean;\r\n    consignments: Consignment[];\r\n    countries: Country[];\r\n    countriesWithAutocomplete: string[];\r\n    customerMessage: string;\r\n    googleMapsApiKey?: string;\r\n    isBillingSameAsShipping: boolean;\r\n    isGuest: boolean;\r\n    isLoading: boolean;\r\n    isShippingStepPending: boolean;\r\n    isMultiShippingMode: boolean;\r\n    methodId?: string;\r\n    shippingAddress?: Address;\r\n    shouldShowSaveAddress?: boolean;\r\n    shouldShowOrderComments: boolean;\r\n    shouldShowAddAddressInCheckout: boolean;\r\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\r\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\r\n    deleteConsignments(): Promise<Address | undefined>;\r\n    getFields(countryCode?: string): FormField[];\r\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\r\n    onCreateAccount(): void;\r\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\r\n    onMultiShippingSubmit(values: MultiShippingFormValues): void;\r\n    onSignIn(): void;\r\n    onSingleShippingSubmit(values: SingleShippingFormValues): void;\r\n    onUnhandledError(error: Error): void;\r\n    onUseNewAddress(address: Address, itemId: string): void;\r\n    signOut(options?: CustomerRequestOptions): void;\r\n    updateAddress(address: Partial<Address>, options: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors>;\r\n}\r\n\r\nclass ShippingForm extends Component<ShippingFormProps & WithLanguageProps> {\r\n    render(): ReactNode {\r\n        const {\r\n            addresses,\r\n            assignItem,\r\n            cart,\r\n            cartHasChanged,\r\n            createCustomerAddress,\r\n            consignments,\r\n            countries,\r\n            countriesWithAutocomplete,\r\n            onCreateAccount,\r\n            customerMessage,\r\n            deinitialize,\r\n            deleteConsignments,\r\n            getFields,\r\n            googleMapsApiKey,\r\n            initialize,\r\n            isBillingSameAsShipping,\r\n            isGuest,\r\n            isLoading,\r\n            isMultiShippingMode,\r\n            methodId,\r\n            onMultiShippingSubmit,\r\n            onSignIn,\r\n            onSingleShippingSubmit,\r\n            onUnhandledError,\r\n            onUseNewAddress,\r\n            shippingAddress,\r\n            shouldShowOrderComments,\r\n            shouldShowSaveAddress,\r\n            shouldShowAddAddressInCheckout,\r\n            signOut,\r\n            updateAddress,\r\n            isShippingStepPending,\r\n        } = this.props;\r\n\r\n        return isMultiShippingMode ?\r\n            <MultiShippingForm\r\n                addresses={ addresses }\r\n                assignItem={ assignItem }\r\n                cart={ cart }\r\n                cartHasChanged={ cartHasChanged }\r\n                consignments={ consignments }\r\n                countries={ countries }\r\n                countriesWithAutocomplete={ countriesWithAutocomplete }\r\n                createCustomerAddress={ createCustomerAddress }\r\n                customerMessage={ customerMessage }\r\n                defaultCountryCode={ shippingAddress?.countryCode }\r\n                getFields={ getFields }\r\n                googleMapsApiKey={ googleMapsApiKey }\r\n                isGuest={ isGuest }\r\n                isLoading={ isLoading }\r\n                onCreateAccount={ onCreateAccount }\r\n                onSignIn={ onSignIn }\r\n                onSubmit={ onMultiShippingSubmit }\r\n                onUnhandledError={ onUnhandledError }\r\n                onUseNewAddress={ onUseNewAddress }\r\n                shouldShowAddAddressInCheckout={ shouldShowAddAddressInCheckout }\r\n                shouldShowOrderComments={ shouldShowOrderComments }\r\n            /> :\r\n            <SingleShippingForm\r\n                addresses={ addresses }\r\n                cartHasChanged={ cartHasChanged }\r\n                consignments={ consignments }\r\n                countries={ countries }\r\n                countriesWithAutocomplete={ countriesWithAutocomplete }\r\n                customerMessage={ customerMessage }\r\n                deinitialize={ deinitialize }\r\n                deleteConsignments={ deleteConsignments }\r\n                getFields={ getFields }\r\n                googleMapsApiKey={ googleMapsApiKey }\r\n                initialize={ initialize }\r\n                isBillingSameAsShipping={ isBillingSameAsShipping }\r\n                isLoading={ isLoading }\r\n                isMultiShippingMode={ isMultiShippingMode }\r\n                isShippingStepPending={ isShippingStepPending }\r\n                methodId={ methodId }\r\n                onSubmit={ onSingleShippingSubmit }\r\n                onUnhandledError={ onUnhandledError }\r\n                shippingAddress={ shippingAddress }\r\n                shouldShowOrderComments={ shouldShowOrderComments }\r\n                shouldShowSaveAddress={ shouldShowSaveAddress }\r\n                signOut={ signOut }\r\n                updateAddress={ updateAddress }\r\n            />;\r\n    }\r\n}\r\n\r\nexport default withLanguage(ShippingForm);\r\n","import React, { memo, FunctionComponent } from 'react';\r\n\r\nimport { preventDefault } from '../common/dom';\r\nimport { TranslatedString } from '../locale';\r\nimport { Legend } from '../ui/form';\r\n\r\ninterface ShippingHeaderProps {\r\n    isMultiShippingMode: boolean;\r\n    isGuest: boolean;\r\n    shouldShowMultiShipping: boolean;\r\n    onMultiShippingChange(): void;\r\n}\r\n\r\nconst ShippingHeader: FunctionComponent<ShippingHeaderProps> = ({\r\n    isMultiShippingMode,\r\n    isGuest,\r\n    onMultiShippingChange,\r\n    shouldShowMultiShipping,\r\n}) => (\r\n    <div className=\"form-legend-container\">\r\n        <Legend testId=\"shipping-address-heading\">\r\n            <TranslatedString\r\n                id={ isMultiShippingMode ?\r\n                    (isGuest ?\r\n                        'shipping.multishipping_address_heading_guest' :\r\n                        'shipping.multishipping_address_heading') :\r\n                    'shipping.shipping_address_heading' }\r\n            />\r\n        </Legend>\r\n\r\n        { shouldShowMultiShipping &&\r\n            <a\r\n                data-test=\"shipping-mode-toggle\"\r\n                href=\"#\"\r\n                onClick={ preventDefault(onMultiShippingChange) }\r\n            >\r\n                <TranslatedString id={ isMultiShippingMode ?\r\n                    'shipping.ship_to_single' :\r\n                    'shipping.ship_to_multi' }\r\n                />\r\n            </a> }\r\n    </div>\r\n);\r\n\r\nexport default memo(ShippingHeader);\r\n","import { Address, AddressRequestBody, Cart, CheckoutRequestBody, CheckoutSelectors, Consignment, ConsignmentAssignmentRequestBody, Country, Customer, CustomerRequestOptions, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\r\nimport { noop } from 'lodash';\r\nimport React, { Component, ReactNode } from 'react';\r\nimport { createSelector } from 'reselect';\r\n\r\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\r\nimport { withCheckout, CheckoutContextProps } from '../checkout';\r\nimport { EMPTY_ARRAY } from '../common/utility';\r\nimport { LoadingOverlay } from '../ui/loading';\r\n\r\nimport { UnassignItemError } from './errors';\r\nimport getShippableItemsCount from './getShippableItemsCount';\r\nimport getShippingMethodId from './getShippingMethodId';\r\nimport { MultiShippingFormValues } from './MultiShippingForm';\r\nimport ShippingForm from './ShippingForm';\r\nimport ShippingHeader from './ShippingHeader';\r\nimport { SingleShippingFormValues } from './SingleShippingForm';\r\n\r\nexport interface ShippingProps {\r\n    isBillingSameAsShipping: boolean;\r\n    cartHasChanged: boolean;\r\n    isMultiShippingMode: boolean;\r\n    onCreateAccount(): void;\r\n    onToggleMultiShipping(): void;\r\n    onReady?(): void;\r\n    onUnhandledError(error: Error): void;\r\n    onSignIn(): void;\r\n    navigateNextStep(isBillingSameAsShipping: boolean): void;\r\n}\r\n\r\nexport interface WithCheckoutShippingProps {\r\n    billingAddress?: Address;\r\n    cart: Cart;\r\n    consignments: Consignment[];\r\n    countries: Country[];\r\n    countriesWithAutocomplete: string[];\r\n    customer: Customer;\r\n    customerMessage: string;\r\n    googleMapsApiKey: string;\r\n    isGuest: boolean;\r\n    isInitializing: boolean;\r\n    isLoading: boolean;\r\n    isShippingStepPending: boolean;\r\n    methodId?: string;\r\n    shippingAddress?: Address;\r\n    shouldShowAddAddressInCheckout: boolean;\r\n    shouldShowMultiShipping: boolean;\r\n    shouldShowOrderComments: boolean;\r\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\r\n    deinitializeShippingMethod(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\r\n    deleteConsignments(): Promise<Address | undefined>;\r\n    getFields(countryCode?: string): FormField[];\r\n    initializeShippingMethod(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\r\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\r\n    loadShippingOptions(): Promise<CheckoutSelectors>;\r\n    signOut(options?: CustomerRequestOptions): void;\r\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\r\n    unassignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\r\n    updateBillingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\r\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\r\n    updateShippingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\r\n}\r\n\r\ninterface ShippingState {\r\n    isInitializing: boolean;\r\n}\r\n\r\nclass Shipping extends Component<ShippingProps & WithCheckoutShippingProps, ShippingState> {\r\n    constructor(props: ShippingProps & WithCheckoutShippingProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isInitializing: true,\r\n        };\r\n    }\r\n\r\n    async componentDidMount(): Promise<void> {\r\n        const {\r\n            loadShippingAddressFields,\r\n            loadShippingOptions,\r\n            onReady = noop,\r\n            onUnhandledError = noop,\r\n        } = this.props;\r\n\r\n        try {\r\n            await Promise.all([\r\n                loadShippingAddressFields(),\r\n                loadShippingOptions(),\r\n            ]);\r\n\r\n            onReady();\r\n        } catch (error) {\r\n            onUnhandledError(error);\r\n        } finally {\r\n            this.setState({ isInitializing: false });\r\n        }\r\n    }\r\n\r\n    render(): ReactNode {\r\n        const {\r\n            isBillingSameAsShipping,\r\n            isGuest,\r\n            shouldShowMultiShipping,\r\n            customer,\r\n            unassignItem,\r\n            updateShippingAddress,\r\n            initializeShippingMethod,\r\n            deinitializeShippingMethod,\r\n            isMultiShippingMode,\r\n            onToggleMultiShipping,\r\n            ...shippingFormProps\r\n        } = this.props;\r\n\r\n        const {\r\n            isInitializing,\r\n        } = this.state;\r\n\r\n        return (\r\n            <div className=\"checkout-form\">\r\n                <ShippingHeader\r\n                    isGuest={ isGuest }\r\n                    isMultiShippingMode={ isMultiShippingMode }\r\n                    onMultiShippingChange={ this.handleMultiShippingModeSwitch }\r\n                    shouldShowMultiShipping={ shouldShowMultiShipping }\r\n                />\r\n\r\n                <LoadingOverlay\r\n                    isLoading={ isInitializing }\r\n                    unmountContentWhenLoading\r\n                >\r\n                    <ShippingForm\r\n                        { ...shippingFormProps }\r\n                        addresses={ customer.addresses }\r\n                        deinitialize={ deinitializeShippingMethod }\r\n                        initialize={ initializeShippingMethod }\r\n                        isBillingSameAsShipping = { isBillingSameAsShipping }\r\n                        isGuest={ isGuest }\r\n                        isMultiShippingMode={ isMultiShippingMode }\r\n                        onMultiShippingSubmit={ this.handleMultiShippingSubmit }\r\n                        onSingleShippingSubmit={ this.handleSingleShippingSubmit }\r\n                        onUseNewAddress={ this.handleUseNewAddress }\r\n                        shouldShowSaveAddress={ !isGuest }\r\n                        updateAddress={ updateShippingAddress }\r\n                    />\r\n                </LoadingOverlay>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private handleMultiShippingModeSwitch: () => void = async () => {\r\n        const {\r\n            consignments,\r\n            isMultiShippingMode,\r\n            onToggleMultiShipping = noop,\r\n            onUnhandledError = noop,\r\n            updateShippingAddress,\r\n        } = this.props;\r\n\r\n        if (isMultiShippingMode && consignments.length > 1) {\r\n            this.setState({ isInitializing: true });\r\n\r\n            try {\r\n                // Collapse all consignments into one\r\n                await updateShippingAddress(consignments[0].shippingAddress);\r\n            } catch (error) {\r\n                onUnhandledError(error);\r\n            } finally {\r\n                this.setState({ isInitializing: false });\r\n            }\r\n        }\r\n\r\n        onToggleMultiShipping();\r\n    };\r\n\r\n    private handleSingleShippingSubmit: (values: SingleShippingFormValues) => void = async ({\r\n        billingSameAsShipping,\r\n        shippingAddress: addressValues,\r\n        orderComment,\r\n    }) => {\r\n        const {\r\n            customerMessage,\r\n            updateCheckout,\r\n            updateShippingAddress,\r\n            updateBillingAddress,\r\n            navigateNextStep,\r\n            onUnhandledError,\r\n            shippingAddress,\r\n            billingAddress,\r\n            methodId,\r\n        } = this.props;\r\n\r\n        const updatedShippingAddress = addressValues && mapAddressFromFormValues(addressValues);\r\n        const promises: Array<Promise<CheckoutSelectors>> = [];\r\n        const hasRemoteBilling = this.hasRemoteBilling(methodId);\r\n\r\n        if (!isEqualAddress(updatedShippingAddress, shippingAddress)) {\r\n            promises.push(updateShippingAddress(updatedShippingAddress || {}));\r\n        }\r\n\r\n        if (billingSameAsShipping &&\r\n            updatedShippingAddress &&\r\n            !isEqualAddress(updatedShippingAddress, billingAddress) &&\r\n            !hasRemoteBilling\r\n        ) {\r\n            promises.push(updateBillingAddress(updatedShippingAddress));\r\n        }\r\n\r\n        if (customerMessage !== orderComment) {\r\n            promises.push(updateCheckout({ customerMessage: orderComment }));\r\n        }\r\n\r\n        try {\r\n            await Promise.all(promises);\r\n\r\n            navigateNextStep(billingSameAsShipping);\r\n        } catch (error) {\r\n            onUnhandledError(error);\r\n        }\r\n    };\r\n\r\n    private hasRemoteBilling: (methodId?: string) => boolean = methodId => {\r\n        const PAYMENT_METHOD_VALID = ['amazonpay'];\r\n\r\n        return PAYMENT_METHOD_VALID.some(method => method === methodId);\r\n    };\r\n\r\n    private handleUseNewAddress: (address: Address, itemId: string) => void = async (address, itemId) => {\r\n        const { unassignItem, onUnhandledError } = this.props;\r\n\r\n        try {\r\n            await unassignItem({\r\n                address,\r\n                lineItems: [{\r\n                    quantity: 1,\r\n                    itemId,\r\n                }],\r\n            });\r\n\r\n            location.href = '/account.php?action=add_shipping_address&from=checkout';\r\n        } catch (e) {\r\n            onUnhandledError(new UnassignItemError(e));\r\n        }\r\n    };\r\n\r\n    private handleMultiShippingSubmit: (values: MultiShippingFormValues) => void = async ({ orderComment }) => {\r\n        const {\r\n            customerMessage,\r\n            updateCheckout,\r\n            navigateNextStep,\r\n            onUnhandledError,\r\n        } = this.props;\r\n\r\n        try {\r\n            if (customerMessage !== orderComment) {\r\n                await updateCheckout({ customerMessage: orderComment });\r\n            }\r\n\r\n            navigateNextStep(false);\r\n        } catch (error) {\r\n            onUnhandledError(error);\r\n        }\r\n    };\r\n}\r\n\r\nconst deleteConsignmentsSelector = createSelector(\r\n    ({ checkoutService: { deleteConsignment } }: CheckoutContextProps) => deleteConsignment,\r\n    ({ checkoutState: { data } }: CheckoutContextProps) => data.getConsignments(),\r\n    (deleteConsignment, consignments) => async () => {\r\n        if (!consignments || !consignments.length) {\r\n            return;\r\n        }\r\n\r\n        const [{ data }] = await Promise.all(consignments.map(({ id }) =>\r\n            deleteConsignment(id)\r\n        ));\r\n\r\n        return data.getShippingAddress();\r\n    }\r\n);\r\n\r\nexport function mapToShippingProps({\r\n    checkoutService,\r\n    checkoutState,\r\n}: CheckoutContextProps): WithCheckoutShippingProps | null {\r\n    const {\r\n        data: {\r\n            getCart,\r\n            getCheckout,\r\n            getConfig,\r\n            getCustomer,\r\n            getConsignments,\r\n            getShippingAddress,\r\n            getBillingAddress,\r\n            getShippingAddressFields,\r\n            getShippingCountries,\r\n        },\r\n        statuses: {\r\n            isShippingStepPending,\r\n            isSelectingShippingOption,\r\n            isLoadingShippingOptions,\r\n            isUpdatingConsignment,\r\n            isCreatingConsignments,\r\n            isCreatingCustomerAddress,\r\n            isLoadingShippingCountries,\r\n            isUpdatingBillingAddress,\r\n            isUpdatingCheckout,\r\n        },\r\n    } = checkoutState;\r\n\r\n    const checkout = getCheckout();\r\n    const config = getConfig();\r\n    const consignments = getConsignments() || [];\r\n    const customer = getCustomer();\r\n    const cart = getCart();\r\n\r\n    if (!checkout || !config || !customer || !cart) {\r\n        return null;\r\n    }\r\n\r\n    const {\r\n        checkoutSettings: {\r\n            enableOrderComments,\r\n            features,\r\n            hasMultiShippingEnabled,\r\n            googleMapsApiKey,\r\n        },\r\n    } = config;\r\n\r\n    const methodId = getShippingMethodId(checkout);\r\n    const shippableItemsCount = getShippableItemsCount(cart);\r\n    const isLoading = (\r\n        isLoadingShippingOptions() ||\r\n        isSelectingShippingOption() ||\r\n        isUpdatingConsignment() ||\r\n        isCreatingConsignments() ||\r\n        isUpdatingBillingAddress() ||\r\n        isUpdatingCheckout() ||\r\n        isCreatingCustomerAddress()\r\n    );\r\n    const shouldShowMultiShipping = (\r\n        hasMultiShippingEnabled &&\r\n        !methodId &&\r\n        shippableItemsCount > 1 &&\r\n        shippableItemsCount < 50\r\n    );\r\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ'];\r\n\r\n    if (features['CHECKOUT-4183.checkout_google_address_autocomplete_uk']) {\r\n        countriesWithAutocomplete.push('GB');\r\n    }\r\n\r\n    const shippingAddress = !shouldShowMultiShipping && consignments.length > 1 ? undefined : getShippingAddress();\r\n\r\n    return {\r\n        assignItem: checkoutService.assignItemsToAddress,\r\n        billingAddress: getBillingAddress(),\r\n        cart,\r\n        consignments,\r\n        countries: getShippingCountries() || EMPTY_ARRAY,\r\n        countriesWithAutocomplete,\r\n        customer,\r\n        customerMessage: checkout.customerMessage,\r\n        createCustomerAddress: checkoutService.createCustomerAddress,\r\n        deinitializeShippingMethod: checkoutService.deinitializeShipping,\r\n        deleteConsignments: deleteConsignmentsSelector({ checkoutService, checkoutState }),\r\n        getFields: getShippingAddressFields,\r\n        googleMapsApiKey,\r\n        initializeShippingMethod: checkoutService.initializeShipping,\r\n        isGuest: customer.isGuest,\r\n        isInitializing: isLoadingShippingCountries() || isLoadingShippingOptions(),\r\n        isLoading,\r\n        isShippingStepPending: isShippingStepPending(),\r\n        loadShippingAddressFields: checkoutService.loadShippingAddressFields,\r\n        loadShippingOptions: checkoutService.loadShippingOptions,\r\n        methodId,\r\n        shippingAddress,\r\n        shouldShowMultiShipping,\r\n        shouldShowAddAddressInCheckout: features['CHECKOUT-4726.add_address_in_multishipping_checkout'],\r\n        shouldShowOrderComments: enableOrderComments,\r\n        signOut: checkoutService.signOutCustomer,\r\n        unassignItem: checkoutService.unassignItemsToAddress,\r\n        updateBillingAddress: checkoutService.updateBillingAddress,\r\n        updateCheckout: checkoutService.updateCheckout,\r\n        updateShippingAddress: checkoutService.updateShippingAddress,\r\n    };\r\n}\r\n\r\nexport default withCheckout(mapToShippingProps)(Shipping);\r\n","import { noop } from 'lodash';\r\nimport { createContext } from 'react';\r\n\r\nexport interface AccordionContextProps {\r\n    selectedItemId?: string;\r\n    onToggle(id: string): void;\r\n}\r\n\r\nconst AccordionContext = createContext<AccordionContextProps>({ onToggle: noop });\r\n\r\nexport default AccordionContext;\r\n","import { memoizeOne } from '@bigcommerce/memoize';\r\nimport { noop } from 'lodash';\r\nimport React, { Component, ReactNode } from 'react';\r\n\r\nimport AccordionContext from './AccordionContext';\r\n\r\nexport interface AccordionProps {\r\n    children: ReactNode;\r\n    className?: string;\r\n    defaultSelectedItemId?: string;\r\n    isDisabled?: boolean;\r\n    onSelect?(id: string): void;\r\n}\r\n\r\nexport interface AccordionState {\r\n    selectedItemId?: string;\r\n}\r\n\r\nexport default class Accordion extends Component<AccordionProps, AccordionState> {\r\n    state: AccordionState = {};\r\n\r\n    private getContextValue = memoizeOne(selectedItemId => {\r\n        return {\r\n            onToggle: this.handleToggleItem,\r\n            selectedItemId,\r\n        };\r\n    });\r\n\r\n    render(): ReactNode {\r\n        const {\r\n            children,\r\n            className = 'accordion',\r\n            defaultSelectedItemId,\r\n        } = this.props;\r\n\r\n        const { selectedItemId = defaultSelectedItemId } = this.state;\r\n\r\n        return (\r\n            <AccordionContext.Provider value={ this.getContextValue(selectedItemId) }>\r\n                <ul className={ className }>\r\n                    { children }\r\n                </ul>\r\n            </AccordionContext.Provider>\r\n        );\r\n    }\r\n\r\n    private handleToggleItem: (id: string) => void = id => {\r\n        const { isDisabled, onSelect = noop } = this.props;\r\n\r\n        if (isDisabled) {\r\n            return;\r\n        }\r\n\r\n        this.setState({ selectedItemId: id });\r\n        onSelect(id);\r\n    };\r\n}\r\n","import { noop } from 'lodash';\r\nimport React, { createContext, memo, useCallback, useMemo, FunctionComponent, ReactNode } from 'react';\r\n\r\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\r\nimport { Accordion } from '../accordion';\r\n\r\nexport interface ChecklistProps {\r\n    children: ReactNode;\r\n    defaultSelectedItemId?: string;\r\n    isDisabled?: boolean;\r\n    name: string;\r\n    onSelect?(value: string): void;\r\n}\r\n\r\nexport interface ChecklistContextProps {\r\n    name: string;\r\n}\r\n\r\nexport const ChecklistContext = createContext<ChecklistContextProps | undefined>(undefined);\r\n\r\nconst Checklist: FunctionComponent<\r\n    ChecklistProps &\r\n    ConnectFormikProps<{ [key: string]: string }>\r\n> = ({\r\n    formik: { setFieldValue },\r\n    name,\r\n    onSelect = noop,\r\n    ...props\r\n}) => {\r\n    const handleSelect = useCallback((value: string) => {\r\n        setFieldValue(name, value);\r\n        onSelect(value);\r\n    }, [\r\n        name,\r\n        onSelect,\r\n        setFieldValue,\r\n    ]);\r\n\r\n    const contextValue = useMemo(() => ({ name }), [name]);\r\n\r\n    return (\r\n        <ChecklistContext.Provider value={ contextValue }>\r\n            <Accordion\r\n                { ...props }\r\n                className=\"form-checklist optimizedCheckout-form-checklist\"\r\n                onSelect={ handleSelect }\r\n            />\r\n        </ChecklistContext.Provider>\r\n    );\r\n};\r\n\r\nexport default connectFormik(memo(Checklist));\r\n","import classNames from 'classnames';\r\nimport React, { memo, useCallback, useContext, FunctionComponent, ReactNode } from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nimport AccordionContext from './AccordionContext';\r\n\r\nexport interface AccordionItemProps {\r\n    bodyClassName?: string;\r\n    children?: ReactNode;\r\n    className?: string;\r\n    classNameSelected?: string;\r\n    headerClassName?: string;\r\n    headerClassNameSelected?: string;\r\n    itemId: string;\r\n    headerContent(props: AccordionItemHeaderProps): ReactNode;\r\n}\r\n\r\nexport interface AccordionItemHeaderProps {\r\n    isSelected: boolean;\r\n    onToggle(id: string): void;\r\n}\r\n\r\nconst AccordionItem: FunctionComponent<AccordionItemProps> = ({\r\n    bodyClassName = 'accordion-item-body',\r\n    children,\r\n    className = 'accordion-item',\r\n    classNameSelected = 'accordion-item--selected',\r\n    headerClassName = 'accordion-item-header',\r\n    headerClassNameSelected = 'accordion-item-header--selected',\r\n    headerContent,\r\n    itemId,\r\n}) => {\r\n    const { onToggle, selectedItemId } = useContext(AccordionContext);\r\n    const isSelected = selectedItemId === itemId;\r\n\r\n    const transitionEndListener = useCallback((node, done) => {\r\n        node.addEventListener('transitionend', ({ target }: Event) => {\r\n            if (target === node) {\r\n                done();\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <li className={ classNames(\r\n            className,\r\n            { [classNameSelected]: isSelected }\r\n        ) }\r\n        >\r\n            <div className={ classNames(\r\n                headerClassName,\r\n                { [headerClassNameSelected]: isSelected }\r\n            ) }\r\n            >\r\n                { headerContent({ isSelected, onToggle }) }\r\n            </div>\r\n\r\n            { children && <CSSTransition\r\n                addEndListener={ transitionEndListener }\r\n                classNames={ bodyClassName }\r\n                in={ isSelected }\r\n                mountOnEnter\r\n                timeout={ {} }\r\n                unmountOnExit\r\n            >\r\n                <div className={ bodyClassName }>\r\n                    { children }\r\n                </div>\r\n            </CSSTransition> }\r\n        </li>\r\n    );\r\n};\r\n\r\nexport default memo(AccordionItem);\r\n","import React, { FunctionComponent, InputHTMLAttributes } from 'react';\r\n\r\nimport Input from './Input';\r\nimport Label from './Label';\r\n\r\nexport interface ChecklistItemInputProps extends InputHTMLAttributes<HTMLInputElement> {\r\n    isSelected: boolean;\r\n}\r\n\r\nconst ChecklistItemInput: FunctionComponent<ChecklistItemInputProps> = ({\r\n    id,\r\n    isSelected,\r\n    children,\r\n    ...props\r\n}) => (\r\n    <>\r\n        <Input\r\n            { ...props }\r\n            checked={ isSelected }\r\n            className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\r\n            id={ id }\r\n            type=\"radio\"\r\n        />\r\n\r\n        <Label htmlFor={ id }>\r\n            { children }\r\n        </Label>\r\n    </>\r\n);\r\n\r\nexport default ChecklistItemInput;\r\n","import { memoizeOne } from '@bigcommerce/memoize';\r\nimport { FieldProps } from 'formik';\r\nimport { kebabCase } from 'lodash';\r\nimport React, { memo, useCallback, useContext, FunctionComponent, ReactNode } from 'react';\r\n\r\nimport { AccordionItem, AccordionItemHeaderProps } from '../accordion';\r\n\r\nimport BasicFormField from './BasicFormField';\r\nimport { ChecklistContext } from './Checklist';\r\nimport ChecklistItemInput from './ChecklistItemInput';\r\n\r\nexport interface ChecklistItemProps {\r\n    content?: ReactNode;\r\n    htmlId?: string;\r\n    isDisabled?: boolean;\r\n    label: ReactNode | ((isSelected: boolean) => ReactNode);\r\n    value: string;\r\n}\r\n\r\nconst ChecklistItem: FunctionComponent<ChecklistItemProps> = ({\r\n    isDisabled,\r\n    value,\r\n    content,\r\n    htmlId = kebabCase(value),\r\n    label,\r\n    ...rest\r\n}) => {\r\n    const { name = '' } = useContext(ChecklistContext) || {};\r\n\r\n    const renderInput = useCallback(memoizeOne((isSelected: boolean) => ({ field }: FieldProps) => (\r\n        <ChecklistItemInput\r\n            { ...field }\r\n            disabled={ isDisabled }\r\n            id={ htmlId }\r\n            isSelected={ field.value === value }\r\n            value={ value }\r\n        >\r\n            { label instanceof Function ?\r\n                label(isSelected) :\r\n                label }\r\n        </ChecklistItemInput>\r\n    )), [\r\n        htmlId,\r\n        isDisabled,\r\n        label,\r\n        value,\r\n    ]);\r\n\r\n    const handleChange = useCallback(memoizeOne((onToggle: (id: string) => void) => (selectedValue: string) => {\r\n        if (value === selectedValue) {\r\n            onToggle(value);\r\n        }\r\n    }), []);\r\n\r\n    const renderHeaderContent = useCallback(({\r\n        isSelected,\r\n        onToggle,\r\n    }: AccordionItemHeaderProps) => (\r\n        <BasicFormField\r\n            className=\"form-checklist-option\"\r\n            name={ name }\r\n            onChange={ handleChange(onToggle) }\r\n            render={ renderInput(isSelected) }\r\n        />\r\n    ), [\r\n        handleChange,\r\n        name,\r\n        renderInput,\r\n    ]);\r\n\r\n    return (\r\n        <AccordionItem\r\n            { ...rest }\r\n            bodyClassName=\"form-checklist-body\"\r\n            className=\"form-checklist-item optimizedCheckout-form-checklist-item\"\r\n            classNameSelected=\"form-checklist-item--selected optimizedCheckout-form-checklist-item--selected\"\r\n            headerClassName=\"form-checklist-header\"\r\n            headerClassNameSelected=\"form-checklist-header--selected\"\r\n            headerContent={ renderHeaderContent }\r\n            itemId={ value }\r\n        >\r\n            { content }\r\n        </AccordionItem>\r\n    );\r\n};\r\n\r\nexport default memo(ChecklistItem);\r\n"],"names":["connectFormik","OriginalComponent","InnerComponent","memo","props","prevFormik","prevProps","nextFormik","nextProps","DecoratedComponent","connect","displayName","name","parseAnchor","text","div","document","createElement","innerHTML","anchor","querySelector","anchorSiblings","split","outerHTML","data","id","language","onClick","testId","translatedString","translate","parsedString","length","href","message","getLanguageService","UnassignItemError","prototype","CustomError","getShippingMethodId","checkout","preselectedPayment","getPreselectedPayment","indexOf","providerId","undefined","SaveAddressForm","withLanguage","withFormik","handleSubmit","values","onSaveAddress","mapPropsToValues","defaultCountryCode","firstName","lastName","address1","address2","customFields","country","countryCode","stateOrProvince","stateOrProvinceCode","postalCode","phone","city","company","shouldSaveAddress","validationSchema","getFields","getAddressFormFieldsValidationSchema","formFields","googleMapsApiKey","countriesWithAutocomplete","countries","setFieldValue","isLoading","onRequestClose","Form","autoComplete","LoadingOverlay","AddressForm","shouldShowSaveAddress","className","preventDefault","TranslatedString","Button","disabled","type","variant","isOpen","onAfterOpen","addressFormProps","Modal","additionalModalClassName","header","ModalHeader","shouldShowCloseButton","title","AssignItemInvalidAddressError","AssignItemFailedError","findConsignment","consignments","itemId","find","consignment","includes","lineItemIds","getShippableLineItems","cart","reduce","lineItems","physicalItems","result","item","i","addedByPromotion","isNil","parentId","concat","lineItemIndex","splitItems","quantity","key","variantId","productId","splitItem","updateShippableItems","items","updatedItemIndex","address","cartItemIds","map","updatedConsignment","isEqualAddress","shippingAddress","newId","matchingCartItems","filter","matchingCartItemIds","findNewItemId","imageUrl","options","addresses","onSelectAddress","onUseNewAddress","handleUseNewAddress","useCallback","handleSelectAddress","alt","src","optionName","value","nameId","AddressSelect","selectedAddress","getRecommendedShippingOption","availableShippingOptions","ShippingOptionListItem","consignmentId","shippingOption","renderLabel","StaticShippingOption","displayAdditionalInformation","method","ChecklistItem","htmlId","label","inputName","shippingOptions","selectedShippingOptionId","onSelectedOption","handleSelect","Checklist","defaultSelectedItemId","onSelect","selectDefaultShippingOptions","this","selectShippingOption","getConsignments","selectedShippingOption","recommendedOption","singleShippingOption","defaultShippingOption","componentDidMount","subscribeToConsignments","unsubscribe","componentWillUnmount","render","isMultiShippingMode","shouldShowShippingOptions","invalidShippingMessage","methodId","renderConsignment","hideContentWhenLoading","renderNoShippingOptions","StaticAddress","StaticConsignmentItemList","PureComponent","noop","shippingOptionIds","forEach","ShippingOptionsForm","subscribeToConsignmentsSelector","createSelector","subscribe","subscriber","isLoadingSelector","_","isLoadingShippingOptions","isSelectingShippingOption","isUpdatingConsignment","isCreatingConsignments","isUpdatingAddress","withCheckout","checkoutService","checkoutState","getCart","getConfig","getCustomer","getCheckout","customer","config","unsortedConsignments","shippableItems","consignmentsOrder","uniq","sortBy","sortConsignments","checkoutSettings","selectConsignmentShippingOption","cartHasChanged","shouldShowOrderComments","shouldDisableSubmit","Fieldset","legend","Legend","Alert","ShippingOptions","OrderComments","state","handleCloseErrorModal","setState","createCustomerAddressError","handleSaveAddress","createCustomerAddress","itemAddingAddress","mapAddressFromFormValues","itemKey","handleCloseAddAddressForm","assignItem","onUnhandledError","isValidAddress","syncItems","hasSelectedShippingOptions","currentItems","findIndex","getDerivedStateFromProps","getShippableItemsCount","isGuest","onSignIn","onCreateAccount","TranslatedLink","Fragment","ErrorModal","error","onClose","shouldShowErrorCode","hasUnassignedLineItems","onSubmit","orderComment","enableReinitialize","MultiShippingForm","onChange","labelContent","useMemo","CheckboxFormField","handleFieldValueChange","onFieldChange","initialize","deinitialize","containerId","tabIndex","field","DynamicFormField","parentFieldName","addressFieldName","fieldName","fieldValue","custom","handleChange","handleAutocompleteToggle","inputValue","onAddressSelect","formAddress","hasAddresses","hasValidCustomerAddress","isValidCustomerAddress","unmountContentWhenLoading","onAutocompleteToggle","Component","ShippingAddressForm","buttonId","customFormFields","shouldShowCustomFormFields","style","padding","size","hasRequestedShippingOptions","isShippingStepPending","setSubmitted","useContext","initializeShipping","memoizeOne","defaultOptions","amazon","container","onError","editAddressButtonId","amazonpay","SHIPPING_ADDRESS_FIELDS","isResettingAddress","isUpdatingShippingData","isValid","handleFieldChange","Promise","resolve","setTimeout","isShippingField","updateAddressWithFormData","handleAddressSelect","updateAddress","setValues","mapAddressToFormValues","deleteConsignments","debouncedUpdateAddress","debounce","includeShippingOptions","params","include","addressForm","shouldShowBillingSameAsShipping","some","updatedShippingAddress","contextType","billingSameAsShipping","isInitialValid","isValidSync","formValues","getCustomFormFieldsValidationSchema","SingleShippingForm","customerMessage","isBillingSameAsShipping","onMultiShippingSubmit","onSingleShippingSubmit","shouldShowAddAddressInCheckout","signOut","ShippingForm","onMultiShippingChange","shouldShowMultiShipping","handleMultiShippingModeSwitch","onToggleMultiShipping","updateShippingAddress","isInitializing","handleSingleShippingSubmit","addressValues","updateCheckout","updateBillingAddress","navigateNextStep","billingAddress","promises","hasRemoteBilling","push","all","unassignItem","location","handleMultiShippingSubmit","loadShippingAddressFields","loadShippingOptions","onReady","initializeShippingMethod","deinitializeShippingMethod","shippingFormProps","deleteConsignmentsSelector","deleteConsignment","getShippingAddress","mapToShippingProps","getBillingAddress","getShippingAddressFields","getShippingCountries","isCreatingCustomerAddress","isLoadingShippingCountries","isUpdatingBillingAddress","isUpdatingCheckout","enableOrderComments","features","hasMultiShippingEnabled","shippableItemsCount","assignItemsToAddress","deinitializeShipping","signOutCustomer","unassignItemsToAddress","Shipping","createContext","onToggle","getContextValue","selectedItemId","handleToggleItem","isDisabled","children","AccordionContext","ChecklistContext","contextValue","Provider","bodyClassName","classNameSelected","headerClassName","headerClassNameSelected","headerContent","isSelected","transitionEndListener","node","done","addEventListener","CSSTransition","addEndListener","classNames","in","mountOnEnter","timeout","unmountOnExit","Input","checked","Label","htmlFor","content","kebabCase","rest","renderInput","Function","selectedValue","renderHeaderContent","BasicFormField"],"sourceRoot":""}